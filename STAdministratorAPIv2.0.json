{
  "openapi": "3.0.1",
  "info": {
    "title": "SecureTransport Administrator API v2.0",
    "contact": {
      "email": "support@axway.com"
    },
    "license": {
      "name": "Copyright Axway 2023. All rights reserved."
    },
    "version": "2.0.0"
  },
  "servers": [
    {
      "url": "/api/v2.0"
    }
  ],
  "tags": [
    {
      "name": "accountSetup"
    },
    {
      "name": "accounts"
    },
    {
      "name": "addressBook"
    },
    {
      "name": "administrativeRoles"
    },
    {
      "name": "administrators"
    },
    {
      "name": "applications"
    },
    {
      "name": "businessUnits"
    },
    {
      "name": "certificates"
    },
    {
      "name": "clusterServices"
    },
    {
      "name": "configurations"
    },
    {
      "name": "daemons"
    },
    {
      "name": "events"
    },
    {
      "name": "icapServers"
    },
    {
      "name": "ldapDomains"
    },
    {
      "name": "loginRestrictionPolicies"
    },
    {
      "name": "logs"
    },
    {
      "name": "mailTemplates"
    },
    {
      "name": "myself"
    },
    {
      "name": "routes"
    },
    {
      "name": "routeStepsMetadata"
    },
    {
      "name": "routeStepsCharsets"
    },
    {
      "name": "servers"
    },
    {
      "name": "sessions"
    },
    {
      "name": "sites"
    },
    {
      "name": "siteTemplates"
    },
    {
      "name": "statisticsSummary"
    },
    {
      "name": "subscriptions"
    },
    {
      "name": "transactionManager"
    },
    {
      "name": "transferProfiles"
    },
    {
      "name": "transfers"
    },
    {
      "name": "userClasses"
    },
    {
      "name": "version"
    },
    {
      "name": "zones"
    }
  ],
  "paths": {
    "/accounts": {
      "get": {
        "tags": [
          "accounts"
        ],
        "summary": "Get accounts collection on the ST server.",
        "description": "Get method returns fully equipped accounts or partial ones based on 'fields' query parameter. One of these links is 'certificates'. \n\n`Permissions`: \"USER_ACCOUNT_FORM\", \"SERVICE_ACCOUNT_FORM\", \"TEMPLATES_FORM\". \n\nThree certificate types are supported for an account object - login, partner and private. `Login` certificates are used when an account needs to login to ST Server using a certificate or SSH Key. `Partner` certificates are used for encrypting PGP and AS2 data to an account and verifying the signature of data from an account. `Private` certificates are used by ST Server to login to remote Transfer Sites for account as well as for decryption and signing of PGP and AS2 data. \n\n`Implementation note:` Searching for account by properties you must specify additional property **type**. Otherwise search is available only for common properties of accounts (name, uid, gid, skin, lastModified, authByEmail,  disabled, transfersWebServiceAllowed, pesitId, accountCreationDate, transferType, accountSubmitForApprove, businessUnit, rejectReason,  accountEncryptMode, subscriptionFolderDiscovery, fileArchivingPolicy, mappedUser, homeFolderAccessLevel, notes, loginRestrictionPolicy,  accountVerificationStatus, additionalAttributes, adhocSettings, contact).\n\n  When trying to filter by fields exclusive to a certain account type, the type property must be specified.",
        "operationId": "getAccounts",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "The limit of the listed rows. The limit parameter can has only nonnegative integer value. If the limit parameter is set to 0 or it is null then its value will be the value of the global server configuration parameter named 'Webservices.EntriesPerPage' (which by default has value 100).\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The start row to list. The offset parameter can has only nonnegative integer value. If this parameter is not set, then it is considered 0.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "The fields of account to return.\n\n**Note:** The type field will always be present.\n",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Account statuses to filter by.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "ACTIVE",
                  "DISABLED",
                  "LOCKED",
                  "PENDING",
                  "REJECTED"
                ]
              }
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Search by account type.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "user",
                "service",
                "template"
              ]
            }
          },
          {
            "name": "businessUnit",
            "in": "query",
            "description": "The business unit name to filter by.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Search by account name.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "homeFolder",
            "in": "query",
            "description": "Search by account home folder.\n\n**Note:** Property 'type' must also be specified.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lastModified.from",
            "in": "query",
            "description": "Search by last modified time from specific date.\n\n**Note:** Format must be *EEE, dd MMM yyyy HH:mm:ss Z*, *yyyy-MM-dd* or a timestamp.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lastModified.to",
            "in": "query",
            "description": "Search by last modified time to specific date.\n\n**Note:** Format must be *EEE, dd MMM yyyy HH:mm:ss Z*, *yyyy-MM-dd* or a timestamp.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "homeFolderAccessLevel",
            "in": "query",
            "description": "Search by home folder access level.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "PRIVATE",
                "BUSINESS_UNIT",
                "PUBLIC"
              ]
            }
          },
          {
            "name": "uid",
            "in": "query",
            "description": "Search by uid.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "gid",
            "in": "query",
            "description": "Search by gid.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "mappedUser",
            "in": "query",
            "description": "Search by mapped user.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "additionalAttributes.key",
            "in": "query",
            "description": "Search by userVars key.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "additionalAttributes.value",
            "in": "query",
            "description": "Search by userVars value.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "disabled",
            "in": "query",
            "description": "Search by disabled accounts.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "notes",
            "in": "query",
            "description": "Search by notes.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "unlicensed",
            "in": "query",
            "description": "Search by unlicensed property.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "authByEmail",
            "in": "query",
            "description": "Search by authByEmail property.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "loginRestrictionPolicy",
            "in": "query",
            "description": "Search by login restriction policy.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isUnlicensedUserAllowedToReply",
            "in": "query",
            "description": "Whether unlicensed user is allowed to reply.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "accountCreationDate",
            "in": "query",
            "description": "Search by account creation date.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "transfersWebServiceAllowed",
            "in": "query",
            "description": "Search by transfersWebServiceAllowed property.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pesitId",
            "in": "query",
            "description": "Search by PeSIT ID.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountEncryptMode",
            "in": "query",
            "description": "Search by account encrypt mode.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "UNSPECIFIED",
                "ENABLED"
              ]
            }
          },
          {
            "name": "subscriptionFolderDiscovery",
            "in": "query",
            "description": "Search by subscription folder discovery.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "ITERATIVE",
                "RECURSIVE"
              ]
            }
          },
          {
            "name": "fileArchivingPolicy",
            "in": "query",
            "description": "Search by account file archiving policy.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "DEFAULT",
                "ENABLED",
                "DISABLED"
              ]
            }
          },
          {
            "name": "transferType",
            "in": "query",
            "description": "Search by transfer type.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "N",
                "I",
                "E"
              ]
            }
          },
          {
            "name": "routingMode",
            "in": "query",
            "description": "Search by account PeSIT routing mode.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "accept",
                "reject",
                "ignore"
              ]
            }
          },
          {
            "name": "accountSubmitForApprove",
            "in": "query",
            "description": "Whether account is submitted for approve.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "rejectReason",
            "in": "query",
            "description": "Search by account's reason to be rejected.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountVerificationStatus",
            "in": "query",
            "description": "Search by account verification status.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "managedByCG",
            "in": "query",
            "description": "Search for accounts managed by Central Governance.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "enrolledWithExternalPass",
            "in": "query",
            "description": "Search by enrolledWithExternalPass property.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "templateClass",
            "in": "query",
            "description": "Search by template class.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "contact.email",
            "in": "query",
            "description": "Search by contact email.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "contact.phone",
            "in": "query",
            "description": "Search by contact phone.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user.name",
            "in": "query",
            "description": "Search by user's name.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user.authExternal",
            "in": "query",
            "description": "Search by authExternal property.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "user.locked",
            "in": "query",
            "description": "Whether user is locked.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "user.failedAuthAttempts",
            "in": "query",
            "description": "Search by failedAuthAttempts property.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "user.failedSshKeyAuthAttempts",
            "in": "query",
            "description": "Search by failedSshKeyAuthAttempts property.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "user.failedAuthMaximum",
            "in": "query",
            "description": "Search by failedAuthMaximum property.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "user.failedSshKeyAuthMaximum",
            "in": "query",
            "description": "Search by failedSshKeyAuthMaximum property.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "user.lastFailedAuth.from",
            "in": "query",
            "description": "Search by lastFailedAuth property from specific date.\n\n**Note:** Format must be *EEE, dd MMM yyyy HH:mm:ss Z*, *yyyy-MM-dd* or a timestamp.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user.lastFailedAuth.to",
            "in": "query",
            "description": "Search by lastFailedAuth property to specific date.\n\n**Note:** Format must be *EEE, dd MMM yyyy HH:mm:ss Z*, *yyyy-MM-dd* or a timestamp.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user.lastLogin.from",
            "in": "query",
            "description": "Search by last login for a user from specific date.\n\n**Note:** Format must be *EEE, dd MMM yyyy HH:mm:ss Z*, *yyyy-MM-dd* or a timestamp.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user.lastLogin.to",
            "in": "query",
            "description": "Search by last login for a user to specific date.\n\n**Note:** Format must be *EEE, dd MMM yyyy HH:mm:ss Z*, *yyyy-MM-dd* or a timestamp.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user.lastFailedSshKeyAuth.from",
            "in": "query",
            "description": "Search by lastFailedSshKeyAuth property from specific date.\n\n**Note:** Format must be *EEE, dd MMM yyyy HH:mm:ss Z*, *yyyy-MM-dd* or a timestamp.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user.lastFailedSshKeyAuth.to",
            "in": "query",
            "description": "Search by lastFailedSshKeyAuth property to specific date.\n\n**Note:** Format must be *EEE, dd MMM yyyy HH:mm:ss Z*, *yyyy-MM-dd* or a timestamp.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user.successfulAuthMaximum",
            "in": "query",
            "description": "Search by successfulAuthMaximum property.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "user.successfulLogins",
            "in": "query",
            "description": "Search by successfulLogins property.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "user.secretQuestion.secretQuestion",
            "in": "query",
            "description": "Search by user's secret question.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "int32"
            }
          },
          {
            "name": "user.secretQuestion.secretAnswerGuessFailures",
            "in": "query",
            "description": "Search by secretAnswerGuessFailures property.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "user.secretQuestion.forceSecretQuestionChange",
            "in": "query",
            "description": "Search by forceSecretQuestionChange property.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "user.passwordCredentials.forcePasswordChange",
            "in": "query",
            "description": "Search by forcePasswordChange property.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "user.passwordCredentials.lastPasswordChange.from",
            "in": "query",
            "description": "Search by lastPasswordChange.from property from specific date.\n\n**Note:** Format must be *EEE, dd MMM yyyy HH:mm:ss Z*, *yyyy-MM-dd* or a timestamp.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user.passwordCredentials.lastPasswordChange.to",
            "in": "query",
            "description": "Search by forcePasswordChange.to property to specific date.\n\n**Note:** Format must be *EEE, dd MMM yyyy HH:mm:ss Z*, *yyyy-MM-dd* or a timestamp.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user.passwordCredentials.passwordExpiryInterval",
            "in": "query",
            "description": "Search by passwordExpiryInterval property.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "adhocSettings.deliveryMethod",
            "in": "query",
            "description": "Search by deliveryMethod property.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "DISABLED",
                "DEFAULT",
                "ANONYMOUS",
                "ACCOUNT_WITHOUT_ENROLLMENT",
                "ACCOUNT_WITH_ENROLLMENT",
                "CUSTOM"
              ]
            }
          },
          {
            "name": "adhocSettings.implicitEnrollmentType",
            "in": "query",
            "description": "Search by implicitEnrollmentType property.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "ANONYMOUS_LINK",
                "EXISTING_ACCOUNT",
                "ENROLL_UNLICENSED",
                "ENROLL_LICENSED"
              ]
            }
          },
          {
            "name": "addressBookSettings.policy",
            "in": "query",
            "description": "Search by addressBook policy.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "default",
                "custom",
                "disabled"
              ]
            }
          },
          {
            "name": "addressBookSettings.nonAddressBookCollaborationAllowed",
            "in": "query",
            "description": "Search by nonAddressBookCollaborationAllowed property.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "accountMaintenanceSettings.criteria.daysAfterCreation",
            "in": "query",
            "description": "Search by daysAfterCreation property for accountMaintenanceSettings.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "accountMaintenanceSettings.criteria.daysOfInactivity",
            "in": "query",
            "description": "Search by daysOfInactivity property for accountMaintenanceSettings.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "accountMaintenanceSettings.action.action",
            "in": "query",
            "description": "Search by action property for accountMaintenanceSettings.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "DELETE",
                "DISABLE",
                "PURGE"
              ]
            }
          },
          {
            "name": "accountMaintenanceSettings.action.daysDeleteDisabled",
            "in": "query",
            "description": "Search by daysDeleteDisabled property for accountMaintenanceSettings.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "accountMaintenanceSettings.emailNotificationBeforeAction.emailTemplate",
            "in": "query",
            "description": "Search by emailTemplate property for accountMaintenanceSettings.emailNotificationBeforeAction.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountMaintenanceSettings.emailNotificationBeforeAction.notifyDays",
            "in": "query",
            "description": "Search by notifyDays property for accountMaintenanceSettings.emailNotificationBeforeAction.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountMaintenanceSettings.emailNotificationBeforeAction.notifyAccount",
            "in": "query",
            "description": "Search by notifyAccount property for accountMaintenanceSettings.emailNotificationBeforeAction.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "accountMaintenanceSettings.emailNotificationForUserPassword.emailTemplate",
            "in": "query",
            "description": "Search by emailTemplate property for accountMaintenanceSettings.emailNotificationForUserPassword.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountMaintenanceSettings.emailNotificationForUserPassword.notifyDays",
            "in": "query",
            "description": "Search by notifyDays property for accountMaintenanceSettings.emailNotificationForUserPassword.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountMaintenanceSettings.emailNotificationForUserPassword.notifyAccount",
            "in": "query",
            "description": "Search by notifyAccount property for accountMaintenanceSettings.emailNotificationForUserPassword.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "accountMaintenanceSettings.emailNotificationForUserCertificate.emailTemplate",
            "in": "query",
            "description": "Search by emailTemplate property for accountMaintenanceSettings.emailNotificationForUserCertificate.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountMaintenanceSettings.emailNotificationForUserCertificate.notifyDays",
            "in": "query",
            "description": "Search by notifyDays property for accountMaintenanceSettings.emailNotificationForUserCertificate.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountMaintenanceSettings.emailNotificationForUserCertificate.notifyAccount",
            "in": "query",
            "description": "Search by notifyAccount property for accountMaintenanceSettings.emailNotificationForUserCertificate.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "accountMaintenanceSettings.policy",
            "in": "query",
            "description": "Search by policy property for accountMaintenanceSettings.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "default",
                "custom",
                "disabled"
              ]
            }
          },
          {
            "name": "accountMaintenanceSettings.accountDisabledDate",
            "in": "query",
            "description": "Search by accountDisabledDate property for accountMaintenanceSettings.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "accountMaintenanceSettings.accountNotified",
            "in": "query",
            "description": "Search by accountNotified property for accountMaintenanceSettings.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "accountMaintenanceSettings.accountPasswordNotified",
            "in": "query",
            "description": "Search by accountPasswordNotified property for accountMaintenanceSettings.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "accountMaintenanceSettings.accountCertificateNotified",
            "in": "query",
            "description": "Search by accountCertificateNotified property for accountMaintenanceSettings.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "bandwidthLimits.policy",
            "in": "query",
            "description": "Search by policy property for bandwidthLimits.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "default",
                "custom",
                "disabled"
              ]
            }
          },
          {
            "name": "bandwidthLimits.inboundLimit",
            "in": "query",
            "description": "Search by inboundLimit property for bandwidthLimits.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "bandwidthLimits.outboundLimit",
            "in": "query",
            "description": "Search by outboundLimit property for bandwidthLimits.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fileMaintenanceSettings.policy",
            "in": "query",
            "description": "Search by policy property for fileMaintenanceSettings.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "default",
                "custom",
                "disabled"
              ]
            }
          },
          {
            "name": "fileMaintenanceSettings.deleteFilesDays",
            "in": "query",
            "description": "Search by deleteFilesDays property for fileMaintenanceSettings.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fileMaintenanceSettings.pattern",
            "in": "query",
            "description": "Search by pattern property for fileMaintenanceSettings.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fileMaintenanceSettings.expirationPeriod",
            "in": "query",
            "description": "Search by expirationPeriod property for fileMaintenanceSettings.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "fileMaintenanceSettings.removeFolders",
            "in": "query",
            "description": "Search by removeFolders property for fileMaintenanceSettings.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "fileMaintenanceSettings.warningNotifications",
            "in": "query",
            "description": "Search by warningNotifications property for fileMaintenanceSettings.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "fileMaintenanceSettings.warnNotifyAccount",
            "in": "query",
            "description": "Search by warnNotifyAccount property for fileMaintenanceSettings.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "fileMaintenanceSettings.warningNotificationsTemplate",
            "in": "query",
            "description": "Search by warningNotificationsTemplate property for fileMaintenanceSettings.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fileMaintenanceSettings.notifyDays",
            "in": "query",
            "description": "Search by notifyDays property for fileMaintenanceSettings.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fileMaintenanceSettings.sendSentinelAlert",
            "in": "query",
            "description": "Search by sendSentinelAlert property for fileMaintenanceSettings.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "fileMaintenanceSettings.deletionNotifications",
            "in": "query",
            "description": "Search by deletionNotifications property for fileMaintenanceSettings.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "fileMaintenanceSettings.deletionNotifyAccount",
            "in": "query",
            "description": "Search by deletionNotifyAccount property for fileMaintenanceSettings.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "fileMaintenanceSettings.deletionNotificationsTemplate",
            "in": "query",
            "description": "Search by deletionNotificationsTemplate property for fileMaintenanceSettings.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fileMaintenanceSettings.reportNotified",
            "in": "query",
            "description": "Search by reportNotified property for fileMaintenanceSettings.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fileMaintenanceSettings.warnNotified",
            "in": "query",
            "description": "Search by warnNotified property for fileMaintenanceSettings.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "tags": [
          "accounts"
        ],
        "summary": "Create an account.",
        "description": "`Permissions`: \"USER_ACCOUNT_FORM\", \"SERVICE_ACCOUNT_FORM\", \"TEMPLATES_FORM\". \n\nDepending on the account `type` property there are three types of accounts: user, service and template.\n\nAccounts support additional attributes which can be added via the ST RESTful API. The additional attributes are specified in `additionalAttributes` property using the following format: `{attribute_name}: {attribute_value}`. \n\nAccounts support repository encryption mode named `accountEncryptMode`. There are two possible options for the encryptMode: 'ENABLED' and 'UNSPECIFIED'. When ENABLED is set then repository encryption for the account is enabled. When UNSPECIFIED is set then repository encryption for the account is not enabled and can be specified with EncryptClass. \n\nAccounts support a custom property named 'transfersWebServiceAllowed' which is an attribute name to indicate whether access to the transfers resource from the end user RESTful API is allowed.\n\nAccounts support a custom property named 'transferType' which is an attribute name to indicate the transfer type of the account's transfer site. It can be unspecified (`N`), internal (`I`), partner(`E`). By default is unspecified.\n\nAccounts support PeSIT Store and Forward mode via property named 'routingMode'. There are three possible options for the routingMode: `accept` (the value for Routing Mode that accept transfers), `reject` (the value for Routing Mode that reject transfers) and `ignore` (the value for Routing Mode that ignores transfers). By default is 'reject'.\n\nAccounts support a custom property named 'subscriptionFolderDiscovery' that defines how the subscription folder is discovered. There are two possible options for the subscriptionFolderDiscovery - `ITERATIVE` and `RECURSIVE`. When 'ITERATIVE' is set, then subscription folder discovery is performed by iterating over all of the account's subscriptions while trying to match the target folder. Should be used when the number of subscriptions is small and the target folder depth is large. When 'RECURSIVE' is set, then subscription folder discovery is performed by recursively checking the target folder - the target folder is checked first, then moving up to parent folders. Should be used when the number of subscriptions is large and the target folder depth is small. The default value is: 'ITERATIVE'.\n\nAccounts support a custom property named 'fileArchivingPolicy' that can be set only if the global File Archiving is anabled. There are three possible options for the fileArchivingPolicy - `enabled`, `disabled` and `default`. When 'enabled' is set, file archiving will be enabled for this account. When 'disabled' is set, file archiving will be disabled for this account. When 'default' is set, then the following apply: if the account is assigned to business unit, it will inherit its policy, otherwise, the global archiving policy applies.\n\nAccounts support a custom property name 'bandwidthInboundLimit' which defines maximum kb/s applied for HTTP/FTP/SSH inbound transfers per account. The limit will be applied regardless of cluster/streaming deployment configurations or number of sessions open up by each account.\n\nAccounts support a custom property name 'bandwidthOutboundLimit' which defines maximum kb/s applied for HTTP/FTP/SSH outbound transfers per account. The limit will be applied regardless of cluster/streaming deployment configurations or number of sessions open up by each account.\n\nAccounts which are part of the Maker/Checker process flow support the following custom properties named 'accountVerificationStatus', 'accountSubmitForApprove' and 'rejectReason'.\n- The 'accountVerificationStatus' property indicates whether the account is verified, rejected or pending approval. It has three possible values - 'PENDING', 'APPROVED' and  'REJECTED'. Its value can be changed by Checker or Master administrator.\n- The 'accountSubmitForApprove' property indicates whether the account is submitted by Maker administrator to be verified by Checker administrator. It can be either 'true' or 'false'. Its value can be changed by Maker or Master administrator. Checker administrators can update the verification status of submitted for approval accounts.\n- The 'rejectReason' property can be used to store reasons for rejection and additional notes by Checker and Master administratos.\n\nIf an account's type is a template, additional templateClass(String) variable is required - the user class of the template account.\n\nWhen an account has user current password policies will be applied if the password has been specified. If passwordDigest is specified password policies will not be applied.",
        "operationId": "createAccount",
        "parameters": [
          {
            "name": "ownershipChangeMode",
            "in": "query",
            "description": "Controls how the subfolders of the home folder are affected upon UID/GID or homeFolder change.\n* `none` - The UID/GID of the home folder and its subfolders is not affected.\n* `nonRecursive` - Changes only the home folder.\n* `recursive` - Also changes the UID/GID of all subfolders and files.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "recursive",
                "nonRecursive",
                "none"
              ],
              "default": "none"
            }
          }
        ],
        "requestBody": {
          "description": "Account object that need to be added to the ST server.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/accounts_body"
              },
              "examples": {
                "UserAccount": {
                  "$ref": "#/components/examples/UserAccountExample"
                },
                "TemplateAccount": {
                  "$ref": "#/components/examples/TemplateAccountExample"
                },
                "ServiceAccount": {
                  "$ref": "#/components/examples/ServiceAccountExample"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created - the request has succeeded and a new resource has been created as a result of it."
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "409": {
            "description": "Conflict - duplicate entity."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/accounts/{name}": {
      "get": {
        "tags": [
          "accounts"
        ],
        "summary": "Get an account.",
        "description": "`Permissions`: \"USER_ACCOUNT_FORM\", \"SERVICE_ACCOUNT_FORM\".\n\n`Implementation note`: When trying to filter by fields exclusive to a certain account type, the type property must be specified.\n",
        "operationId": "getAccount",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "The account name to search for.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "The accounts' fields to return.",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Search by account type.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "user",
                "service",
                "template"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200"
                },
                "examples": {
                  "UserAccount": {
                    "$ref": "#/components/examples/UserAccountExample"
                  },
                  "TemplateAccount": {
                    "$ref": "#/components/examples/TemplateAccountExample"
                  },
                  "ServiceAccount": {
                    "$ref": "#/components/examples/ServiceAccountExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "tags": [
          "accounts"
        ],
        "summary": "Replace an existing account.",
        "description": "`Permissions`: \"USER_ACCOUNT_FORM\", \"SERVICE_ACCOUNT_FORM\", \"TEMPLATES_FORM\". \n\n When an account has user current password policies will be applied if the password has been specified. If passwordDigest is specified password policies will not be applied.",
        "operationId": "updateAccount",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "The name of the account that will be replaced with a new one.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ownershipChangeMode",
            "in": "query",
            "description": "Controls how the subfolders of the home folder are affected upon UID/GID or homeFolder change.\n* `none` - The UID/GID of the home folder and its subfolders is not affected.\n* `nonRecursive` - Changes only the home folder.\n* `recursive` - Also changes the UID/GID of all subfolders and files.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "recursive",
                "nonRecursive",
                "none"
              ],
              "default": "recursive"
            }
          }
        ],
        "requestBody": {
          "description": "An account object that have to replace an existing one with the same name.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/accounts_name_body"
              },
              "examples": {
                "UserAccount": {
                  "$ref": "#/components/examples/UserAccountExample"
                },
                "TemplateAccount": {
                  "$ref": "#/components/examples/TemplateAccountExample"
                },
                "ServiceAccount": {
                  "$ref": "#/components/examples/ServiceAccountExample"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content - successful operation."
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "409": {
            "description": "Conflict - duplicate entity."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "delete": {
        "tags": [
          "accounts"
        ],
        "summary": "Delete and/or purge an account.",
        "description": "`Permissions`: \"USER_ACCOUNT_FORM\", \"SERVICE_ACCOUNT_FORM\", \"TEMPLATES_FORM\". \n",
        "operationId": "deleteAccount",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "The name of the accout that will be deleted and/or will has it's home folder purged.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "purge",
            "in": "query",
            "description": "This parameter marks whether or not to purge the user's home folder.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content - successful operation."
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "head": {
        "tags": [
          "accounts"
        ],
        "summary": "Check if an account exists.",
        "description": "`Permissions`: \"USER_ACCOUNT_FORM\", \"SERVICE_ACCOUNT_FORM\", \"TEMPLATES_FORM\". \n",
        "operationId": "accountExists",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "The account name to search for.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - successful operation."
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "patch": {
        "tags": [
          "accounts"
        ],
        "summary": "Partially update an account properties.",
        "description": "`Permissions`: \"USER_ACCOUNT_FORM\", \"SERVICE_ACCOUNT_FORM\", \"TEMPLATES_FORM\". \n\n When an account has user current password policies will be applied if the password has been specified. If passwordDigest is specified password policies will not be applied.",
        "operationId": "partiallyUpdateAccount",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "The name of the account which properties need to be updated.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ownershipChangeMode",
            "in": "query",
            "description": "Controls how the subfolders of the home folder are affected upon UID/GID or homeFolder change.\n* `none` - The UID/GID of the home folder and its subfolders is not affected.\n* `nonRecursive` - Changes only the home folder.\n* `recursive` - Also changes the UID/GID of all subfolders and files.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "recursive",
                "nonRecursive",
                "none"
              ],
              "default": "recursive"
            }
          }
        ],
        "requestBody": {
          "description": "Account properties that need to be updated for the specified account.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content - successful operation."
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "409": {
            "description": "Conflict - duplicate entity."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/icapServers": {
      "get": {
        "tags": [
          "icapServers"
        ],
        "summary": "Get ICAP servers.",
        "operationId": "getIcapServers",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Defines maximum count of returned entries. Expects positive integer value. If this parameter is not specified, then SecureTransport sets a default one. This parameter is used in conjunction with offset query parameter to get entries at portions.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Defines the first entry number of an ordered result to get; last entry number to return is (offset + limit - 1). Expects positive integer value. If this parameter is not specified, then SecureTransport sets a default one. This parameter is used in conjunction with limit query parameter to get entries at portions.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "The ICAP's fields to return.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "serverEnabled",
            "in": "query",
            "description": "The ICAP server enabled to filter by. value.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "basicSettings.name",
            "in": "query",
            "description": "The ICAP server name to filter by.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "basicSettings.type",
            "in": "query",
            "description": "The ICAP server type to filter by.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "BOTH",
                "INCOMING",
                "OUTGOING"
              ]
            }
          },
          {
            "name": "basicSettings.url",
            "in": "query",
            "description": "The ICAP server url to filter by.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "basicSettings.verifyCertificate",
            "in": "query",
            "description": "Search ICAP servers by verifyCertificate property.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "basicSettings.clientCertificate",
            "in": "query",
            "description": "ID of local certificate to be used for authentication.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "basicSettings.connectionSecure",
            "in": "query",
            "description": "Search ICAP servers by connectionSecure property.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "basicSettings.fipsEnabled",
            "in": "query",
            "description": "Search ICAP servers by fipsEnabled property.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "basicSettings.maxSize",
            "in": "query",
            "description": "Search ICAP servers by maxSize property.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "basicSettings.previewSize",
            "in": "query",
            "description": "Search ICAP servers by previewSize property.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "basicSettings.denyOnConnectionError",
            "in": "query",
            "description": "Search ICAP servers by denyOnConnectionError property.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "basicSettings.notifyOnIcapError",
            "in": "query",
            "description": "Search ICAP servers by notifyOnIcapError property.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "basicSettings.mailAddressesOnIcapError",
            "in": "query",
            "description": "Search ICAP servers by mailAddressesOnIcapError property.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "basicSettings.notifyOnIcapDenied",
            "in": "query",
            "description": "Search ICAP servers by notifyOnIcapDenied property.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "basicSettings.mailAddressesOnIcapDenied",
            "in": "query",
            "description": "Search ICAP servers by mailAddressesOnIcapDenied property.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "scanFilteringSettings.policyExpression",
            "in": "query",
            "description": "Search ICAP servers by policyExpression property.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "scanFilteringSettings.onlyIfPartnerRecipient",
            "in": "query",
            "description": "Search ICAP servers by onlyIfPartnerRecipient property.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "scanFilteringSettings.withoutBU",
            "in": "query",
            "description": "Search ICAP servers by withoutBU property.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "scanFilteringSettings.ignoredFileType",
            "in": "query",
            "description": "Search ICAP servers by ignoredFileType property.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "headerSettings.headersMapping",
            "in": "query",
            "description": "Search ICAP servers by headersMapping property.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "advancedConnectionSettings.connectionTimeout",
            "in": "query",
            "description": "Search ICAP servers by connectionTimeout property.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "advancedConnectionSettings.readTimeout",
            "in": "query",
            "description": "Search ICAP servers by readTimeout property.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "advancedConnectionSettings.enabledCipher",
            "in": "query",
            "description": "Search ICAP servers by enabledCipher property.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "advancedConnectionSettings.enabledProtocol",
            "in": "query",
            "description": "Search ICAP servers by enabledProtocol property.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "advancedIcapSettings.enableWinNtFormat",
            "in": "query",
            "description": "Search ICAP servers by enableWinNtFormat property.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "advancedIcapSettings.stopTransfersModifyOrNotHandled",
            "in": "query",
            "description": "Search ICAP servers by stopTransfersModifyOrNotHandled property.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "advancedIcapSettings.treatModifyAsBlock",
            "in": "query",
            "description": "Search ICAP servers by treatModifyAsBlock property.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IcapServerResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "tags": [
          "icapServers"
        ],
        "summary": "Create an ICAP server.",
        "operationId": "createIcapServer",
        "requestBody": {
          "description": "ICAP server.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IcapServer"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created - the request has succeeded and a new resource has been created as a result of it."
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "409": {
            "description": "Conflict - duplicate entity."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/icapServers/{name}": {
      "get": {
        "tags": [
          "icapServers"
        ],
        "summary": "Get an ICAP server.",
        "operationId": "getIcapServer",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "The name of the ICAP server to be retrieved.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "The ICAP's fields to return.",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IcapServer"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "tags": [
          "icapServers"
        ],
        "summary": "Replace an existing ICAP server.",
        "operationId": "updateIcapServer",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "The name of the ICAP server to be updated.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "ICAP server to update.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IcapServer"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content - successful operation."
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "delete": {
        "tags": [
          "icapServers"
        ],
        "summary": "Delete an existing ICAP server.",
        "operationId": "deleteIcapServer",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "The name of the ICAP server to be deleted.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content - successful operation."
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "head": {
        "tags": [
          "icapServers"
        ],
        "summary": "Check if an ICAP server exists.",
        "operationId": "icapServerExists",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - successful operation."
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "patch": {
        "tags": [
          "icapServers"
        ],
        "summary": "Partially update an existing ICAP server.",
        "operationId": "partiallyUpdateIcapServer",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "The name of the ICAP server that needs to be updated.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "ICAP server that needs to be updated.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content - successful operation."
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/ldapDomains": {
      "get": {
        "tags": [
          "ldapDomains"
        ],
        "summary": "Get collection of LDAP domains on the ST server.",
        "operationId": "getLdapDomains",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Defines maximum count of returned entries. Expects positive integer value. If this parameter is not specified, then SecureTransport sets a default one. This parameter is used in conjunction with offset query parameter to get entries at portions.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Defines the first entry number of an ordered result to get; last entry number to return is (offset + limit - 1). Expects positive integer value. If this parameter is not specified, then SecureTransport sets a default one. This parameter is used in conjunction with limit query parameter to get entries at portions.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "The LdapDomain's fields to return.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "Specify the id of the ldap domain.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Specify the name of the ldap domain.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isDefault",
            "in": "query",
            "description": "Specify if ldap doamin is default domain.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "precedence",
            "in": "query",
            "description": "Specify precedence property of ldap domain.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "protocolVersion",
            "in": "query",
            "description": "Specify protocol version of ldap domain.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sslEnabled",
            "in": "query",
            "description": "Whether ssl is enabled.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "tlsEnabled",
            "in": "query",
            "description": "Whether tls is enabled.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "clientCertificate",
            "in": "query",
            "description": "ID of a local certificate to be used for authentication.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "referralsAllowed",
            "in": "query",
            "description": "Whether referrals are allowed.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "anonymousBindsAllowed",
            "in": "query",
            "description": "Whether anonymous binds are allowed.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "bindDn",
            "in": "query",
            "description": "Specify bindDn of ldap domain.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "commonCase",
            "in": "query",
            "description": "Specify commonCase of ldap domain.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "NONE",
                "UPPER",
                "LOWER"
              ]
            }
          },
          {
            "name": "certVerify",
            "in": "query",
            "description": "Whether certVerify is enabled.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "description",
            "in": "query",
            "description": "Specify the description of ldap domain.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "addressBookSettings.addressBookBaseDN",
            "in": "query",
            "description": "Specify baseDN of address book.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "addressBookSettings.addressBookQuery",
            "in": "query",
            "description": "Specify the query of address book.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "addressBookSettings.shouldUseOnlyAdditionalQuery",
            "in": "query",
            "description": "Whether to use additional query for address book.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "userSettings.defaultUid",
            "in": "query",
            "description": "Specify default uid for ldap user settings.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "userSettings.defaultGid",
            "in": "query",
            "description": "Specify default gid for ldap user settings.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "userSettings.defaultUserType",
            "in": "query",
            "description": "Specify default user type for ldap user settings.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "virtual",
                "real"
              ]
            }
          },
          {
            "name": "userSettings.defaultUserShell",
            "in": "query",
            "description": "Specify default user shell for ldap user settings.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userSettings.defaultAuthByEmail",
            "in": "query",
            "description": "Specify default auth by email for ldap user settings.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "userSettings.sysUser",
            "in": "query",
            "description": "Specify system user attribute for ldap user settings.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ldapSearches.baseDn",
            "in": "query",
            "description": "Specify base dn for ldap search.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ldapSearches.aliasQuery",
            "in": "query",
            "description": "Specify alias query for ldap search.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ldapSearches.useGenericSearchFilter",
            "in": "query",
            "description": "Whether to use generic search filter.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "ldapSearches.genericSearchAttribute",
            "in": "query",
            "description": "Specify generic search attribute for ldap search.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ldapSearches.genericSearchFilter",
            "in": "query",
            "description": "Specify generic search filter for ldap search.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ldapSearches.searchAttribute",
            "in": "query",
            "description": "Specify search attribute for ldap search.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "UID",
                "CN",
                "SAMACCOUNTNAME"
              ]
            }
          },
          {
            "name": "ldapServers.id",
            "in": "query",
            "description": "Specify the id of ldap server.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ldapServers.host",
            "in": "query",
            "description": "Specify the host of ldap server.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ldapServers.port",
            "in": "query",
            "description": "Specify the port of ldap server.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "ldapServers.order",
            "in": "query",
            "description": "Specify the order of ldap server.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "attributes.attribute",
            "in": "query",
            "description": "Specify the attribute name of ldap attribute.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "attributes.description",
            "in": "query",
            "description": "Specify the description of ldap attribute.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "attributes.enabled",
            "in": "query",
            "description": "Whether ldap attribute is enabled.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "attributes.mappedAttribute",
            "in": "query",
            "description": "Specify mapped attribute.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "addressBookAttributes.attribute",
            "in": "query",
            "description": "Specify attribute name of ldap's address book.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "addressBookAttributes.description",
            "in": "query",
            "description": "Specify attribute description of ldap's address book.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "addressBookAttributes.enabled",
            "in": "query",
            "description": "Whether attribute is enabled.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "addressBookAttributes.mappedAttribute",
            "in": "query",
            "description": "Specify mappedAttribute of ldap's address book.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dnFilters.id",
            "in": "query",
            "description": "Specify the id of DN filter.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dnFilters.enabled",
            "in": "query",
            "description": "Whether DN filter is enabled.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "dnFilters.filter",
            "in": "query",
            "description": "Specify filter name.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dnFilters.userClass",
            "in": "query",
            "description": "Specify userClass property of DN filter.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LdapDomainResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "tags": [
          "ldapDomains"
        ],
        "summary": "Create a LDAP domain on the ST server.",
        "operationId": "createLdapDomain",
        "requestBody": {
          "description": "Ldap domain that needs to be created.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LdapDomain"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created - the request has succeeded and a new resource has been created as a result of it."
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "409": {
            "description": "Conflict - duplicate entity."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/ldapDomains/{name}": {
      "get": {
        "tags": [
          "ldapDomains"
        ],
        "summary": "Get a LDAP domain.",
        "operationId": "getLdapDomain",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "The name of the ldap domain to be retrieved.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "The LdapDomain's fields to return.",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LdapDomain"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "tags": [
          "ldapDomains"
        ],
        "summary": "Replace an existing LDAP domain.",
        "operationId": "updateLdapDomain",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "The name of the LDAP domain to be updated.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "LDAP doamin to update.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LdapDomain"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content - successful operation."
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "409": {
            "description": "Conflict - duplicate entity."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "delete": {
        "tags": [
          "ldapDomains"
        ],
        "summary": "Delete an existing LDAP domain.",
        "operationId": "deleteLdapDomain",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "The name of the LDAP domain to be deleted.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content - successful operation."
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "head": {
        "tags": [
          "ldapDomains"
        ],
        "summary": "Check if a LDAP domain exists.",
        "operationId": "ldapExists",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "Name of the ldap domain.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - successful operation."
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "patch": {
        "tags": [
          "ldapDomains"
        ],
        "summary": "Partially update an existing LDAP domain.",
        "operationId": "partiallyUpdateLdapDomain",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "The name of the LDAP domain that needs to be updated.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "LDAP domain that needs to be updated.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content - successful operation."
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "409": {
            "description": "Conflict - duplicate entity."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/ldapDomains/{name}/operations": {
      "post": {
        "tags": [
          "ldapDomains"
        ],
        "summary": "Perform operation for specific LDAP domain.",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "The name of the ldap domain.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "operation",
            "in": "query",
            "description": "Operation type.",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "testConnection"
              ]
            }
          }
        ],
        "requestBody": {
          "description": "The id of ldap server.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/name_operations_body"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK - successful operation."
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/applications": {
      "get": {
        "tags": [
          "applications"
        ],
        "summary": "Get collection of applications on the ST server.",
        "description": "`Permissions`: \"APPLICATION_FORM\". \n\n `Implementation note:` Searching for application by properties you must specify additional property **type**. \n\n Otherwise search is available only for common properties of application (*id*, *name*, *notes*).\n\n  When trying to filter by fields exclusive to a certain application type, the type property must be specified.\n\n  Searching properties or filtering by fields exclusive to a certain schedule type, the schedules.type parameter must be specified.",
        "operationId": "getApplications",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "The number of entries to list (the number must be a positive number). If limit is set to 0 then the default limit value of 100 entries applies. The maximum allowed number of entries is 200.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The offset from the first result. By default is 0.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Set of comma separated strings of applications properties to return.\n\n**Note:** The type field will always be present.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "The application name to filter by.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "The application type to filter by.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "AccountFilePurge",
                "AccountTTL",
                "AdvancedRouting",
                "ArchiveMaint",
                "AuditLogMaint",
                "Basic",
                "HumanSystem",
                "LogEntryMaint",
                "LoginThresholdMaintenance",
                "MBFT",
                "PackageRetentionMaint",
                "SentinelLinkDataMaint",
                "SharedFolder",
                "SiteMailbox",
                "StandardRouter",
                "SynchronyTransfer",
                "TransferLogMaint",
                "UnlicensedAccountMaint"
              ]
            }
          },
          {
            "name": "schedules.type",
            "in": "query",
            "description": "The schedules type to filter by.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "ONCE",
                "HOURLY",
                "DAILY",
                "WEEKLY",
                "MONTHLY",
                "YEARLY",
                "EXPRESSION"
              ]
            }
          },
          {
            "name": "businessUnit",
            "in": "query",
            "description": "The business unit to filter by.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "notes",
            "in": "query",
            "description": "Search by notes.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "managedByCG",
            "in": "query",
            "description": "Search for applications managed by Central Governance.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "additionalAttributes.key",
            "in": "query",
            "description": "Search by userVars key.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "additionalAttributes.value",
            "in": "query",
            "description": "Search by userVars value.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "deleteFilesDays",
            "in": "query",
            "description": "Search by deleteFilesDays. Applicable only for AccountFilePurge application.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pattern",
            "in": "query",
            "description": "Search by pattern. Applicable only for AccountFilePurge application.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expirationPeriod",
            "in": "query",
            "description": "Search by expirationPeriod. Applicable only for AccountFilePurge application.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "removeFolders",
            "in": "query",
            "description": "Search by removeFolders. Applicable only for AccountFilePurge application.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "warningNotifications",
            "in": "query",
            "description": "Search by warningNotifications. Applicable only for AccountFilePurge application.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "notifyDays",
            "in": "query",
            "description": "Search by notifyDays. Applicable only for AccountFilePurge application.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sendSentinelAlert",
            "in": "query",
            "description": "Search by sendSentinelAlert. Applicable only for AccountFilePurge application.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "warnNotifyAccount",
            "in": "query",
            "description": "Search by warnNotifyAccount. Applicable only for AccountFilePurge application.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "warningNotificationsTemplate",
            "in": "query",
            "description": "Search by warningNotificationsTemplate. Applicable only for AccountFilePurge application.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "FileMaintenanceNotification.xhtml",
                "AccountMaintenanceNotification.xhtml",
                "LoginThresholdReport.xhtml",
                "AdhocDefault.xhtml",
                "LoginThresholdNotification.xhtml",
                "RoutingFailedNotification.xhtml",
                "RoutingSucceededNotification.xhtml",
                "RoutingTriggeredNotification.xhtml"
              ]
            }
          },
          {
            "name": "warnNotifyEmails",
            "in": "query",
            "description": "Search by warnNotifyEmails. Applicable only for AccountFilePurge application.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "deletionNotifications",
            "in": "query",
            "description": "Search by deletionNotifications. Applicable only for AccountFilePurge application.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "deletionNotificationsTemplate",
            "in": "query",
            "description": "Search by deletionNotificationsTemplate. Applicable only for AccountFilePurge application.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "FileMaintenanceNotification.xhtml",
                "AccountMaintenanceNotification.xhtml",
                "LoginThresholdReport.xhtml",
                "AdhocDefault.xhtml",
                "LoginThresholdNotification.xhtml",
                "RoutingFailedNotification.xhtml",
                "RoutingSucceededNotification.xhtml",
                "RoutingTriggeredNotification.xhtml"
              ]
            }
          },
          {
            "name": "deletionNotifyAccount",
            "in": "query",
            "description": "Search by deletionNotifyAccount. Applicable only for AccountFilePurge application.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "deletionNotifyEmails",
            "in": "query",
            "description": "Search by deletionNotifyEmails. Applicable only for AccountFilePurge application.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountCreationDaysCriteria",
            "in": "query",
            "description": "Search by accountCreationDaysCriteria. Applicable only for AccountMaintenance (AccountTTL) application.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "name": "accountInactivityDaysCriteria",
            "in": "query",
            "description": "Search by accountInactivityDaysCriteria. Applicable only for AccountMaintenance (AccountTTL) application.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "name": "accountAction",
            "in": "query",
            "description": "Search by accountAction. Applicable only for AccountMaintenance (AccountTTL) application.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "DELETE",
                "DISABLE",
                "PURGE"
              ]
            }
          },
          {
            "name": "deleteDisabledAccountAfterXDaysCriteria",
            "in": "query",
            "description": "Search by deleteDisabledAccountAfterXDaysCriteria. Applicable only for AccountMaintenance (AccountTTL) application.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "name": "notificationDays",
            "in": "query",
            "description": "Search by notificationDays. Applicable only for AccountMaintenance (AccountTTL) application.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "reportNotificationEmailTemplate",
            "in": "query",
            "description": "Search by reportNotificationEmailTemplate. Applicable only for AccountMaintenance (AccountTTL) application.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "AccountMaintenanceNotification.xhtml",
                "FileMaintenanceNotification.xhtml",
                "LoginThresholdReport.xhtml",
                "AdhocDefault.xhtml",
                "LoginThresholdNotification.xhtml",
                "RoutingFailedNotification.xhtml",
                "RoutingSucceededNotification.xhtml",
                "RoutingTriggeredNotification.xhtml"
              ]
            }
          },
          {
            "name": "enableAccountNotifications",
            "in": "query",
            "description": "Search by enableAccountNotifications. Applicable only for AccountMaintenance (AccountTTL) application.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "actionNotificationEmails",
            "in": "query",
            "description": "Search by actionNotificationEmails. Applicable only for AccountMaintenance (AccountTTL) application.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "passwordNotificationDays",
            "in": "query",
            "description": "Search by passwordNotificationDays. Applicable only for AccountMaintenance (AccountTTL) application.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "passwordNotificationEmailTemplate",
            "in": "query",
            "description": "Search by passwordNotificationEmailTemplate. Applicable only for AccountMaintenance (AccountTTL) application.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "AccountMaintenanceNotification.xhtml",
                "FileMaintenanceNotification.xhtml",
                "LoginThresholdReport.xhtml",
                "AdhocDefault.xhtml",
                "LoginThresholdNotification.xhtml",
                "RoutingFailedNotification.xhtml",
                "RoutingSucceededNotification.xhtml",
                "RoutingTriggeredNotification.xhtml"
              ]
            }
          },
          {
            "name": "enablePasswordExpirationNotifications",
            "in": "query",
            "description": "Search by enablePasswordExpirationNotifications. Applicable only for AccountMaintenance (AccountTTL) application.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "passwordExpirationNotificationEmails",
            "in": "query",
            "description": "Search by passwordExpirationNotificationEmails. Applicable only for AccountMaintenance (AccountTTL) application.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "certificateNotificationDays",
            "in": "query",
            "description": "Search by certificateNotificationDays. Applicable only for AccountMaintenance (AccountTTL) application.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "certificateNotificationEmailTemplate",
            "in": "query",
            "description": "Search by certificateNotificationEmailTemplate. Applicable only for AccountMaintenance (AccountTTL) application.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "AccountMaintenanceNotification.xhtml",
                "FileMaintenanceNotification.xhtml",
                "LoginThresholdReport.xhtml",
                "AdhocDefault.xhtml",
                "LoginThresholdNotification.xhtml",
                "RoutingFailedNotification.xhtml",
                "RoutingSucceededNotification.xhtml",
                "RoutingTriggeredNotification.xhtml"
              ]
            }
          },
          {
            "name": "enableCertificateExpiratioNotifications",
            "in": "query",
            "description": "Search by enableCertificateExpirationNotifications. Applicable only for AccountMaintenance (AccountTTL) application.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "notificationCertificateEmails",
            "in": "query",
            "description": "Search by notificationCertificateEmails. Applicable only for AccountMaintenance (AccountTTL) application.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "firstMaintenanceRun",
            "in": "query",
            "description": "Search by firstMaintenanceRun. Applicable only for AccountMaintenance (AccountTTL) application.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "dayMode",
            "in": "query",
            "description": "Search by dayMode (0 for months or 1 for days). Applicable only for AuditLogMaint and LogEntryMaint applications.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "timeKeepingDataInDb",
            "in": "query",
            "description": "Search by timeKeepingDataInDb. Applicable only for AuditLogMaint and LogEntryMaint applications.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "exportEnabled",
            "in": "query",
            "description": "Search by exportEnabled. Applicable only for AuditLogMaint, LogEntryMaint and TransferLogMaint applications.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "exportDir",
            "in": "query",
            "description": "Search by exportDir. Applicable only for AuditLogMaint, LogEntryMaint and TransferLogMaint applications.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "monthsKeepingDataInDb",
            "in": "query",
            "description": "Search by monthsKeepingDataInDb. Applicable only for AuditLogMaint application.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "daysKeepingDataInDb",
            "in": "query",
            "description": "Search by daysKeepingDataInDb. Applicable only for TransferLogMaint application.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "daysKeepingInProgressInDb",
            "in": "query",
            "description": "Search by daysKeepingInProgressInDb. Applicable only for TransferLogMaint application.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "daysKeepingDataInFiles",
            "in": "query",
            "description": "Search by daysKeepingDataInFiles. Applicable only for LogEntryMaint and TransferLogMaint applications.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "recordsPerFile",
            "in": "query",
            "description": "Search by recordsPerFile. Applicable only for LogEntryMaint and TransferLogMaint applications.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "parallelismDegree",
            "in": "query",
            "description": "Search by parallelismDegree. Applicable only for LogEntryMaint and TransgerLogMaint applications.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "isUnlock",
            "in": "query",
            "description": "Search by isUnlock. Applicable only for LoginThresholdMaintenance application.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "isReport",
            "in": "query",
            "description": "Search by isReport. Applicable only for LoginThresholdMaintenance application.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "emails",
            "in": "query",
            "description": "Search by emails. Applicable only for LoginThresholdMaintenance application.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "reportEmailTemplate",
            "in": "query",
            "description": "Search by reportEmailTemplate. Applicable only for LoginThresholdMaintenance application.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "LoginThresholdReport.xhtml",
                "AdhocDefault.xhtml",
                "LoginThresholdNotification.xhtml",
                "RoutingFailedNotification.xhtml",
                "RoutingSucceededNotification.xhtml",
                "RoutingTriggeredNotification.xhtml",
                "AccountMaintenanceNotification.xhtml",
                "FileMaintenanceNotification.xhtml"
              ]
            }
          },
          {
            "name": "maxRunningMinutes",
            "in": "query",
            "description": "Search by maxRunningMinutes. Applicable only for PackageRetentionMaint application.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "outboxFolder",
            "in": "query",
            "description": "Search by outboxFolder. Applicable only for SiteMailbox and StandardRouter applications.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "inboxFolder",
            "in": "query",
            "description": "Search by inboxFolder. Applicable only for SiteMailbox and StandardRouter applications.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dropFolder",
            "in": "query",
            "description": "Search by dropFolder. Applicable only for SiteMailbox and StandardRouter applications.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "outboxEnabled",
            "in": "query",
            "description": "Search by outboxEnabled. Applicable only for StandardRouter application.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "inboxEnabled",
            "in": "query",
            "description": "Search by inboxEnabled. Applicable only for StandardRouter application.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "secureConnectionRequired",
            "in": "query",
            "description": "Search by secureConnectionRequired. Applicable only for StandardRouter application.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "renameFilesEnabled",
            "in": "query",
            "description": "Search by renameFilesEnabled. Applicable only for StandardRouter application.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "outboxFileFormat",
            "in": "query",
            "description": "Search by outboxFileFormat. Applicable only for StandardRouter application.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "inboxIdPattern",
            "in": "query",
            "description": "Search by inboxIdPattern. Applicable only for StandardRouter application.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "inactivePeriod",
            "in": "query",
            "description": "Search by inactivePeriod. Applicable only for UnlicensedAccountMaint application.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sharedFolder",
            "in": "query",
            "description": "Search by sharedFolder. Applicable only for SharedFolder application.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "tags": [
          "applications"
        ],
        "summary": "Create an application on the ST server.\n",
        "description": "Depending on the application `type` property there are 18 types of accounts: 'HumanSystem', 'StandardRouter', 'SiteMailbox', 'SharedFolder', 'TransferLogMaint', 'Basic', 'AdvancedRouting', 'LogEntryMaint', 'ArchiveMaint', 'SentinelLinkDataMaint', 'SynchronyTransfer', 'MBFT', 'PackageRetentionMaint', 'UnlicensedAccountMaint', 'AuditLogMaint', 'LoginThresholdMaintenance', 'AccountTTL' and 'AccountFilePurge'.\n\n`Permissions`: \"APPLICATION_FORM\".\n\nNote: application types that does not support subscribing to are: 'TransferLogMaint', 'LogEntryMaint', 'ArchiveMaint', 'SentinelLinkDataMaint', 'UnlicensedAccountMaint', 'PackageRetentionMaint', 'AccountTTL', 'AccountFilePurge'\n",
        "operationId": "createApplication",
        "requestBody": {
          "description": "Application that needs to be created.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/applications_body"
              },
              "examples": {
                "FileMaintenanceApplication": {
                  "$ref": "#/components/examples/FileMaintenanceApplication"
                },
                "AccountMaintenanceApplication": {
                  "$ref": "#/components/examples/AccountMaintenanceApplication"
                },
                "AdvancedRoutingApplication": {
                  "$ref": "#/components/examples/AdvancedRoutingApplication"
                },
                "ArchiveMaintApplication": {
                  "$ref": "#/components/examples/ArchiveMaintApplication"
                },
                "AuditLogMaintApplication": {
                  "$ref": "#/components/examples/AuditLogMaintApplication"
                },
                "BasicApplication": {
                  "$ref": "#/components/examples/BasicApplication"
                },
                "HumanSystemApplication": {
                  "$ref": "#/components/examples/HumanSystemApplication"
                },
                "LogEntryMaintApplication": {
                  "$ref": "#/components/examples/LogEntryMaintApplication"
                },
                "LoginTresholdMaintenanceApplication": {
                  "$ref": "#/components/examples/LoginTresholdMaintenanceApplication"
                },
                "MBFTApplication": {
                  "$ref": "#/components/examples/MBFTApplication"
                },
                "PackageRetentionMaintApplication": {
                  "$ref": "#/components/examples/PackageRetentionMaintApplication"
                },
                "SentinelLinkDataMaintApplication": {
                  "$ref": "#/components/examples/SentinelLinkDataMaintApplication"
                },
                "SharedFolderApplication": {
                  "$ref": "#/components/examples/SharedFolderApplication"
                },
                "SiteMailboxApplication": {
                  "$ref": "#/components/examples/SiteMailboxApplication"
                },
                "StandardRouterApplication": {
                  "$ref": "#/components/examples/StandardRouterApplication"
                },
                "SynchronyTransferApplication": {
                  "$ref": "#/components/examples/SynchronyTransferApplication"
                },
                "TransferLogMaintApplication": {
                  "$ref": "#/components/examples/TransferLogMaintApplication"
                },
                "UnlicensedAccountMaint": {
                  "$ref": "#/components/examples/UnlicensedAccountMaint"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created - the request has succeeded and a new resource has been created as a result of it."
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/applications/{name}": {
      "get": {
        "tags": [
          "applications"
        ],
        "summary": "Get an application.",
        "description": "`Permissions`: \"APPLICATION_FORM\"\n\n`Implementation note`: When trying to filter by fields exclusive to a certain application type, the type property must be specified.\n",
        "operationId": "getApplication",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "The name of the application.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Application's fields to return.\n**Note:** The type field will always be present.\n",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "The application type to filter by.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "AccountFilePurge",
                "AccountTTL",
                "AdvancedRouting",
                "ArchiveMaint",
                "AuditLogMaint",
                "Basic",
                "HumanSystem",
                "LogEntryMaint",
                "LoginThresholdMaintenance",
                "MBFT",
                "PackageRetentionMaint",
                "SentinelLinkDataMaint",
                "SharedFolder",
                "SiteMailbox",
                "StandardRouter",
                "SynchronyTransfer",
                "TransferLogMaint",
                "UnlicensedAccountMaint"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/applications_body"
                },
                "examples": {
                  "FileMaintenaceApplication": {
                    "$ref": "#/components/examples/FileMaintenanceApplication"
                  },
                  "AccountMaintenanceApplication": {
                    "$ref": "#/components/examples/AccountMaintenanceApplication"
                  },
                  "AdvancedRoutingApplication": {
                    "$ref": "#/components/examples/AdvancedRoutingApplication"
                  },
                  "ArchiveMaintApplication": {
                    "$ref": "#/components/examples/ArchiveMaintApplication"
                  },
                  "AuditLogMaintApplication": {
                    "$ref": "#/components/examples/AuditLogMaintApplication"
                  },
                  "BasicApplication": {
                    "$ref": "#/components/examples/BasicApplication"
                  },
                  "HumanSystemApplication": {
                    "$ref": "#/components/examples/HumanSystemApplication"
                  },
                  "LogEntryMaintApplication": {
                    "$ref": "#/components/examples/LogEntryMaintApplication"
                  },
                  "LoginTresholdMaintenanceApplication": {
                    "$ref": "#/components/examples/LoginTresholdMaintenanceApplication"
                  },
                  "MBFTApplication": {
                    "$ref": "#/components/examples/MBFTApplication"
                  },
                  "PackageRetentionMaintApplication": {
                    "$ref": "#/components/examples/PackageRetentionMaintApplication"
                  },
                  "SentinelLinkDataMaintApplication": {
                    "$ref": "#/components/examples/SentinelLinkDataMaintApplication"
                  },
                  "SharedFolderApplication": {
                    "$ref": "#/components/examples/SharedFolderApplication"
                  },
                  "SiteMailboxApplication": {
                    "$ref": "#/components/examples/SiteMailboxApplication"
                  },
                  "StandardRouterApplication": {
                    "$ref": "#/components/examples/StandardRouterApplication"
                  },
                  "SynchronyTransferApplication": {
                    "$ref": "#/components/examples/SynchronyTransferApplication"
                  },
                  "TransferLogMaintApplication": {
                    "$ref": "#/components/examples/TransferLogMaintApplication"
                  },
                  "UnlicensedAccountMaintApplication": {
                    "$ref": "#/components/examples/UnlicensedAccountMaint"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "tags": [
          "applications"
        ],
        "summary": "Replace an existing application.",
        "description": "`Permissions`: \"APPLICATION_FORM\".\n",
        "operationId": "updateApplication",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "The name of the application.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "An application that is replaced.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/applications_name_body"
              },
              "examples": {
                "FileMaintenaceApplication": {
                  "$ref": "#/components/examples/FileMaintenanceApplication"
                },
                "AccountMaintenanceApplication": {
                  "$ref": "#/components/examples/AccountMaintenanceApplication"
                },
                "AdvancedRoutingApplication": {
                  "$ref": "#/components/examples/AdvancedRoutingApplication"
                },
                "ArchiveMaintApplication": {
                  "$ref": "#/components/examples/ArchiveMaintApplication"
                },
                "AuditLogMaintApplication": {
                  "$ref": "#/components/examples/AuditLogMaintApplication"
                },
                "BasicApplication": {
                  "$ref": "#/components/examples/BasicApplication"
                },
                "HumanSystemApplication": {
                  "$ref": "#/components/examples/HumanSystemApplication"
                },
                "LogEntryMaintApplication": {
                  "$ref": "#/components/examples/LogEntryMaintApplication"
                },
                "LoginTresholdMaintenanceApplication": {
                  "$ref": "#/components/examples/LoginTresholdMaintenanceApplication"
                },
                "MBFTApplication": {
                  "$ref": "#/components/examples/MBFTApplication"
                },
                "PackageRetentionMaintApplication": {
                  "$ref": "#/components/examples/PackageRetentionMaintApplication"
                },
                "SentinelLinkDataMaintApplication": {
                  "$ref": "#/components/examples/SentinelLinkDataMaintApplication"
                },
                "SharedFolderApplication": {
                  "$ref": "#/components/examples/SharedFolderApplication"
                },
                "SiteMailboxApplication": {
                  "$ref": "#/components/examples/SiteMailboxApplication"
                },
                "StandardRouterApplication": {
                  "$ref": "#/components/examples/StandardRouterApplication"
                },
                "SynchronyTransferApplication": {
                  "$ref": "#/components/examples/SynchronyTransferApplication"
                },
                "TransferLogMaintApplication": {
                  "$ref": "#/components/examples/TransferLogMaintApplication"
                },
                "UnlicensedAccountMaintApplication": {
                  "$ref": "#/components/examples/UnlicensedAccountMaint"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content - successful operation."
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "delete": {
        "tags": [
          "applications"
        ],
        "summary": "Delete an application.",
        "description": "`Permissions`: \"APPLICATION_FORM\"\n",
        "operationId": "deleteApplication",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "The name of the application.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content - successful operation."
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "head": {
        "tags": [
          "applications"
        ],
        "summary": "Check if an application exists.",
        "description": "`Permissions`: \"APPLICATION_FORM\".\n",
        "operationId": "applicationExists",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "Name of the application.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - successful operation."
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "patch": {
        "tags": [
          "applications"
        ],
        "summary": "Partially update an application.",
        "description": "`Permissions`: \"APPLICATION_FORM\".\n",
        "operationId": "patchApplication",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "The name of the application that needs to be updated.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Properties that need to be updated for the specified application.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content - successful operation."
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/businessUnits": {
      "get": {
        "tags": [
          "businessUnits"
        ],
        "summary": "Get the collection of business units on the ST server.",
        "description": "`Permissions`: \"BUSINESS_UNIT_FORM\".\n",
        "operationId": "getBusinessUnits",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "The limit of the listed rows. The limit parameter can has only nonnegative integer value. If the limit parameter is set to 0 or it is null then its value will be the value of the global server configuration parameter named 'Webservices.EntriesPerPage' (which by default has value 100).\n\n`Permissions`: \"BUSINESS_UNIT_FORM\".\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The start row to list. The offset parameter can has only nonnegative integer value. If this parameter is not set, then it is considered 0.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "The business unit's fields to return.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Search by business unit name.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "minLength": 1,
              "type": "string"
            }
          },
          {
            "name": "baseFolder",
            "in": "query",
            "description": "Search by business unit base folder.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "minLength": 1,
              "type": "string"
            }
          },
          {
            "name": "parent",
            "in": "query",
            "description": "Search by business unit parent.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "baseFolderModifyingAllowed",
            "in": "query",
            "description": "Whether business unit base folder is allowed for modifying.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "homeFolderModifyingAllowed",
            "in": "query",
            "description": "Flag indicating if the belonging accounts' base folders are modifiable.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "dmz",
            "in": "query",
            "description": "Search by dmz zone name.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "managedByCG",
            "in": "query",
            "description": "Search for business units managed by Central Governance.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "enabledIcapServers",
            "in": "query",
            "description": "Search by enabled icap servers for business unit.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "additionalAttributes.key",
            "in": "query",
            "description": "Search by userVars key.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "additionalAttributes.value",
            "in": "query",
            "description": "Search by userVars value.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sharedFoldersCollaborationAllowed",
            "in": "query",
            "description": "Search by sharedFoldersCollaborationAllowed property.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "bandwidthLimits.policy",
            "in": "query",
            "description": "Search by policy property for bandwidthLimits.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "default",
                "custom",
                "disabled"
              ]
            }
          },
          {
            "name": "bandwidthLimits.inboundLimit",
            "in": "query",
            "description": "Search by inboundLimit property for bandwidthLimits.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "bandwidthLimits.outboundLimit",
            "in": "query",
            "description": "Search by outboundLimit property for bandwidthLimits.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "bandwidthLimits.modifyLimitsAllowed",
            "in": "query",
            "description": "Search by modifyLimitsAllowed property for bandwidthLimits.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "accountMaintenanceSettings.criteria.daysAfterCreation",
            "in": "query",
            "description": "Search by daysAfterCreation property for accountMaintenanceSettings.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "accountMaintenanceSettings.criteria.daysOfInactivity",
            "in": "query",
            "description": "Search by daysOfInactivity property for accountMaintenanceSettings.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "accountMaintenanceSettings.criteria.specificDate",
            "in": "query",
            "description": "Search by specificDate property for accountMaintenanceSettings.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "pattern": "(0[1-9]|1[012])[- /.](0[1-9]|[12][0-9]|3[01])[- /.](19|20)\\d\\d",
              "type": "string"
            }
          },
          {
            "name": "accountMaintenanceSettings.action.action",
            "in": "query",
            "description": "Search by action property for accountMaintenanceSettings.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "DELETE",
                "DISABLE",
                "PURGE"
              ]
            }
          },
          {
            "name": "accountMaintenanceSettings.action.daysDeleteDisabled",
            "in": "query",
            "description": "Search by daysDeleteDisabled property for accountMaintenanceSettings.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "accountMaintenanceSettings.emailNotificationBeforeAction.emailTemplate",
            "in": "query",
            "description": "Search by emailTemplate property for accountMaintenanceSettings.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountMaintenanceSettings.emailNotificationBeforeAction.notifyAccount",
            "in": "query",
            "description": "Search by notifyAccount property for accountMaintenanceSettings.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "accountMaintenanceSettings.emailNotificationBeforeAction.notifyEmails",
            "in": "query",
            "description": "Search by notifyEmails property for accountMaintenanceSettings.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountMaintenanceSettings.emailNotificationBeforeAction.notifyDays",
            "in": "query",
            "description": "Search by notifyDays property for accountMaintenanceSettings.emailNotificationBeforeAction.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountMaintenanceSettings.emailNotificationForUserPassword.notifyDays",
            "in": "query",
            "description": "Search by notifyDays property for accountMaintenanceSettings.emailNotificationForUserPassword.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountMaintenanceSettings.emailNotificationForUserPassword.emailTemplate",
            "in": "query",
            "description": "Search by emailTemplate property for accountMaintenanceSettings.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountMaintenanceSettings.emailNotificationForUserPassword.notifyAccount",
            "in": "query",
            "description": "Search by notifyAccount property for accountMaintenanceSettings.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "accountMaintenanceSettings.emailNotificationForUserPassword.notifyEmails",
            "in": "query",
            "description": "Search by notifyEmails property for accountMaintenanceSettings.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountMaintenanceSettings.emailNotificationForUserCertificate.notifyDays",
            "in": "query",
            "description": "Search by notifyDays property for accountMaintenanceSettings.emailNotificationForUserCertificate.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountMaintenanceSettings.emailNotificationForUserCertificate.emailTemplate",
            "in": "query",
            "description": "Search by emailTemplate property for accountMaintenanceSettings.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountMaintenanceSettings.emailNotificationForUserCertificate.notifyAccount",
            "in": "query",
            "description": "Search by emailTemplate property for accountMaintenanceSettings.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "accountMaintenanceSettings.emailNotificationForUserCertificate.notifyEmails",
            "in": "query",
            "description": "Search by notifyEmails property for accountMaintenanceSettings.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountMaintenanceSettings.policy",
            "in": "query",
            "description": "Search by policy property for accountMaintenanceSettings.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "default",
                "custom",
                "disabled"
              ]
            }
          },
          {
            "name": "accountMaintenanceSettings.policyModifyingAllowed",
            "in": "query",
            "description": "Search by policyModifyingAllowed property for accountMaintenanceSettings.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "htmlTemplateSettings.allowedForModifying",
            "in": "query",
            "description": "Search by allowedForModifying property for htmlTemplateSettings.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "transfersApiSettings.webServiceRightsModifyingAllowed",
            "in": "query",
            "description": "Search by webServiceRightsModifyingAllowed property for transfersApiSettings.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "transfersApiSettings.transfersWebServiceAllowed",
            "in": "query",
            "description": "Search by transfersWebServiceAllowed property for transfersApiSettings.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "adHocSettings.authByEmail",
            "in": "query",
            "description": "Search by authByEmail property for adHocSettings.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "adHocSettings.authByEmailModifyingAllowed",
            "in": "query",
            "description": "Search by authByEmailModifyingAllowed property for adHocSettings.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "adHocSettings.deliveryMethodModifyingAllowed",
            "in": "query",
            "description": "Search by deliveryMethodModifyingAllowed property for adHocSettings.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "adHocSettings.deliveryMethod",
            "in": "query",
            "description": "Search by deliveryMethod property for adHocSettings.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "DEFAULT",
                "CUSTOM",
                "ANONYMOUS",
                "ACCOUNT_WITHOUT_ENROLLMENT",
                "ACCOUNT_WITH_ENROLLMENT"
              ]
            }
          },
          {
            "name": "adHocSettings.enrollmentTemplate",
            "in": "query",
            "description": "Search by enrollmentTemplate property for adHocSettings.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "adHocSettings.implicitEnrollmentType",
            "in": "query",
            "description": "Search by implicitEnrollmentType property for adHocSettings.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "ANONYMOUS_LINK",
                "CHALLENGED_LINK",
                "EXISTING_ACCOUNT",
                "ENROLL_UNLICENSED",
                "ENROLL_LICENSED",
                "ENROLL_MOBILE"
              ]
            }
          },
          {
            "name": "adHocSettings.notificationTemplate",
            "in": "query",
            "description": "Search by notificationTemplate property for adHocSettings.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fileArchivingSettings.policy",
            "in": "query",
            "description": "Search by policy property for fileArchivingSettings.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "default",
                "enabled",
                "disabled"
              ]
            }
          },
          {
            "name": "fileArchivingSettings.policyModifyingAllowed",
            "in": "query",
            "description": "Search by policyModifyingAllowed property for fileArchivingSettings.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "fileArchivingSettings.folderPolicy",
            "in": "query",
            "description": "Search by folderPolicy property for fileArchivingSettings.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "default",
                "custom"
              ]
            }
          },
          {
            "name": "fileArchivingSettings.customFolder",
            "in": "query",
            "description": "Search by customFolder property for fileArchivingSettings.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fileArchivingSettings.encryptionCertificatePolicy",
            "in": "query",
            "description": "Search by encryptionCertificatePolicy property for fileArchivingSettings.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "default",
                "custom",
                "disabled"
              ]
            }
          },
          {
            "name": "fileArchivingSettings.customEncryptionCertificate",
            "in": "query",
            "description": "Search by customEncryptionCertificate property for fileArchivingSettings.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fileArchivingSettings.customFileSizePolicy",
            "in": "query",
            "description": "Search by customFileSizePolicy property for fileArchivingSettings.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "default",
                "custom"
              ]
            }
          },
          {
            "name": "fileArchivingSettings.customFileSize",
            "in": "query",
            "description": "Search by customFileSize property for fileArchivingSettings.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "loginRestrictionSettings.policyModifyingAllowed",
            "in": "query",
            "description": "Search by policyModifyingAllowed property for loginRestrictionSettings.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "loginRestrictionSettings.policy",
            "in": "query",
            "description": "Search by policy property for loginRestrictionSettings.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "addressBookSettings.policy",
            "in": "query",
            "description": "Search by policy property for addressBookSettings.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "default",
                "custom",
                "disabled"
              ]
            }
          },
          {
            "name": "addressBookSettings.modifyCollaborationAllowed",
            "in": "query",
            "description": "Search by modifyCollaborationAllowed property for addressBookSettings.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "addressBookSettings.modifySourcesAllowed",
            "in": "query",
            "description": "Search by modifySourcesAllowed property for addressBookSettings.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "addressBookSettings.nonAddressBookCollaborationAllowed",
            "in": "query",
            "description": "Search by nonAddressBookCollaborationAllowed property for addressBookSettings.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "fileMaintenanceSettings.allowPolicyModifying",
            "in": "query",
            "description": "Search by allowPolicyModifying property for fileMaintenanceSettings.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "fileMaintenanceSettings.policy",
            "in": "query",
            "description": "Search by policy property for fileMaintenanceSettings.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "default",
                "custom",
                "disabled"
              ]
            }
          },
          {
            "name": "fileMaintenanceSettings.deleteFilesDays",
            "in": "query",
            "description": "Search by deleteFilesDays property for fileMaintenanceSettings.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fileMaintenanceSettings.pattern",
            "in": "query",
            "description": "Search by pattern property for fileMaintenanceSettings.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fileMaintenanceSettings.expirationPeriod",
            "in": "query",
            "description": "Search by expirationPeriod property for fileMaintenanceSettings.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "fileMaintenanceSettings.removeFolders",
            "in": "query",
            "description": "Search by removeFolders property for fileMaintenanceSettings.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "fileMaintenanceSettings.warningNotifications",
            "in": "query",
            "description": "Search by warningNotifications property for fileMaintenanceSettings.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "fileMaintenanceSettings.warnNotifyAccount",
            "in": "query",
            "description": "Search by warnNotifyAccount property for fileMaintenanceSettings.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "fileMaintenanceSettings.warnNotifyEmails",
            "in": "query",
            "description": "Search by warnNotifyEmails property for fileMaintenanceSettings.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fileMaintenanceSettings.warningNotificationsTemplate",
            "in": "query",
            "description": "Search by warningNotificationsTemplate property for fileMaintenanceSettings.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fileMaintenanceSettings.notifyDays",
            "in": "query",
            "description": "Search by notifyDays property for fileMaintenanceSettings.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fileMaintenanceSettings.sendSentinelAlert",
            "in": "query",
            "description": "Search by sendSentinelAlert property for fileMaintenanceSettings.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "fileMaintenanceSettings.deletionNotifications",
            "in": "query",
            "description": "Search by deletionNotifications property for fileMaintenanceSettings.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "fileMaintenanceSettings.deletionNotifyAccount",
            "in": "query",
            "description": "Search by deletionNotifyAccount property for fileMaintenanceSettings.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "fileMaintenanceSettings.deletionNotifyEmails",
            "in": "query",
            "description": "Search by deletionNotifyEmails property for fileMaintenanceSettings.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fileMaintenanceSettings.deletionNotificationsTemplate",
            "in": "query",
            "description": "Search by deletionNotificationsTemplate property for fileMaintenanceSettings.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessUnitResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "tags": [
          "businessUnits"
        ],
        "summary": "Create a business unit on the ST server.",
        "description": "`Permissions`: \"BUSINESS_UNIT_FORM\".\n",
        "operationId": "createBusinessUnit",
        "requestBody": {
          "description": "Business unit that needs to be created.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BusinessUnit"
              }
            }
          },
          "required": false
        },
        "responses": {
          "201": {
            "description": "Created - the request has succeeded and a new resource has been created as a result of it."
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/businessUnits/{name}": {
      "get": {
        "tags": [
          "businessUnits"
        ],
        "summary": "Get a business unit.",
        "description": "`Permissions`: \"BUSINESS_UNIT_FORM\".\n",
        "operationId": "getBusinessUnit",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "The business unit's fields to return.",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessUnit"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "tags": [
          "businessUnits"
        ],
        "summary": "Replace an existing business unit.",
        "description": "`Permissions`: \"BUSINESS_UNIT_FORM\".\n",
        "operationId": "updateBusinessUnit",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "The name of the business unit that need to be updated.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The business unit that needs to be updated.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BusinessUnit"
              }
            }
          },
          "required": false
        },
        "responses": {
          "204": {
            "description": "No Content - successful operation."
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "delete": {
        "tags": [
          "businessUnits"
        ],
        "summary": "Delete a business unit from the ST server.",
        "description": "`Permissions`: \"BUSINESS_UNIT_FORM\".\n",
        "operationId": "deleteBusinessUnit",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "The name of the business unit that need to be deleted.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content - successful operation."
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "head": {
        "tags": [
          "businessUnits"
        ],
        "summary": "Check if a business unit exists.",
        "description": "`Permissions`: \"BUSINESS_UNIT_FORM\".\n",
        "operationId": "businessUnitExists",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - successful operation."
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "patch": {
        "tags": [
          "businessUnits"
        ],
        "summary": "Partially update an existing business unit.",
        "description": "`Permissions`: \"BUSINESS_UNIT_FORM\".\n",
        "operationId": "partiallyUpdateBusinessUnit",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "The name of the business unit that needs to be updated.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Business unit properties that need to be updated for the specified business unit.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content - successful operation."
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/certificates": {
      "get": {
        "tags": [
          "certificates"
        ],
        "summary": "Get all certificates.",
        "description": "`Permissions`: \"MASTER_CERT_MGR_FORM_1\", \"MASTER_CERT_MGR_FORM_2\", \"MASTER_CERT_MGR_FORM_3\", \"MASTER_CERT_MGR_FORM\", \"USER_ACCOUNT_FORM\", \"SERVICE_ACCOUNT_FORM\", \"TEMPLATES_FORM\".\n\n Certificate properties 'keySize', 'validityPeriod', 'caPassword', 'password' and 'keyAlgorithm' are used only for certificate generation, they can not be get (listed) via the REST API (they have value null).\n\n When the HSM is enabled for FTP, HTTP, or SSH, the public key fingerprint cannot be loaded from the store, so the value is reported as null.\n",
        "operationId": "getCertificates",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "The limit of the listed certificate. The limit parameter can has only positive integer value. If the limit parameter is not set then as limit is set the max Integer value.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The index of the first certificate reference to get.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "The fields of certificate to return.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "The id to filter by.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "The certificate type to search for.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "x509",
                "pgp",
                "ssh"
              ]
            }
          },
          {
            "name": "usage",
            "in": "query",
            "description": "The certificate usage to search for.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "private",
                "local",
                "partner",
                "login",
                "trusted"
              ]
            }
          },
          {
            "name": "fingerprintAlgorithm",
            "in": "query",
            "description": "The algorithm to be used for fingerprint generation (MD5, SHA-1 or SHA256).",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "base64EncodedFingerprint",
            "in": "query",
            "description": "Whether the fingerprint should be Base64 encoded.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "disableChaining",
            "in": "query",
            "description": "Whether the chaining of certificates should be disabled, e.g. for performance improvement.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "The certificate name to filter by.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subject",
            "in": "query",
            "description": "The certificates with a certain subject.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expirationTime.from",
            "in": "query",
            "description": "Specify certificate expiration time from in Unix Timestamp format.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expirationTime.to",
            "in": "query",
            "description": "Specify certificate expiration time to in Unix Timestamp format.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "account",
            "in": "query",
            "description": "The account name to filter by.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accessLevel",
            "in": "query",
            "description": "Specify certificate's access level.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "PRIVATE",
                "PUBLIC",
                "BUSINESS_UNIT"
              ]
            }
          },
          {
            "name": "additionalAttributes.key",
            "in": "query",
            "description": "Search by userVars key.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "additionalAttributes.value",
            "in": "query",
            "description": "Search by userVars value.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CertificateResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "tags": [
          "certificates"
        ],
        "summary": "Create or import a certificate on the ST server.",
        "description": "`Permissions`: \"MASTER_CERT_MGR_FORM_1\", \"MASTER_CERT_MGR_FORM_2\", \"MASTER_CERT_MGR_FORM_3\", \"MASTER_CERT_MGR_FORM\", \"USER_ACCOUNT_FORM\", \"SERVICE_ACCOUNT_FORM\", \"TEMPLATES_FORM\".\n\nOn user account level there are three types of certificates depending on the certificate usage - `login`, `private` and `partner`. \n\n**Notes:** \n    - Only 'ca' trusted certificate could be regenerated.\n    - Regenerated 'ca' trustedcertificate can not be of type 'pgp'. \n    - Login certificates can not be of type 'pgp'.\n\n **Known issue:** `multipart/mixed` mode cannot be used with Swagger Client (refer to https://github.com/swagger-api/swagger-js/issues/2473). **Please, note that importing a certificate using SwaggerUI would fail.** More information and working examples can be found at https://support.axway.com/kb/181603/language/en. \n\n **Known issue:** The MIME boundary is hardcoded to 'BOUNDARY' because of swagger limitations (refer to https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.1.md#parameterIn for more information).\n\n **Known issue:** The import of x509 certificates of local and private usage can not be done via text representation of the certificate. This can be done with importing the PKCS #12 format file.\n\n **Known issue:** Certificate import requires additional file with the certificate content because of swagger limitations (refer to https://github.com/swagger-api/swagger-ui/issues/5090).",
        "requestBody": {
          "description": "The certificate to be created or imported.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Certificate"
              }
            },
            "multipart/mixed; boundary=BOUNDARY": {
              "schema": {
                "$ref": "#/components/schemas/MultiPart"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK - successful operation."
          },
          "201": {
            "description": "Successfully created certificate.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Certificate"
                }
              },
              "multipart/mixed": {
                "schema": {
                  "$ref": "#/components/schemas/MultiPart"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "409": {
            "description": "Conflict - duplicate entity."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/certificates/{id}": {
      "get": {
        "tags": [
          "certificates"
        ],
        "summary": "Get or export the certificate details for a certificate.",
        "description": "A login certificate could be exported only by certificate id. If export\nthe private key of a trusted certificate then the private key protection\npassword is required.\n\nWhen the HSM is enabled for FTP, HTTP, or SSH, the public key fingerprint cannot be loaded from the store, so the value is reported as null.\n\n** Known Issue: Applicable when exporting certificate. https://github.com/swagger-api/swagger-ui/issues/5293 **\n\n`Permissions`: \"MASTER_CERT_MGR_FORM_1\", \"MASTER_CERT_MGR_FORM_2\", \"MASTER_CERT_MGR_FORM_3\", \"MASTER_CERT_MGR_FORM\", \"USER_ACCOUNT_FORM\", \"SERVICE_ACCOUNT_FORM\", \"TEMPLATES_FORM\".\n",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Applicable for GET with json/multipart. The ID of the certificate to get or export.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "The certificate's fields to return.",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fingerprintAlgorithm",
            "in": "query",
            "description": "Applicable for GET with json. The algorithm to be used for fingerprint generation (MD5, SHA-1 or SHA256).",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "base64EncodedFingerprint",
            "in": "query",
            "description": "Applicable for GET with json. Whether the fingerprint should be Base64 encoded. Use for generation.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "Applicable for GET with multipart. REQUIRED for exporting private key of certificate.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "password"
            }
          },
          {
            "name": "exportSSHPublicKey",
            "in": "query",
            "description": "Applicable for GET with multipart.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "exportPrivateKey",
            "in": "query",
            "description": "Applicable for GET with multipart.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sshPublicKeyFormat",
            "in": "query",
            "description": "Applicable for GET with multipart. The SSH Public key format to be returned.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "secsh",
                "openssh"
              ]
            }
          },
          {
            "name": "includePath",
            "in": "query",
            "description": "Include the path in the response. Only for GET with json.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Certificate"
                }
              },
              "multipart/mixed": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200_1"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "delete": {
        "tags": [
          "certificates"
        ],
        "summary": "Delete a certificate.",
        "description": "`Permissions`: \"MASTER_CERT_MGR_FORM_1\", \"MASTER_CERT_MGR_FORM_2\", \"MASTER_CERT_MGR_FORM_3\", \"MASTER_CERT_MGR_FORM\", \"USER_ACCOUNT_FORM\", \"SERVICE_ACCOUNT_FORM\", \"TEMPLATES_FORM\".\n",
        "operationId": "deleteCertificate",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the certificate to delete.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content - successful operation."
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "head": {
        "tags": [
          "certificates"
        ],
        "summary": "Check if a certificate exists.",
        "description": "`Permissions`: \"MASTER_CERT_MGR_FORM_1\", \"MASTER_CERT_MGR_FORM_2\", \"MASTER_CERT_MGR_FORM_3\", \"MASTER_CERT_MGR_FORM\", \"USER_ACCOUNT_FORM\", \"SERVICE_ACCOUNT_FORM\", \"TEMPLATES_FORM\".\n",
        "operationId": "certificateExists",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - successful operation."
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "patch": {
        "tags": [
          "certificates"
        ],
        "summary": "Partially update a certificate.",
        "description": "`Note`: Only certificate's accessLevel and additionalAttributes can be modified.\n",
        "operationId": "updateCertificateAccess",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the certificate that needs to be updated.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Certificate's properties that need to be updated for the specified certificate.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content - successful operation."
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/certificates/{id}/operations": {
      "post": {
        "tags": [
          "certificates"
        ],
        "summary": "Export the certificate and optionally its path and/or key.",
        "description": "Export certificate or certificate path in standard format (pem, pkcs12 etc.).\n",
        "operationId": "certificateExport",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the certificate for which to export the path.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "operation",
            "in": "query",
            "description": "The operation to perform on the certificate.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "export"
              ],
              "default": "export"
            }
          },
          {
            "name": "format",
            "in": "query",
            "description": "The export format to use.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "crt",
                "pem",
                "pkcs12"
              ],
              "default": "pem"
            }
          },
          {
            "name": "includePath",
            "in": "query",
            "description": "Include the path in the response container.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/id_operations_body"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/certificates/requests": {
      "get": {
        "tags": [
          "certificates"
        ],
        "summary": "Get the collection of certificate requests on the ST server.",
        "description": "`Permissions`: \"MASTER_CERT_MGR_FORM_1\", \"MASTER_CERT_MGR_FORM_2\", \"MASTER_CERT_MGR_FORM_3\", \"MASTER_CERT_MGR_FORM\", \"USER_ACCOUNT_FORM\", \"SERVICE_ACCOUNT_FORM\", \"TEMPLATES_FORM\".\n\nCertificate request properties 'keySize' and 'usage' are used only for certificate generation. When get certificate requests, 'usage' property will not be listed and 'keySize' will be listed with a zero value.\n",
        "operationId": "getCertificateRequests",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "The limit of the listed certificates. The limit parameter can has only positive integer value. If the limit parameter is not set then as limit is set the max Integer value: 2 147 483 647\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The index of the first certificate reference to get.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "The fields of certificateRequest to return.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "The id to filter by.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "usage",
            "in": "query",
            "description": "The certificate request usage to search for.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "private",
                "local"
              ]
            }
          },
          {
            "name": "subject",
            "in": "query",
            "description": "The subject to filter by.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fingerprint",
            "in": "query",
            "description": "The fingerprint to filter by.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "account",
            "in": "query",
            "description": "The account name to filter by.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CertificateRequest"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "tags": [
          "certificates"
        ],
        "summary": "Generate a Certificate Signing Request on the ST server.",
        "description": "`Permissions`: \"MASTER_CERT_MGR_FORM_1\", \"MASTER_CERT_MGR_FORM_2\", \"MASTER_CERT_MGR_FORM_3\", \"MASTER_CERT_MGR_FORM\", \"USER_ACCOUNT_FORM\", \"SERVICE_ACCOUNT_FORM\", \"TEMPLATES_FORM\".\n",
        "operationId": "generateCertificateRequest",
        "requestBody": {
          "description": "The certificateRequest object to be created.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CertificateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successfully created a certificate signing request operation.",
            "content": {
              "multipart/mixed": {
                "schema": {
                  "$ref": "#/components/schemas/MultiPartCertificateRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CertificateRequest"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/certificates/requests/{id}": {
      "get": {
        "tags": [
          "certificates"
        ],
        "summary": "Get certificate request on the ST server.",
        "description": "`Permissions`: \"MASTER_CERT_MGR_FORM_1\", \"MASTER_CERT_MGR_FORM_2\", \"MASTER_CERT_MGR_FORM_3\", \"MASTER_CERT_MGR_FORM\", \"USER_ACCOUNT_FORM\", \"SERVICE_ACCOUNT_FORM\", \"TEMPLATES_FORM\".\n\n When get certificate requests, 'usage' property will not be listed and 'keySize' will be listed with a zero value.\n",
        "operationId": "getCertificateRequest",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the Certificate Signing Request to retrieve.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "The certificate's fields to return.",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CertificateRequest"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "tags": [
          "certificates"
        ],
        "summary": "Complete Certificate Signing Request on the ST server.",
        "description": "`Permissions`: \"MASTER_CERT_MGR_FORM_1\", \"MASTER_CERT_MGR_FORM_2\", \"MASTER_CERT_MGR_FORM_3\", \"MASTER_CERT_MGR_FORM\", \"USER_ACCOUNT_FORM\", \"SERVICE_ACCOUNT_FORM\", \"TEMPLATES_FORM\".\n",
        "operationId": "completeCertificateRequest",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the certificateRequest to be completed.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "certificateFile",
            "in": "header",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The certificateRequest object to be completed.",
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/requests_id_body"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully finished certificate signing request operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Certificate"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "delete": {
        "tags": [
          "certificates"
        ],
        "summary": "Delete a Certificate Signing Request.",
        "description": "`Permissions`: \"MASTER_CERT_MGR_FORM_1\", \"MASTER_CERT_MGR_FORM_2\", \"MASTER_CERT_MGR_FORM_3\", \"MASTER_CERT_MGR_FORM\", \"USER_ACCOUNT_FORM\", \"SERVICE_ACCOUNT_FORM\", \"TEMPLATES_FORM\".\n",
        "operationId": "deleteCertificateRequest",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the Certificate Signing Request to delete.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content - successful operation."
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "head": {
        "tags": [
          "certificates"
        ],
        "summary": "Check if a certificate request exists.",
        "description": "`Permissions`: \"MASTER_CERT_MGR_FORM_1\", \"MASTER_CERT_MGR_FORM_2\", \"MASTER_CERT_MGR_FORM_3\", \"MASTER_CERT_MGR_FORM\", \"USER_ACCOUNT_FORM\", \"SERVICE_ACCOUNT_FORM\", \"TEMPLATES_FORM\".\n",
        "operationId": "certificateRequestExists",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - successful operation."
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/zones": {
      "get": {
        "tags": [
          "zones"
        ],
        "summary": "Get collection of zones on the ST server.",
        "description": "`Permissions`: \"DMZ_ZONE_FORM\"\n",
        "operationId": "getDmzZones",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "The limit of the listed rows. The limit parameter can has only nonnegative integer value. If the limit parameter is set to 0 or it is null then its value will be the value of the global server configuration parameter named 'Webservices.EntriesPerPage' (which by default has value 100).\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The start row to list. The offset parameter can has only nonnegative integer value. If this parameter is not set, then it is considered 0.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "The zone's fields to return.\n",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Search by zone name.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isDefault",
            "in": "query",
            "description": "Search by isDefault property.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "description",
            "in": "query",
            "description": "Search by description of zone.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "publicURLPrefix",
            "in": "query",
            "description": "Search by publicURLPrefix of zone.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ssoSpEntityId",
            "in": "query",
            "description": "Search zones by ssoSpEntityId.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isDnsResolutionEnabled",
            "in": "query",
            "description": "Search by isDnsResolutionEnabled property.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "edges.enabledProxy",
            "in": "query",
            "description": "Search zones by enabledProxy property of edges.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "edges.title",
            "in": "query",
            "description": "Search zones by title of edge.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "edges.notes",
            "in": "query",
            "description": "Search zones by notes of edges.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "edges.configurationId",
            "in": "query",
            "description": "Search zones by configurationId of edges.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "edges.descriptor",
            "in": "query",
            "description": "Search zones by descriptor of edges.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "edges.isAutoDiscoverable",
            "in": "query",
            "description": "**Note:** Beta Feature - Do not use in Production. Check 'Beta.Dmz.DynamicNodeIpDiscovery.Enabled' configuration option.\n**Note:** The property is available only for zones different than the 'Private' one and only on Backend.\n\nSearch zones by isAutoDiscoverable property of edges.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "edges.dynamicNodeIpDiscoveryFqdn",
            "in": "query",
            "description": "**Note:** Beta Feature - Do not use in Production. Check 'Beta.Dmz.DynamicNodeIpDiscovery.Enabled' configuration option.\n**Note:** The property is available only for zones different than the 'Private' one and only on Backend.\n\nSearch zones by dynamicNodeIpDiscoveryFqdn property of edges.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "edges.ipAddresses.ipAddress",
            "in": "query",
            "description": "Search zones by ipAddress of edge.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "edges.protocols.isEnabled",
            "in": "query",
            "description": "Search zones by isEnabled property of edge's protocols.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "edges.protocols.streamingProtocol",
            "in": "query",
            "description": "Search zones by streamingProtocol of edge's protocols.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "HTTP",
                "FTP",
                "AS2",
                "SSH",
                "PESIT",
                "ADMIN"
              ]
            }
          },
          {
            "name": "edges.protocols.port",
            "in": "query",
            "description": "Search zones by port of edge's protocols.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "edges.protocols.sslAlias",
            "in": "query",
            "description": "Search zones by sslAlias of edge's protocols.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "edges.proxies.isEnabled",
            "in": "query",
            "description": "Search zones by isEnabled property of edge's proxies.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "edges.proxies.proxyProtocol",
            "in": "query",
            "description": "Search zones by proxyProtocol of edge.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "edges.proxies.port",
            "in": "query",
            "description": "Search zones by port of edge's proxies.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "edges.proxies.username",
            "in": "query",
            "description": "Search zones by username of edge's proxies.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "edges.proxies.isUsePassword",
            "in": "query",
            "description": "Search zones by isUsePassword property of edge's proxies.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ZoneResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "tags": [
          "zones"
        ],
        "summary": "Create a zone on the ST server.",
        "description": "`Permissions`: \"DMZ_ZONE_FORM\"\n",
        "operationId": "createZone",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Zone"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created - the request has succeeded and a new resource has been created as a result of it."
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "409": {
            "description": "Conflict - duplicate entity."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/zones/{name}": {
      "get": {
        "tags": [
          "zones"
        ],
        "summary": "Get a DMZ zone with a given name.",
        "description": "`Permissions`: \"DMZ_ZONE_FORM\"\n",
        "operationId": "getDmzZone",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "The name of the zone to get.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "The zone's fields to return.",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Zone"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "tags": [
          "zones"
        ],
        "summary": "Replace an existing zone with the same name on the ST Server.",
        "description": "`Permissions`: \"DMZ_ZONE_FORM\"\n",
        "operationId": "updateZone",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "The name of the zone to replace.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The DMZ zone to replace.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Zone"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content - successful operation."
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "delete": {
        "tags": [
          "zones"
        ],
        "summary": "Deletes a zone with given name.",
        "description": "`Permissions`: \"DMZ_ZONE_FORM\"\n",
        "operationId": "deleteZone",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "The name of the zone to delete.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content - successful operation."
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "head": {
        "tags": [
          "zones"
        ],
        "summary": "Check if zone exists.",
        "description": "`Permissions`: \"DMZ_ZONE_FORM\"\n",
        "operationId": "zoneExists",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "The name of the zone.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - successful operation."
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "patch": {
        "tags": [
          "zones"
        ],
        "summary": "Partially update a zone.",
        "description": "The update fully overrides the previously existing zone on the SecureTransport\nserver.\n\n`Permissions`: \"DMZ_ZONE_FORM\"\n",
        "operationId": "partiallyUpdateZone",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "The name of the zone.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Zone object with properties to set.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content - successful operation."
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/loginRestrictionPolicies": {
      "get": {
        "tags": [
          "loginRestrictionPolicies"
        ],
        "summary": "Get login restriction policies collection on the ST server.",
        "operationId": "getPolicies",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "The limit of the listed rows. The limit parameter can has only nonnegative integer value. If the limit parameter is set to 0 or it is null then its value will be the value of the global server configuration parameter named 'Webservices.EntriesPerPage' (which by default has value 100).",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The start row to list. The offset parameter can has only nonnegative integer value. If this parameter is not set, then it is considered 0.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "The route's fields to return.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "The login restriction policy name to filter by.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderByName",
            "in": "query",
            "description": "The order of filtering by name.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "ASCENDING",
                "DESCENDING"
              ]
            }
          },
          {
            "name": "nameMatchMode",
            "in": "query",
            "description": "The name match mode.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "EXACT",
                "START",
                "END",
                "ANYWHERE"
              ]
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "The login restriction policy type to filter by.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "ALLOW_THEN_DENY",
                "DENY_THEN_ALLOW"
              ]
            }
          },
          {
            "name": "isDefault",
            "in": "query",
            "description": "Filter only the default login restriction policy or filter all policies without the default one.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "businessUnit",
            "in": "query",
            "description": "The bisuness unit name to filter by.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "additionalAttributes.key",
            "in": "query",
            "description": "Search by userVars key.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "additionalAttributes.value",
            "in": "query",
            "description": "Search by userVars value.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "description",
            "in": "query",
            "description": "Description to filter by.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "rules.name",
            "in": "query",
            "description": "Applicable for loginRestrictionPolicy's rule. Rule's name to filter by.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "rules.isEnabled",
            "in": "query",
            "description": "Applicable for loginRestrictionPolicy's rule. Whether rule is enabled.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "rules.type",
            "in": "query",
            "description": "Applicable for loginRestrictionPolicy's rule. Rule's type to filter by.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "rules.clientAddress",
            "in": "query",
            "description": "Applicable for loginRestrictionPolicy's rule. Rule's clientAddress to filter by.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "rules.expression",
            "in": "query",
            "description": "Applicable for loginRestrictionPolicy's rule. Rule's expression to filter by.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "rules.description",
            "in": "query",
            "description": "Applicable for loginRestrictionPolicy's rule. Rule's description to filter by.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "tags": [
          "loginRestrictionPolicies"
        ],
        "summary": "Create a login restriction policy.",
        "operationId": "createPolicy",
        "requestBody": {
          "description": "The login restriction policy to create.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Policy"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created - the request has succeeded and a new resource has been created as a result of it."
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "409": {
            "description": "Conflict - duplicate entity."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/loginRestrictionPolicies/{name}": {
      "get": {
        "tags": [
          "loginRestrictionPolicies"
        ],
        "summary": "Get login restriction policy.",
        "operationId": "getPolicy",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "The name of the login restriction policy to get.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "The loginRestrictionPolicies` fields to return.",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Policy"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "tags": [
          "loginRestrictionPolicies"
        ],
        "summary": "Replace an existing properties of a login restriction policy.",
        "operationId": "updatePolicyProperties",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "The name of the login restriction policy to update.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The login restriction policy which properties to update.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Policy"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content - successful operation."
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "409": {
            "description": "Conflict - duplicate entity."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "delete": {
        "tags": [
          "loginRestrictionPolicies"
        ],
        "summary": "Delete a login restriction policy.",
        "operationId": "deletePolicy",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "The name of the login restriction policy to delete.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content - successful operation."
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "head": {
        "tags": [
          "loginRestrictionPolicies"
        ],
        "summary": "Check if a login restriction policy exists.",
        "operationId": "policyExists",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "Name of the loginRestritionPolicy.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - successful operation."
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "patch": {
        "tags": [
          "loginRestrictionPolicies"
        ],
        "summary": "Partially update an existing login restriction policy.",
        "operationId": "partiallyUpdatePolicy",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "The name of the loginRestrictionPolicy that needs to be updated.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "LoginRestrictionPolicy properties that need to be updated.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content - successful operation."
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "409": {
            "description": "Conflict - duplicate entity."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/logs/audit": {
      "get": {
        "tags": [
          "logs"
        ],
        "summary": "Get the collection of audit logs.",
        "description": "`Permissions`: \"AUDIT_LOG_FORM\", \"AUDIT_LOG_FORM_1\".\n",
        "operationId": "getOrExportAuditLogEntries",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "The number of entries to list (the number must be a positive number). If limit is set to 0 then the default limit value of 100 entries applies. The maximum allowed number of entries is 200.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The offset from the first result. By default is 0.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Set of comma separated strings of audit log properties to return.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fromDate",
            "in": "query",
            "description": "The from date in RFC2822 string - EEE, d MMM yyyy HH:mm:ss Z.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "The end date in RFC2822 string - EEE, d MMM yyyy HH:mm:ss Z.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dateModified",
            "in": "query",
            "description": "The modification date of the audit log.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "duration",
            "in": "query",
            "description": "The time duration in hours.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userName",
            "in": "query",
            "description": "The name/part of name of the user who modified the object.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "remoteAddress",
            "in": "query",
            "description": "The IP address of the remote client that sent the request.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "objectType",
            "in": "query",
            "description": "The type of the object modified.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "objectName",
            "in": "query",
            "description": "The name/part of name of the object modified.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "objectString",
            "in": "query",
            "description": "The string representation of the audited object",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "objectIdentifier",
            "in": "query",
            "description": "The object identifier.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "operationType",
            "in": "query",
            "description": "The type of the operation.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "description",
            "in": "query",
            "description": "The description/part of description of the audit operation.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "configurationId",
            "in": "query",
            "description": "A list of cluster node configuration id-s.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuditLogEntryResult"
                }
              },
              "text/csv": {}
            }
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/logs/audit/{id}": {
      "get": {
        "tags": [
          "logs"
        ],
        "summary": "Get an audit log.",
        "description": "`Permissions`: \"AUDIT_LOG_FORM\", \"AUDIT_LOG_FORM_1\".\n",
        "operationId": "getAuditLogEntry",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the audit log.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "The audit log's fields to return.",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuditLogEntry"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "tags": [
          "logs"
        ],
        "summary": "Replace an existing description of an audit log.",
        "description": "`Permissions`: \"AUDIT_LOG_FORM\", \"AUDIT_LOG_FORM_1\".\n",
        "operationId": "updateAuditLogEntryDescription",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the audit log.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The audit log that needs to be updated.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuditLogEntry"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuditLogEntry"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/logs/server": {
      "get": {
        "tags": [
          "logs"
        ],
        "summary": "Get the collection of server logs.",
        "description": "`Permissions`: \"SERVER_LOG_FORM\".\n",
        "operationId": "getServerLogEntries",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Max result size. The limit parameter can has only nonnegative integer value. If the limit parameter is set to 0 or it is null then its value will be the value of the global server configuration parameter named 'Webservices.EntriesPerPage' (which by default has value 100).\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The start row to list. The offset parameter can has only nonnegative integer value. If this parameter is not set, then it is considered 0.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Set of comma separated strings of server log properties to return.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "component",
            "in": "query",
            "description": "The components names. Could be more than one parameter with the same name. Valid component names are: 'TM', 'AS2D', 'SSHD', 'SOCKS', 'ADMIN', 'AUDIT', 'FTPD', 'HTTPD', 'PESITD'.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "TM",
                  "AS2D",
                  "SSHD",
                  "SOCKS",
                  "ADMIN",
                  "AUDIT",
                  "FTPD",
                  "HTTPD",
                  "PESITD"
                ]
              }
            }
          },
          {
            "name": "level",
            "in": "query",
            "description": "The log levels. Could be more than one parameter. Must be a valid log4j logging level name. Valid names are: 'ALL', 'DEBUG', 'ERROR', 'FATAL', 'INFO', 'OFF', 'TRACE', 'WARN'.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "ALL",
                  "DEBUG",
                  "ERROR",
                  "FATAL",
                  "INFO",
                  "TRACE",
                  "WARN"
                ]
              }
            }
          },
          {
            "name": "accountName",
            "in": "query",
            "description": "The account name to filter.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "threadName",
            "in": "query",
            "description": "The thread name to filter by.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fromDate",
            "in": "query",
            "description": "The from date in RFC2822 format to filter. The format is: EEE, d MMM yyyy HH:mm:ss Z. Example: 'Thu, 21 Apr 2016 16:13:50 GMT'.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "The end date in RFC2822 format to filter. The format is: EEE, d MMM yyyy HH:mm:ss Z. Example: 'Thu, 21 Apr 2016 16:13:50 GMT'.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sessionIdentifier",
            "in": "query",
            "description": "The session ID to filter by.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "transferIdentifier",
            "in": "query",
            "description": "The transfer ID to filter by.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "message",
            "in": "query",
            "description": "The log message or part of log message to filter by.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "thread",
            "in": "query",
            "description": "The thread",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filename",
            "in": "query",
            "description": "The filename",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "className",
            "in": "query",
            "description": "The class name",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "method",
            "in": "query",
            "description": "The method",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "exception",
            "in": "query",
            "description": "The exception",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerLogEntryResult"
                }
              },
              "text/csv": {}
            }
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/logs/server/{id}": {
      "get": {
        "tags": [
          "logs"
        ],
        "summary": "Get a server log.",
        "description": "`Permissions`: \"SERVER_LOG_FORM\".\n",
        "operationId": "getServerLogEntry",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The composite id of the log to retrieve (Base64 encoded). You can build composite id by specified pattern and then encode it in Base64 format or use urlrepresent property of id object.\n\n `Pattern:` Id \\\\[mConfigurationId=(\\w\\*), mEventId=(-?\\d\\*), mTimestamp=(\\d\\*)\\\\]\n\n `Example:` Id \\[mConfigurationId=e282jd8a293231sr2sg21, mEventId=1, mTimestamp=52938532949\\]",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "The log's fields to return.",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerLogEntry"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/logs/transfers": {
      "get": {
        "tags": [
          "logs"
        ],
        "summary": "Get the collection of transfer logs.",
        "description": "`Permissions`: \"TRANSFER_LOG_FORM\".\n",
        "operationId": "getTransfers",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "The limit of the listed rows. The limit parameter can has only positive integer value.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The start row to list. The offset parameter can has only nonnegative integer value. If this parameter is not set, then it is considered 0.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Set of comma separated strings of transfer log properties to return.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "returnLatestStatusOnly",
            "in": "query",
            "description": "Defines whether to return all available entries. When true, only the latest entry of a sequence of related logs would be returned.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "account",
            "in": "query",
            "description": "The name of the account that performed the transfer. Supports wildcard search.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "loginName",
            "in": "query",
            "description": "The loginName of the account that performed the transfer. Supports wildcard search.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "serverName",
            "in": "query",
            "description": "The name of the server processing the transfer",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filename",
            "in": "query",
            "description": "The transferred file. Supports wildcard search.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "localFilename",
            "in": "query",
            "description": "The local name of the transferred file. Supports wildcard search.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userClass",
            "in": "query",
            "description": "The user class. Default values are 'VirtClass' and 'RealClass'.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "site",
            "in": "query",
            "description": "The name of the transfer site. Supports wildcard search.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "site.id",
            "in": "query",
            "description": "The id of the transfer site.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "transferProfile",
            "in": "query",
            "description": "Transfer profile of the site (PeSIT related).",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "A list of transfer statuses. It can be 'In Progress', 'Processed', 'Failed', 'Aborted', 'Pending receipt', 'Failed Subtransmission', 'Paused', 'Failed Transfer Resubmit' or 'Waiting'.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "In Progress",
                  "Processed",
                  "Failed",
                  "Aborted",
                  "Pending receipt",
                  "Failed Subtransmission",
                  "Paused",
                  "Failed Transfer Resubmit",
                  "Waiting"
                ]
              }
            }
          },
          {
            "name": "transferId",
            "in": "query",
            "description": "The id of the transfer status entry.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startTimeBefore",
            "in": "query",
            "description": "The time before which the transfer started as RFC2822 string - EEE, d MMM yyyy HH:mm:ss Z.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startTimeAfter",
            "in": "query",
            "description": "The time after which the transfer started as RFC2822 string - EEE, d MMM yyyy HH:mm:ss Z.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endTimeBefore",
            "in": "query",
            "description": "The time before which the transfer ended as RFC2822 string - EEE, d MMM yyyy HH:mm:ss Z.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endTimeAfter",
            "in": "query",
            "description": "The time after which the transfer ended as RFC2822 string - EEE, d MMM yyyy HH:mm:ss Z.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "serverInitiated",
            "in": "query",
            "description": "Defines whether the transfer is server or client initiated",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "protocol",
            "in": "query",
            "description": "The protocol of the site. It can be 'as2', 'ftp', 'http', 'ssh', 'pesit', 'folder', 'adhoc' as well as the protocols added with transfer site plugins.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "application",
            "in": "query",
            "description": "A list of application names.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "direction",
            "in": "query",
            "description": "A list of transfer directions. It can be 'Incoming' or 'Outgoing'.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "incoming",
            "in": "query",
            "description": "Defines whether the transfer direction is incoming or outgoing",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "secure",
            "in": "query",
            "description": "Defines whether the transfer is secure or non-secure.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "resubmitted",
            "in": "query",
            "description": "Defines whether the transfer is resubmitted or not-resubmitted. It can be 'false' or 'true'.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "operationIndex",
            "in": "query",
            "description": "A list of operation indexes. It can be '(none)' or some ID.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "coreId",
            "in": "query",
            "description": "The coreId of the transfer entry.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filesize",
            "in": "query",
            "description": "Transfered file size",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "remoteDir",
            "in": "query",
            "description": "Remote directory.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "remotePartner",
            "in": "query",
            "description": "Remote partner that gets/sends the file.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "securityParameters",
            "in": "query",
            "description": "Negotiated during handshake session security parameters",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "actionBy",
            "in": "query",
            "description": "Defines who initiated the transfer. It can be 'User' or 'Server'",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cycleId",
            "in": "query",
            "description": "The Cycle Id",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransferLogEntryResult"
                }
              },
              "text/csv": {}
            }
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/logs/transfers/{id}": {
      "get": {
        "tags": [
          "logs"
        ],
        "summary": "Get a transfer log.",
        "description": "`Permissions`: \"TRANSFER_LOG_FORM\".\n",
        "operationId": "getTransfer",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Base64-encoded composite parameter in the format 'Id [mTransferStatusId=var1, mTransferStartTime=var2]', where var1 is the transfer id and var2 is the transfer start time in unix format.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "The log transfers' fields to return.",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransferLogDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          },
          "503": {
            "description": "Service Unavailable."
          }
        }
      }
    },
    "/logs/transfers/{id}/operations": {
      "post": {
        "tags": [
          "logs"
        ],
        "summary": "Perform an operation for specific transfer.",
        "description": "You can cancel or resubmit a transfer, verify an MDN, or manually acknowledge a received PeSIT transfer. An acknowledgment, either positive (ack) or negative (nack), can be sent only for transfers that have not been previously acknowledged.\n\n`Permissions`: \"TRANSFER_LOG_FORM\".\n",
        "operationId": "transferOperations",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Base64-encoded composite parameter in the format 'Id [mTransferStatusId=var1, mTransferStartTime=var2]', where var1 is the transfer id and var2 is the transfer start time in unix format.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "operation",
            "in": "query",
            "description": "Which transfer operation to be performed.",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "cancel",
                "resubmit",
                "verify",
                "ack",
                "nack"
              ]
            }
          }
        ],
        "requestBody": {
          "description": " Optional message that could be sent `ONLY` during `ack/nack` operations. To add a custom value to the `User Message (PI99)` via ack/nack, enter the value (string) between the double quotation marks, in the example below.\n\n This field supports Expression Language. Valid expressions are:\n\n * `${pesit.accountName}` - The acknowledgement originator (account name for manual acknowledgements).\n\n * `${pesit.datetime}` - Date and time of the acknowledgement.\n\n If the message is empty, the template from `Pesit.Transfer.Acknowledge` configuration property will be used by default.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AckMessage"
              },
              "examples": {
                "ackMessage": {
                  "$ref": "#/components/examples/AckMessageExample"
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200_2"
                },
                "examples": {
                  "resubmissionStatus": {
                    "$ref": "#/components/examples/ResubmissionStatusExample"
                  },
                  "receiptVerificationResult": {
                    "$ref": "#/components/examples/ReceiptVerificationResultExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "422": {
            "description": "Unprocessable Entity - the server understands the content type of the request entity, and the syntax of the request entity is correct, but it was unable to process the contained instructions."
          },
          "500": {
            "description": "Internal Server Error"
          },
          "503": {
            "description": "Service Unavailable."
          }
        }
      }
    },
    "/mailTemplates": {
      "get": {
        "tags": [
          "mailTemplates"
        ],
        "summary": "Get mail template collection.",
        "description": "`Permissions`: \"MAIL_TEMPLATE_REPOSITORY\".\n",
        "operationId": "getMailTemplates",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "The limit of the listed rows. The limit parameter can has only nonnegative integer value. If the limit parameter is set to 0 or it is null then its value will be the value of the global server configuration parameter named `Webservices.EntriesPerPage` (which by default has value 100).",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The start row to list. The offset parameter can has only nonnegative integer value. If this parameter is not set, then it is considered 0.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "The fields of mailTemplate to return.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "The unique name of the mail template.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "description",
            "in": "query",
            "description": "The description of the mail template.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MailTemplateResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "500": {
            "description": "Internal Server Error"
          },
          "503": {
            "description": "Service Unavailable."
          }
        }
      },
      "post": {
        "tags": [
          "mailTemplates"
        ],
        "summary": "Create new mail template.",
        "description": "`Permissions`: \"MAIL_TEMPLATE_REPOSITORY\".\n",
        "operationId": "createTemplate",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/mailTemplates_body"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created - the request has succeeded and a new resource has been created as a result of it."
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "409": {
            "description": "Conflict - duplicate entity."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/mailTemplates/{name}": {
      "get": {
        "tags": [
          "mailTemplates"
        ],
        "summary": "Get mail template.",
        "description": "`Permissions`: \"MAIL_TEMPLATE_REPOSITORY\".\n",
        "operationId": "getMailTempalte",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "The name of the mail template.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - successful operation.",
            "content": {
              "application/xhtml+xml": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "tags": [
          "mailTemplates"
        ],
        "summary": "Replace an existing mail template.",
        "description": "The file name of the uploaded file is ignored and file is saved with the name specified in the URL.\n\n`Permissions`: \"MAIL_TEMPLATE_REPOSITORY\".\n",
        "operationId": "updateTemplate",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "The name of the mail template. File name of the uploaded file is ignored and file is saved  on the ST server with the name specified in this parameter. The file extention should be xhtml.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/mailTemplates_name_body"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content - successful operation."
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "409": {
            "description": "Conflict - duplicate entity."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "delete": {
        "tags": [
          "mailTemplates"
        ],
        "summary": "Delete mail template.",
        "description": "`Permissions`: \"MAIL_TEMPLATE_REPOSITORY\".\n",
        "operationId": "deleteMailTempalte",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "The name of the mail template.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content - successful operation."
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "409": {
            "description": "Conflict - duplicate entity."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "head": {
        "tags": [
          "mailTemplates"
        ],
        "summary": "Check if mail template exists.",
        "description": "`Permissions`: \"MAIL_TEMPLATE_REPOSITORY\".\n",
        "operationId": "isMailTemplateExists",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "The name of the mail template.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - successful operation."
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/myself": {
      "get": {
        "tags": [
          "myself"
        ],
        "summary": "Get administrator.",
        "operationId": "getLoginUser",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "The administrator's fields to return.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Administrator"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "tags": [
          "myself"
        ],
        "summary": "Login user.",
        "description": "Use the resource to authenticate a user to SecureTransport. SecureTransport will return session cookies, reuse of which will allow subsequent APIs to be issued without having to re-authenticate.\n\nYou can observe the usage of curl's --cookie-jar option for storing cookies and --cookie for reading them in the next curl command, i.e. reuse the authentication.\n\nFor example:\n\ncurl -k --cookie-jar cookie.jar -u \"user:password\" -X POST \"https://\\<IP\\>:\\<PORT\\>/api/v2.0/myself\" -H \"accept: application/json\" -H \"Referer: Random_Text_Here\"\n",
        "operationId": "loginUser",
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationActionResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "delete": {
        "tags": [
          "myself"
        ],
        "summary": "Logout user.",
        "description": "Use the resource to logout an authenticated user from SecureTransport.\n\nYou can observe the usage of curl's --cookie-jar option for storing cookies and --cookie for reading them in the next curl command, i.e. reuse the authentication.\n\nFor example:\n\ncurl -k -L --cookie cookie.jar -X DELETE \"https://\\<IP\\>:\\<PORT\\>/api/v2.0/myself\" -H \"accept: application/json\" -H \"Referer: Random_Text_Here\"\n",
        "operationId": "logoutUser",
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationActionResult"
                }
              }
            }
          },
          "302": {
            "description": "Redirect to IdP in case the user was authenticated by an external server."
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "patch": {
        "tags": [
          "myself"
        ],
        "summary": "Update user password.",
        "requestBody": {
          "description": "Password property that need to be updated for current user.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchPasswordRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content - successful operation."
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/routeStepsCharsets": {
      "get": {
        "tags": [
          "routeStepsCharsets"
        ],
        "summary": "Get collection of the supported charsets.",
        "operationId": "getAvailableCharsets",
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RouteStepsCharsets"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/routeStepsMetadata": {
      "get": {
        "tags": [
          "routeStepsMetadata"
        ],
        "summary": "Get collection of the route steps metadata.",
        "operationId": "getRouteStepsMetadata",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "The fields of route steps metadata to return.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RouteStepMetadata"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/routes": {
      "get": {
        "tags": [
          "routes"
        ],
        "summary": "Get collection of routes on the ST server.",
        "description": "When trying to filter by fields exclusive to a certain route's step type, the steps.type property must be specified.\n",
        "operationId": "getRoutes",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "The limit of the listed rows. The limit parameter can has only nonnegative integer value. If the limit parameter is set to 0 or it is null then its value will be the value of the global server configuration parameter named 'Webservices.EntriesPerPage' (which by default has value 100)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The start row to list. The offset parameter can has only nonnegative integer value. If this parameter is not set, then it is considered 0.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "The fields of route to return.\n\n**Note:** The type field for steps will always be present when listing properties of steps.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "account",
            "in": "query",
            "description": "The account to filter for.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "query",
            "description": "The bisuness unit name to filter by.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "referredByRoute",
            "in": "query",
            "description": "Which route is referred by this route.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Route's type to sort by.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "COMPOSITE",
                "TEMPLATE",
                "SIMPLE"
              ]
            }
          },
          {
            "name": "managedByCG",
            "in": "query",
            "description": "Search for routes managed by Central Governance.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "condition",
            "in": "query",
            "description": "Route's condition to sort by.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "conditionType",
            "in": "query",
            "description": "Route's conditionType to sort by.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "MATCH_ALL",
                "MATCH_FIRST",
                "ALWAYS",
                "EL"
              ]
            }
          },
          {
            "name": "description",
            "in": "query",
            "description": "Route's description to sort by.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "failureEmailName",
            "in": "query",
            "description": "Route's failureEmailName to sort by.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "failureEmailNotification",
            "in": "query",
            "description": "Route's failureEmailNotification to sort by.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "failureEmailTemplate",
            "in": "query",
            "description": "Route's failureEmailTemplate to sort by.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Route Package Name.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "routeTemplate",
            "in": "query",
            "description": "Route's routeTemplate to sort by.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subscription",
            "in": "query",
            "description": "The route package template subscription id.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "additionalAttributes.key",
            "in": "query",
            "description": "Search by userVars key.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "additionalAttributes.value",
            "in": "query",
            "description": "Search by userVars value.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "successEmailName",
            "in": "query",
            "description": "Route's successEmailName to sort by.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "successEmailNotification",
            "in": "query",
            "description": "Route's successEmailNotification to sort by.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "successEmailTemplate",
            "in": "query",
            "description": "Route's successEmailTemplate to sort by.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "triggeringEmailName",
            "in": "query",
            "description": "Route's triggeringEmailName to sort by.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "triggeringEmailNotification",
            "in": "query",
            "description": "Route's triggeringEmailNotification to sort by.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "triggeringEmailTemplate",
            "in": "query",
            "description": "Route's triggeringEmailTemplate to sort by.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "stepStatuses.stepId",
            "in": "query",
            "description": "Applicable for routes and steps.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "stepStatuses.status",
            "in": "query",
            "description": "Applicable for routes and steps.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "ENABLED",
                "DISABLED"
              ]
            }
          },
          {
            "name": "steps.id",
            "in": "query",
            "description": "Applicable for all steps. Route's step id to sort by.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "steps.type",
            "in": "query",
            "description": "Applicable for all steps. Route's step type to sort by.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "steps.condition",
            "in": "query",
            "description": "Applicable for all steps except for ExecuteRoute. Steps' condition to sort by.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "steps.conditionType",
            "in": "query",
            "description": "Applicable for all steps except for ExecuteRoute. Steps' conditionType to sort by.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "ALWAYS",
                "EL"
              ]
            }
          },
          {
            "name": "steps.actionOnStepSuccess",
            "in": "query",
            "description": "Applicable for all steps except for ExecuteRoute. Route's step actionOnStepSuccess to sort by.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "PROCEED",
                "STOP"
              ]
            }
          },
          {
            "name": "steps.status",
            "in": "query",
            "description": "Applicable for all steps. Route's step status to sort by.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "steps.autostart",
            "in": "query",
            "description": "Applicable for all steps. Route's step autostart property.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "steps.executeRoute",
            "in": "query",
            "description": "Applicable only for step with type ExecuteRoute. Route's step executeRoute to sort by.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "steps.precedingStep",
            "in": "query",
            "description": "Applicable for all steps. Route's step precedingStep to sort by.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "steps.actionOnStepFailure",
            "in": "query",
            "description": "Applicable for all steps except for ExecuteRoute. Route's step actionOnStepFailure to sort by.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "steps.fileFilterExpression",
            "in": "query",
            "description": "Applicable for EncodingConversion, Compress, Decompress, LineEnding, LinePadding, LineTruncating, PgpDecryption, PgpEncryption, Rename, CharacterReplace, Publish, SendToPartner RouteSteps. Specify file name or file name expression.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "steps.fileFilterExpressionType",
            "in": "query",
            "description": "Applicable for EncodingConversion, Compress, Decompress, LineFolding, LineEnding, LinePadding, LineTruncating, PgpDecryption, PgpEncryption, Rename, CharacterReplace, Publish, SendToPartner RouteSteps. Specify file filter expression type.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "steps.inputCharset",
            "in": "query",
            "description": "Applicable for EncodingConversion, LineFolding, LineEnding, LinePadding, LineTruncating, CharacterReplace RouteSteps. Specify the source file encoding.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "steps.outputCharset",
            "in": "query",
            "description": "Applicable for EncodingConversion, LineFolding, LinePadding, CharacterReplace, LineEnding, LineTruncating, EncodingConversion RouteSteps. Specify output file encoding.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "steps.postTransformationActionRenameAsExpression",
            "in": "query",
            "description": "Applicable for EncodingConversion, Compress, Decompress, LineFolding, LineEnding, LinePadding, LineTruncating, PgpDecryption, PgpEncryption, CharacterReplace, RouteSteps. Specify post transformation action rename expression.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "steps.usePrecedingStepFiles",
            "in": "query",
            "description": "Applicable for EncodingConversion, Compress, Decompress, LineFolding, LineEnding, LinePadding, LineTruncating, PgpDecryption, PgpEncryption, Rename, CharacterReplace, Publish, SendToPartner, RouteSteps. Specify whether to use preceding step files.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "step.compressionType",
            "in": "query",
            "description": "Applicable for Compress RouteStep. Specify compression type.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "steps.compressionLevel",
            "in": "query",
            "description": "Applicable for Compress,PgpEncryption RouteSteps. Specify compression level.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "step.singleArchiveName",
            "in": "query",
            "description": "Applicable for Compress RouteStep. Specify archive name or expression.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "steps.singleArchiveEnabled",
            "in": "query",
            "description": "Applicable for Compress RouteStep. Specify wheter single file archiving is enabled.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "steps.fileFoldWidth",
            "in": "query",
            "description": "Applicable for LineFolding RouteStep. Specify maximum lane width in the file over which point it will be folded.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "steps.inputEolSequence",
            "in": "query",
            "description": "Applicable for LineEnding RouteStep. Specify input EOL sequence.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "steps.outputEolSequence",
            "in": "query",
            "description": "Applicable for LineEnding RouteStep. Specify output EOL sequence.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "steps.linePaddingCharacter",
            "in": "query",
            "description": "Applicable for LinePadding RouteStep. Specify line padding character as valid Unicode escape sequence.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "steps.linePaddingLength",
            "in": "query",
            "description": "Applicable for LinePadding RouteStep. Specify line padding length.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "steps.truncateLength",
            "in": "query",
            "description": "Applicable for LineTruncating RouteStep. Specify the lines maximum length in number of characters/symbols.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "steps.requireEncryption",
            "in": "query",
            "description": "Applicable for PgpDecryption RouteStep. Wheter encryption is required.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "steps.requireTrustedSignature",
            "in": "query",
            "description": "Applicable for PgpDecryption RouteStep. Wheter trusted signature is required.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "steps.compressionType",
            "in": "query",
            "description": "Applicable for PgpEncryption RouteStep. test",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "steps.encryptKeyExpression",
            "in": "query",
            "description": "Applicable for PgpEncryption RouteStep. Specify PGP encryption name amongst PGP Public Keys.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "steps.encryptKeyExpressionType",
            "in": "query",
            "description": "Applicable for PgpEncryption RouteStep. Specify Account name or expression.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "steps.encryptKeyOwnerExpression",
            "in": "query",
            "description": "Applicable for PgpEncryption RouteStep. Specify either an account name or use an EL expression to determine the recipient based on the environment information.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "steps.encryptKeyOwnerExpressionType",
            "in": "query",
            "description": "Applicable for PgpEncryption RouteStep. Specify Account name or expression.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "steps.signKeyExpression",
            "in": "query",
            "description": "Applicable for PgpEncryption RouteStep. Specify PGP encryption name amongst PGP Public Keys.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "steps.signKeyExpressionType",
            "in": "query",
            "description": "Applicable for PgpEncryption RouteStep. Specify PGP Key alias or expression.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "steps.signKeyOwnerExpression",
            "in": "query",
            "description": "Applicable for PgpEncryption RouteStep. Specify either an account name or use an EL expression to determine the recipient based on the environment information.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "steps.signKeyOwnerExpressionType",
            "in": "query",
            "description": "Applicable for PgpEncryption RouteStep. Specify account name or expression.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "steps.useAsciiArmour",
            "in": "query",
            "description": "Applicable for PgpEncryption RouteStep. Whether to specify ASCII Armor.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "steps.outputFileName",
            "in": "query",
            "description": "Applicable for Rename RouteStep. Specify output file name or expression.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "steps.findCharacterSequence",
            "in": "query",
            "description": "Applicable for CharacterReplace RouteStep. Specify Find character sequence.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "steps.lineStrip",
            "in": "query",
            "description": "Applicable for CharacterReplace RouteStep. Specify Line strip enablement.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "steps.replaceCharacterSequence",
            "in": "query",
            "description": "Applicable for CharacterReplace RouteStep. Specify replace character sequence.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "steps.logOutput",
            "in": "query",
            "description": "Applicable for ExternalScript RouteStep. Whether the script will genarate standard output to Server log.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "steps.rootExecution",
            "in": "query",
            "description": "Applicable for ExternalScript RouteStep. Specify root execution.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "steps.scriptPath",
            "in": "query",
            "description": "Applicable for ExternalScript RouteStep. Specify string or expression with an absolute path to external script.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "steps.disableAutoCreateTargetFolder",
            "in": "query",
            "description": "Applicable for Publish RouteStep. Specify whether to disable auto create target folder for step.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "steps.filenameCollisionResolutionType",
            "in": "query",
            "description": "Applicable for Publish, Decompress RouteSteps. Specify file name collision resolution type.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "steps.postRoutingActionRenameExpression",
            "in": "query",
            "description": "Applicable for Publish, SendToPartner RouteSteps. Specify post transformation action rename expression for step.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "steps.postRoutingActionType",
            "in": "query",
            "description": "Applicable for Publish, SendToPartner RouteSteps. Specify post routing action types.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "steps.publishFileAs",
            "in": "query",
            "description": "Applicable for Publish RouteStep. Specify new file name or expression for a new file name.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "steps.targetAccountExpression",
            "in": "query",
            "description": "Applicable for Publish, SendToPartner RouteSteps. Specify targetAccountExpression property to sort by.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "steps.targetFolderExpression",
            "in": "query",
            "description": "Applicable for Publish RouteStep. Specify folder in the account to publish the file to.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "steps.targetFolderExpressionType",
            "in": "query",
            "description": "Applicable for Publish RouteStep. Specify target folder simple name or expression will be used.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "steps.triggerSubscription",
            "in": "query",
            "description": "Applicable for Publish RouteStep. Specify triggerSubscription property to sort by.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "steps.archivePolicyOnFailure",
            "in": "query",
            "description": "Applicable for SendToPartner RouteStep. Specify archivePolicyOnFailure property to sort by.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "DEFAULT",
                "ENABLED",
                "DISABLED"
              ]
            }
          },
          {
            "name": "steps.archivePolicyOnSuccess",
            "in": "query",
            "description": "Applicable for SendToPartner RouteStep. Specify archivePolicyOnSuccess property to sort by.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "DEFAULT",
                "ENABLED",
                "DISABLED"
              ]
            }
          },
          {
            "name": "steps.dataEncoding",
            "in": "query",
            "description": "Applicable for SendToPartner RouteStep. Specify dataEncoding property to sort by.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "steps.fileLabel",
            "in": "query",
            "description": "Applicable for SendToPartner RouteStep. Specify fileLabel property to sort by.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "steps.finalDestination",
            "in": "query",
            "description": "Applicable for SendToPartner RouteStep. Specify finalDestination property to sort by.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "steps.maxNumberOfRetries",
            "in": "query",
            "description": "Applicable for SendToPartner RouteStep. Specify maxNumberOfRetries property to sort by.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "steps.maxParallelClients",
            "in": "query",
            "description": "Applicable for SendToPartner RouteStep. Specify maxParallelClients property to sort by.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "steps.originator",
            "in": "query",
            "description": "Applicable for SendToPartner RouteStep. Specify originator property to sort by.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "steps.recordFormat",
            "in": "query",
            "description": "Applicable for SendToPartner RouteStep. Specify recordFormat property to sort by.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "steps.recordLength",
            "in": "query",
            "description": "Applicable for SendToPartner RouteStep. Specify recordLength property to sort by.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "steps.routeFileAs",
            "in": "query",
            "description": "Applicable for SendToPartner RouteStep. Specify routeFileAs property to sort by.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "steps.sleepBetweenRetries",
            "in": "query",
            "description": "Applicable for SendToPartner RouteStep. Specify sleepBetweenRetries property to sort by.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "steps.sleepIncrementBetweenRetries",
            "in": "query",
            "description": "Applicable for SendToPartner RouteStep. Specify sleepIncrementBetweenRetries property to sort by.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "steps.storeAndForwardMode",
            "in": "query",
            "description": "Applicable for SendToPartner RouteStep. Specify storeAndForwardMode property to sort by.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "steps.targetAccountExpressionType",
            "in": "query",
            "description": "Applicable for Publish, SendToPartner RouteSteps. Specify targetAccountExpressionType property to sort by.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "steps.transferProfileExpression",
            "in": "query",
            "description": "Applicable for SendToPartner RouteStep. Specify transferProfileExpression property to sort by.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "steps.transferProfileExpressionType",
            "in": "query",
            "description": "Applicable for SendToPartner RouteStep. Specify transferProfileExpressionType property to sort by.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "steps.transferSiteExpression",
            "in": "query",
            "description": "Applicable for SendToPartner RouteStep. Specify transferSiteExpression property to sort by.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "steps.transferSiteExpressionType",
            "in": "query",
            "description": "Applicable for SendToPartner RouteStep. Specify transferSiteExpressionType property to sort by.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "steps.triggerFileContent",
            "in": "query",
            "description": "Applicable for SendToPartner RouteStep. Specify triggerFileContent property to sort by.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "steps.triggerFileForEach",
            "in": "query",
            "description": "Applicable for SendToPartner RouteStep. Specify triggerFileForEach property to sort by.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "steps.triggerFileName",
            "in": "query",
            "description": "Applicable for SendToPartner RouteStep. Specify triggerFileName property to sort by.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "steps.triggerTargetAccountExpression",
            "in": "query",
            "description": "Applicable for SendToPartner RouteStep. Specify triggerTargetAccountExpression property to sort by.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "steps.triggerTargetAccountExpressionType",
            "in": "query",
            "description": "Applicable for SendToPartner RouteStep. Specify triggerTargetAccountExpressionType property to sort by.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "steps.triggerTransferProfileExpression",
            "in": "query",
            "description": "Applicable for SendToPartner RouteStep. Specify triggerTransferProfileExpression property to sort by.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "steps.triggerTransferProfileExpressionType",
            "in": "query",
            "description": "Applicable for SendToPartner RouteStep. Specify triggerTransferProfileExpressionType property to sort by.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "steps.triggerTransferSiteExpression",
            "in": "query",
            "description": "Applicable for SendToPartner RouteStep. Specify triggerTransferSiteExpression property to sort by.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "steps.triggerTransferSiteExpressionType",
            "in": "query",
            "description": "Applicable for SendToPartner RouteStep. Specify triggerTransferSiteExpressionType property to sort by.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "steps.triggerUploadFolder",
            "in": "query",
            "description": "Applicable for SendToPartner RouteStep. Specify triggerUploadFolder property to sort by.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "steps.uploadFolder",
            "in": "query",
            "description": "Applicable for SendToPartner RouteStep. Specify uploadFolder property to sort by.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "steps.userMessage",
            "in": "query",
            "description": "Applicable for SendToPartner RouteStep. Specify userMessage property to sort by.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "steps.virtualFilename",
            "in": "query",
            "description": "Applicable for SendToPartner RouteStep. Specify virtualFilename property to sort by.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns list with all routes.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RouteResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "tags": [
          "routes"
        ],
        "summary": "Create a route on the ST server.",
        "description": "It is possible to create three types of Route: TEMPLATE, COMPOSITE, SIMPLE.\n\nThe types are used as follows:\n\nTemplate route type: \n- it can have businessUnits property which is a list of business unit names appropriate for the Administrator who is creating this route\n- it may not have account property\n- it may not have subscriptions property\n- it may not have routeTemplate property\n\nComposite route type: \n- it is to have routeTemplate property pointing to the id of an existing Template Route visible by the account this route is created for \n- it can have account property which is the name of an existing account\n- it can have subscriptions property which is a list of subscription id-s which belongs to the account this route is created for\n- it may not have businessUnits property\n\nSimple Route:\n- it may not have businessUnits property\n- it may not have account property\n- it may not have subscriptions property\n- it may not have routeTemplate property\n\nThe route to be created may not have steps property. Steps are managed by the sub-resource steps.\n\nWhen creating a composite route type to  link a TEMPLATE route to an account, the new composite route properties to set are: name, type - COMPOSITE, routeTemplate - &lt;simple_route_id&gt;, failureEmailNotification, failureEmailTemplate,  failureEmailName, successEmailNotification, successEmailTemplate, successEmailName, conditionType, account - &lt;account or login name to link to&gt;, subscriptions - [\"account_subscribtion_id1\", \"account_subscribtion_id2\", ...].\n",
        "operationId": "createRoute",
        "requestBody": {
          "description": "Route object that needs to be added to the ST server.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Route"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created - the request has succeeded and a new resource has been created as a result of it."
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/routes/{id}": {
      "get": {
        "tags": [
          "routes"
        ],
        "summary": "Get route.",
        "description": "`Implementation note`: When trying to filter by fields exclusive to a certain route's step type, the steps.type property must be specified.\n",
        "operationId": "getRoute",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the Route.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Route's fields to return.",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Route's type to sort by.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "COMPOSITE",
                "TEMPLATE",
                "SIMPLE"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Route"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "tags": [
          "routes"
        ],
        "summary": "Replace an existing route.",
        "operationId": "updateRoute",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the route.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Route model.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Route"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content - successful operation."
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "delete": {
        "tags": [
          "routes"
        ],
        "summary": "Delete route.",
        "operationId": "deleteRoute",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the route.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content - successful operation."
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "head": {
        "tags": [
          "routes"
        ],
        "summary": "Check if route exists.",
        "operationId": "routeExists",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the route.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - successful operation."
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "patch": {
        "tags": [
          "routes"
        ],
        "summary": "Partially update an existing route.",
        "description": "Refer to the schema to see how to use the PATCH method or for more information about every step and available properties.\n\nApplicable only for route of type COMPOSITE:\n* account, subscriptions and routeTemplate.\n\nApplicable only for route of type TEMPLATE:\n* businessUnits.\n\nRead only fields for all route types:\n* type, id.\n\nApplicable for all route types:\n* when patching failureEmailNotification to true you must also supply either failureEmailTemplate or failureEmailName otherwise the request will fail.\n* when patching triggeringEmailNotification to true you must also supply either triggeringEmailTemplate or triggeringEmailName otherwise the request will fail.\n* when patching successEmailNotification to true you must also supply either successEmailTemplate or successEmailName otherwise the request will fail.\n\nsteps:\n* ExecuteRoute step is used with only routes of type TEMPLATE or COMPOSITE\n* All other steps are used with only routes of type SIMPLE\n",
        "operationId": "patchRoute",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the route that needs to be updated.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Route's properties that need to be updated for the specified route.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content - successful operation."
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/sessions": {
      "get": {
        "tags": [
          "sessions"
        ],
        "summary": "Get collection of the current sessions on the ST server.",
        "description": "`Permissions`: \"STATISTICS_MONITOR_ACTION\".\n",
        "operationId": "getSessions",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "The limit of the returned sessions. It should be positive integer and if not specified then return the first 100 sessions.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "The fields of session to return.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "The session type to filter by. Session types are: 'FTP', 'HTTP' or 'SSH'. If not specified then return for all types.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "localDaemonReturn",
            "in": "query",
            "description": "Determines whether to return local daemon sessions.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Session"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/sessions/{id}": {
      "get": {
        "tags": [
          "sessions"
        ],
        "summary": "Get session.",
        "description": "`Permissions`: \"STATISTICS_MONITOR_ACTION\".\n",
        "operationId": "getSession",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session id. Format should be FTP:session_id, SSH:session_id or HTTP:session_id\n",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "The fields of session to return.",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Session"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "delete": {
        "tags": [
          "sessions"
        ],
        "summary": "Kill a session.",
        "description": "`Permissions`: \"STATISTICS_MONITOR_ACTION\".\n",
        "operationId": "killSession",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session id. Format should be FTP:session_id, HTTP:session_id or SSH:session_id\n",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "localDaemonReturn",
            "in": "query",
            "description": "Try to kill as a local daemon session.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content - successful operation."
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/sessions/statistics/bandwidth": {
      "get": {
        "tags": [
          "sessions"
        ],
        "summary": "Get bandwidth usage statistic.",
        "description": "`Permissions`: \"STATISTICS_MONITOR_ACTION\".\n",
        "operationId": "readBandwidthInfoByLogin",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "The limit of the returned statistics records. It should be positive integer. If the limit is null, the maximum integer value is used.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "The fields of bandwidth usage statistic to return.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns bandwidth usage statistic information in JSON format",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SessionBandwidthStatisticsByLoginName"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/sessions/statistics/userClass": {
      "get": {
        "tags": [
          "sessions"
        ],
        "summary": "Get sessions information by user class.",
        "description": "`Permissions`: \"STATISTICS_MONITOR_ACTION\".\n",
        "operationId": "getSessionsInfo",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "The fields of sessions information by user class to return.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns sessions information in JSON format",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ServerUsageSnapshotByUserClass"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/sites": {
      "get": {
        "tags": [
          "sites"
        ],
        "summary": "Get sites collection.",
        "description": " `Permissions`: \"USER_ACCOUNT_FORM\", \"SERVICE_ACCOUNT_FORM\", \"TEMPLATES_FORM\". \n\n `Implementation note:` Searching for site by properties you must specify additional property **type**. \n\n Otherwise search is available only for common properties of sites (*maxConcurrentConnection*, *isDefault*, *accessLevel*, *account*, *siteTemplate*, *name*, *protocol*).\n\n When trying to filter by fields exclusive to a certain site type, the type property must be specified.",
        "operationId": "getSites",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "The limit of the listed rows. The limit parameter can has only nonnegative integer value. If the limit parameter is set to 0 or it is null then its value will be the value of the global server configuration parameter named `Webservices.EntriesPerPage` (which by default has value 100).",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The start row to list. The offset parameter can has only nonnegative integer value. If this parameter is not set, then it is considered 0.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "The site's fields to return.\n\n**Note:** The type field will always be present.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Discriminator to filter by.\n\n**Note:** Type custom can only be used to filter by fields exclusive to a custom site type.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "http",
                "ftp",
                "ssh",
                "pesit",
                "as2",
                "folder",
                "adhoc",
                "cd",
                "synchrony transfer",
                "custom"
              ]
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "The name of the site. Does not require type.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "protocol",
            "in": "query",
            "description": "The protocol of the site. Does not require type.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "maxConcurrentConnection",
            "in": "query",
            "description": "Concurrent connection for a site. Does not require type.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maximum": 65535,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "default",
            "in": "query",
            "description": "Whether site is default. Does not require type.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "accessLevel",
            "in": "query",
            "description": "Access level. Does not require type.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "PRIVATE",
                "BUSINESS_UNIT",
                "PUBLIC"
              ]
            }
          },
          {
            "name": "account",
            "in": "query",
            "description": "The account for which the site is created. Does not require type.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "siteTemplate",
            "in": "query",
            "description": "The name of the site template. Does not require type.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "alternativeAddresses.position",
            "in": "query",
            "description": "Alternative address position. Does not require type.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "alternativeAddresses.host",
            "in": "query",
            "description": "Alternative address host. Does not require type.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "alternativeAddresses.port",
            "in": "query",
            "description": "Alternative address port. Does not require type.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isSecure",
            "in": "query",
            "description": "Applicable for http, ftp, PeSIT sites. Specify if secure connection is used or not.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "useUri",
            "in": "query",
            "description": "Applicable for http site. Specify whether to define partner URL or not.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "uri",
            "in": "query",
            "description": "Applicable for http site. Specify the partner URL.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "host",
            "in": "query",
            "description": "Applicable for http, ftp, PeSIT, synchrony, ssh sites. Specify the remote site server host.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "port",
            "in": "query",
            "description": "Applicable for http, synchrony, PeSIT, ssh, ftp sites. Specify the remote site server port.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pesitId",
            "in": "query",
            "description": "Applicable for PeSIT site. Specify the PeSIT ID.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "downloadFolder",
            "in": "query",
            "description": "Applicable for http, ftp, ssh, folder monitor sites. Specify the download folder.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "downloadPattern",
            "in": "query",
            "description": "Applicable for http, ftp, ssh, folder monitor sites. Specify the download pattern.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "uploadFolder",
            "in": "query",
            "description": "Applicable for http, ftp, ssh, folder monitor sites. Specify the upload folder.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "uploadFolderOverridable",
            "in": "query",
            "description": "Applicable for http, ftp, ssh, folder monitor sites. Defines if the upload folder can be modified by the Send To Partner routing step.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "userName",
            "in": "query",
            "description": "Applicable for http, cd, ftp, ssh sites. Specify the site login username.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "usePassword",
            "in": "query",
            "description": "Applicable for http, cd, ftp, ssh sites. Specify if the login password should be set.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "usePasswordExpr",
            "in": "query",
            "description": "Applicable for http, cd, ssh, synchrony, ftp sites. Specify whether to have password expressions or not.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "transferMode",
            "in": "query",
            "description": "Applicable for http, cd, ftp, ssh sites. Specify the transfer mode.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "BINARY",
                "ASCII"
              ]
            }
          },
          {
            "name": "fipsMode",
            "in": "query",
            "description": "Applicable for http, as2, PeSIT, ftp, ssh sites. Specify if the FIPS Transfer Mode.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "dmz",
            "in": "query",
            "description": "Applicable for http, as2, PeSIT, ssh, ftp sites. Specify the remote site network zone.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "downloadFolderAdvancedExpressionEnabled",
            "in": "query",
            "description": "Applicable for http, ftp, ssh, folder monitor sites. Whether the download folder is evaluated using expression language.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "downloadPatternAdvancedExpressionEnabled",
            "in": "query",
            "description": "Applicable for http, ftp, ssh, folder monitor sites. Whether the download pattern is evaluated using expression language.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "requestMode",
            "in": "query",
            "description": "Applicable for http site. Request mode of the site.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "POST"
              ]
            }
          },
          {
            "name": "cipherSuites",
            "in": "query",
            "description": "Applicable for http, as2, ftp, ssh, PeSIT sites. Cipher suites for a site.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "protocols",
            "in": "query",
            "description": "Applicable for http, as2, ftp, ssh, PeSIT sites. Protocols for a site.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "postTransmissionActions.deleteOnTempFailOut",
            "in": "query",
            "description": "Applicable for http, ftp, ssh, folder monitor sites. Whether to delete the destination file on temporary failure after the transmission.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "true"
              ]
            }
          },
          {
            "name": "postTransmissionActions.deleteOnSuccessIn",
            "in": "query",
            "description": "Applicable for http, ftp, ssh, folder monitor sites. Whether to delete the source file on success after the transmission.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "true"
              ]
            }
          },
          {
            "name": "postTransmissionActions.deleteOnPermFailOut",
            "in": "query",
            "description": "Applicable for http, ftp, ssh, folder monitor sites. Whether to delete the destination file on failure after the transmission.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "true"
              ]
            }
          },
          {
            "name": "postTransmissionActions.deleteOnPermFailIn",
            "in": "query",
            "description": "Applicable for http, ftp, ssh, folder monitor sites. Whether to delete the source file on failure after the transmission.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "true"
              ]
            }
          },
          {
            "name": "postTransmissionActions.doAsOut",
            "in": "query",
            "description": "Applicable for http, ftp, ssh, folder monitor sites. Specify a value to send the file with a different name.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "postTransmissionActions.doAsIn",
            "in": "query",
            "description": "Applicable for http, ftp, ssh, folder monitor sites. Specify a value to receive the file with a different name.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fromEmailAddress",
            "in": "query",
            "description": "Applicable for adhoc site. Specify the From email address.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "toEmailAddresses",
            "in": "query",
            "description": "Applicable for adhoc site. Specify the TO email addresses.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ccEmailAddresses",
            "in": "query",
            "description": "Applicable for adhoc site. Specify the CC email addresses.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "bccEmailAddresses",
            "in": "query",
            "description": "Applicable for adhoc site. Specify the BCC email addresses.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subject",
            "in": "query",
            "description": "Applicable for adhoc site. Specify the subject for adhoc site.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "body",
            "in": "query",
            "description": "Applicable for adhoc site. Specify the message to be sent.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "securityLevel",
            "in": "query",
            "description": "Applicable for adhoc site. Specify the delivery method of the site.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "ANONYMOUS_LINK",
                "CHALLENGED_LINK",
                "EXISTING_ACCOUNT",
                "ENROLL_UNLICENSED",
                "ENROLL_LICENSED"
              ]
            }
          },
          {
            "name": "notificationTemplate",
            "in": "query",
            "description": "Applicable for adhoc site. Specify the notification mail template of the site.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "challenge",
            "in": "query",
            "description": "Applicable for adhoc site. Specify secret question.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expiration",
            "in": "query",
            "description": "Applicable for adhoc site. Specify the site expiration interval in minutes.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sendAs",
            "in": "query",
            "description": "Applicable for adhoc site. Specify a value to send the file with a different name.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sendFileAsAttachment",
            "in": "query",
            "description": "Applicable for adhoc site.  Specify whether to send file as an email attachment.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "senderAs2Id",
            "in": "query",
            "description": "Applicable for as2 site. Specify the server site AS2 name.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "senderEmail",
            "in": "query",
            "description": "Applicable for as2 site. Specify the server site email.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "receiverAs2Id",
            "in": "query",
            "description": "Applicable for as2 site. Specify the remote site AS2 name.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "receiverEmail",
            "in": "query",
            "description": "Applicable for as2 site. Specify the remote site email.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "as2Url",
            "in": "query",
            "description": "Applicable for as2 site. Specify the remote site URL.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "transferSettings.doAsOut",
            "in": "query",
            "description": "Applicable for as2 site. Specify a value to send the file with a different name.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "transferSettings.doAsIn",
            "in": "query",
            "description": "Applicable for as2 site. Specify a value to receive the file with a different name.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "transferSettings.mimeType",
            "in": "query",
            "description": "Applicable for as2 site. Specify the message MIME Type.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "transferSettings.subject",
            "in": "query",
            "description": "Applicable for as2 site. Specify the email subject.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "transferSettings.requireSign",
            "in": "query",
            "description": "Applicable for as2 site. Specify if Signature is required.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "transferSettings.requireEncrypt",
            "in": "query",
            "description": "Applicable for as2 site. Specify if Encryption is required.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "transferSettings.requireSsl",
            "in": "query",
            "description": "Applicable for as2 site. Specify if SSL Connection is required.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "transferSettings.enableChunked",
            "in": "query",
            "description": "Applicable for as2 site. Specify if file chunking is enabled.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "transferSettings.as2MdnReturnUrl",
            "in": "query",
            "description": "Applicable for as2 site. Specify if the receipt request should be asynchronous or synchronous.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "transferSettings.as2MdnUrl",
            "in": "query",
            "description": "Applicable for as2 site. Specify if site should request receipt for all transfers.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "enum": [
                true
              ]
            }
          },
          {
            "name": "transferSettings.encrypt",
            "in": "query",
            "description": "Applicable for as2 site. Specify encryption.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "transferSettings.sign",
            "in": "query",
            "description": "Applicable for as2 site. Specify signing.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "transferSettings.compress",
            "in": "query",
            "description": "Applicable for as2 site. Specify if the message should be compressed.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "transferSettings.as2MdnOptions",
            "in": "query",
            "description": "Applicable for as2 site. Specify mdn options.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "transferSettings.transferTimeout",
            "in": "query",
            "description": "Applicable for as2 site. Specify the transfer timeout in seconds.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "useCertificate",
            "in": "query",
            "description": "Applicable for cd site. Specify if the login certificate should be set.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "localServerName",
            "in": "query",
            "description": "Applicable for cd site. Specify the local server name.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "localServerPort",
            "in": "query",
            "description": "Applicable for cd site. Specify the local server port.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "submitScriptWithinFile",
            "in": "query",
            "description": "Applicable for cd site. Specify if the script contains unicode characters and has to be submitted within a file.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "recScript",
            "in": "query",
            "description": "Applicable for cd site. Specify the receive script.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sendScript",
            "in": "query",
            "description": "Applicable for cd site. Specify the send script.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ccc",
            "in": "query",
            "description": "Applicable for ftp site. Clear command channel.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "tlsShutdownCcc",
            "in": "query",
            "description": "Applicable for ftp site. TLC Shutdown on CCC.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "uploadCommand",
            "in": "query",
            "description": "Applicable for ftp site. Specify the FTP upload command that will be used when server initiated transfer is executed.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "STOR",
                "APPE"
              ]
            }
          },
          {
            "name": "preferredMethod",
            "in": "query",
            "description": "Applicable for ftp site. Specify the preferred FTP command when entering FTP passive mode.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "default",
                "PASV",
                "EPSV"
              ]
            }
          },
          {
            "name": "siteCommand",
            "in": "query",
            "description": "Applicable for ftp site. Specify the SITE commands.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "activeMode",
            "in": "query",
            "description": "Applicable for ftp site. Define whether the Active Connection Mode is enabled.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "matchAnyLineTerminators",
            "in": "query",
            "description": "Applicable for ftp site. Tanscode any line terminators in ASCII mode.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "enum": [
                true
              ]
            }
          },
          {
            "name": "hostnameVerification",
            "in": "query",
            "description": "Applicable for ftp site. Verify if the remote host taking part of a data connection is the same as the host to which the control connection is attached.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "DEFAULT",
                "ENABLED",
                "DISABLED"
              ]
            }
          },
          {
            "name": "postTransmissionActions.moveOnTempFailOut",
            "in": "query",
            "description": "Applicable for ftp, ssh, folder monitor sites. Specify a value to rename the file after transmission or move it to a different folder on temporary failure.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "postTransmissionActions.moveOnPermFailOut",
            "in": "query",
            "description": "Applicable for ftp, ssh, folder monitor sites. Specify a value to rename the file after transmission or move it to a different folder on failure.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "postTransmissionActions.moveOnSuccessOut",
            "in": "query",
            "description": "Applicable for ftp, ssh, folder monitor sites. Specify a value to rename the file after transmission or move it to a different folder on success.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "postTransmissionActions.moveOnPermFailIn",
            "in": "query",
            "description": "Applicable for ftp, ssh, folder monitor sites. Specify a value to rename the file after transmission or move it to a different folder on failure.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "postTransmissionActions.moveOnSuccessIn",
            "in": "query",
            "description": "Applicable for ftp, ssh, folder monitor sites. Specify a value to rename the file after transmission or move it to a different folder on success.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fingerPrint",
            "in": "query",
            "description": "Applicable for ssh site. Specify the fingerprint.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "verifyFinger",
            "in": "query",
            "description": "Applicable for ssh site. Defines whther to verify fingerprint for this site or not.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "socketTimeout",
            "in": "query",
            "description": "Applicable for ssh site. Specify the maximum number of seconds the server waits to read a block of data from the partner server, or write a block of data to the partner server.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "socketBufferSize",
            "in": "query",
            "description": "Applicable for ssh site. Specify the size of the receive buffer in bytes used from the socket opened during the transfer.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "socketSendBufferSize",
            "in": "query",
            "description": "Applicable for ssh site. Specify the size of the send buffer in bytes used from the socket opened during the transfer.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "downloadPatternType",
            "in": "query",
            "description": "Applicable for ssh, folder monitor sites. Specify download pattern type.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "uploadPermissions",
            "in": "query",
            "description": "Applicable for ssh site. Specify the upload permissions.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "bufferSize",
            "in": "query",
            "description": "Applicable for ssh, PeSIT sites. Specify the size of the buffer in bytes used for reading from the local file system when performing the transfer.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "blockSize",
            "in": "query",
            "description": "Applicable for ssh site. Specify the SFTP block size value used for the transfer.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "tcpNoDelay",
            "in": "query",
            "description": "Applicable for ssh site. Specify tcpNoDelay for the site.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "allowedMacs",
            "in": "query",
            "description": "Applicable for ssh site. Specify allowedMacs for the site.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "keyExchangeAlgorithms",
            "in": "query",
            "description": "Applicable for ssh site. Specify key exchange algorithms for ssh site.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "publicKeys",
            "in": "query",
            "description": "Applicable for ssh site. Specify public keys for ssh site.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "postTransmissionActions.doMoveOverwriteIn",
            "in": "query",
            "description": "Applicable for ssh site. Specify doMoveOverwriteIn property.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "postTransmissionActions.doMoveOverwriteOut",
            "in": "query",
            "description": "Applicable for ssh site. Specify doMoveOverwriteOut property.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "preconnectionPartnerId",
            "in": "query",
            "description": "Applicable for PeSIT site. Specify the partner id used for Pre-Connection.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "usePreconnectionPartnerPassword",
            "in": "query",
            "description": "Applicable for PeSIT site. Specify whether to use Pre-Connection partner password or not.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "usePreconnectionPartnerPasswordExpr",
            "in": "query",
            "description": "Applicable for PeSIT site. Specify whether to have Pre-Connection partner password expressions or not.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "preconnectionServerId",
            "in": "query",
            "description": "Applicable for PeSIT site. Specify the server id used for Pre-Connection.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "usePreconnectionServerPassword",
            "in": "query",
            "description": "Applicable for PeSIT site. Specify whether to use Pre-Connection server password or not.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "usePreconnectionServerPasswordExpr",
            "in": "query",
            "description": "Applicable for PeSIT site. Specify whether to have Pre-Connection server password expressions or not.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "configurePreconnection",
            "in": "query",
            "description": "Applicable for PeSIT site. Specify if Pre-Connection should be set.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "useServerPassword",
            "in": "query",
            "description": "Applicable for PeSIT site. Specify if the server password should be set.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "useServerPasswordExpr",
            "in": "query",
            "description": "Applicable for PeSIT site. Specify whether to have server password expressions or not.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "usePartnerPassword",
            "in": "query",
            "description": "Applicable for PeSIT site. Specify if the partner password should be set.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "usePartnerPasswordExpr",
            "in": "query",
            "description": "Applicable for PeSIT site. Specify whether to have partner password expressions or not.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "checkpointInterval",
            "in": "query",
            "description": "Applicable for PeSIT site. Specify the checkpoint interval.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "checkpointWindow",
            "in": "query",
            "description": "Applicable for PeSIT site. Specify the checkpoint window.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "resyncAllowed",
            "in": "query",
            "description": "Applicable for PeSIT site. Specify if the resync is allowed.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "compression",
            "in": "query",
            "description": "Applicable for PeSIT site. Specify the transfer compression.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "none",
                "vertical",
                "horizontal",
                "both"
              ]
            }
          },
          {
            "name": "verifyCert",
            "in": "query",
            "description": "Applicable for PeSIT, http, ftp sites.  Whether certificate is verified for this site.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "cftCompatibleSslMode",
            "in": "query",
            "description": "Applicable for PeSIT site. Enable Legasy transfer CFT compatible SSL mode.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "receiveMessage",
            "in": "query",
            "description": "Applicable for PeSIT site. Specify a user receive message.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sendMessage",
            "in": "query",
            "description": "Applicable for PeSIT site. Specify a user send message.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "originator",
            "in": "query",
            "description": "Applicable for PeSIT site. Use this field to override the original sender (PI61) of the transfer.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "finalDestination",
            "in": "query",
            "description": "Applicable for PeSIT site. Use this field to override the final destination (PI62) of the transfer.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "storeAndForwardMode",
            "in": "query",
            "description": "Applicable for PeSIT site. All the advanced PeSIT settings are included or all are ommitted.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "START_NEW",
                "PRESERVE"
              ]
            }
          },
          {
            "name": "ptcpConnections",
            "in": "query",
            "description": "Applicable for PeSIT site. Specify the number of parallel TCP connections.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "ptcpPacketSize",
            "in": "query",
            "description": "Applicable for PeSIT site. Specify the TCP packet size",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "socketSendReceiveBuffersize",
            "in": "query",
            "description": "Applicable for PeSIT site. Specifies the TCP Socket maximum send and receive buffer size in bytes.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "ptcpConnectRetryCount",
            "in": "query",
            "description": "Applicable for PeSIT site. Specifies the maximum times the SecureTransport will attempt to re-establish a connection with the remote server.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "connectionTimeout",
            "in": "query",
            "description": "Applicable for PeSIT site. Overwrites the value specified in Pesit.Client.Inactivity.Timeout configuration option. It is used to determine how much time (in seconds) ST will wait for acknowledgment command for transfer end, when pushing file to a server, when ST acts as a PeSIT client.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "uploadFolderExpressionSupport",
            "in": "query",
            "description": "Applicable for folder monitor site. Whether the upload folder is evaluated using expression language.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "uploadFolderAutocreate",
            "in": "query",
            "description": "Applicable for folder monitor site. Whether the Upload Folder will be automatically created if it doesn't exist.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "downloadPatternCaseSensitive",
            "in": "query",
            "description": "Applicable for folder monitor site. Whether the subfolder download pattern is case sensitive.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "downloadSubfolderPattern",
            "in": "query",
            "description": "Applicable for folder monitor site. Specify the pattern used to match folder names to determine whether to apply the download pattern to the folder.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "downloadSubfolderPatternType",
            "in": "query",
            "description": "Applicable for folder monitor site. Specify the dowlnload pattern type. Pattern matching expression supports 'glob' and 'regex' syntaxes.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "downloadSubfolderPatternCaseSensitive",
            "in": "query",
            "description": "Applicable for folder monitor site. Whether the subfolder download pattern is case sensitive.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "downloadSubfolderMaxDepth",
            "in": "query",
            "description": "Applicable for folder monitor site. Specify the maximum depth of the subfolders to monitor.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "username",
            "in": "query",
            "description": "Applicable for synchrony site. Specify the site login username.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "partner",
            "in": "query",
            "description": "Applicable for synchrony site. Specify partner property for synchrony site.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "transferProfile",
            "in": "query",
            "description": "Applicable for synchrony site. Specify transfer profile for synchrony site.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "additionalProperties.appcycid",
            "in": "query",
            "description": "Applicable for synchrony site.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "additionalProperties.fName",
            "in": "query",
            "description": "Applicable for synchrony site.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "additionalProperties.appobjid",
            "in": "query",
            "description": "Applicable for synchrony site.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "additionalProperties.direction",
            "in": "query",
            "description": "Applicable for synchrony site.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "additionalProperties.freeMsg",
            "in": "query",
            "description": "Applicable for synchrony site.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "additionalProperties.ida",
            "in": "query",
            "description": "Applicable for synchrony site.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "additionalProperties.ipart",
            "in": "query",
            "description": "Applicable for synchrony site.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "additionalProperties.maxDate",
            "in": "query",
            "description": "Applicable for synchrony site.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "additionalProperties.maxTime",
            "in": "query",
            "description": "Applicable for synchrony site.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "additionalProperties.minDate",
            "in": "query",
            "description": "Applicable for synchrony site.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "additionalProperties.minTime",
            "in": "query",
            "description": "Applicable for synchrony site.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "additionalProperties.nfName",
            "in": "query",
            "description": "Applicable for synchrony site.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "additionalProperties.nIdf",
            "in": "query",
            "description": "Applicable for synchrony site.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "additionalProperties.pri",
            "in": "query",
            "description": "Applicable for synchrony site.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "additionalProperties.rappl",
            "in": "query",
            "description": "Applicable for synchrony site.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "additionalProperties.rUser",
            "in": "query",
            "description": "Applicable for synchrony site.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "additionalProperties.sappl",
            "in": "query",
            "description": "Applicable for synchrony site.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "additionalProperties.state",
            "in": "query",
            "description": "Applicable for synchrony site.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "additionalProperties.sUser",
            "in": "query",
            "description": "Applicable for synchrony site.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "additionalProperties.trk",
            "in": "query",
            "description": "Applicable for synchrony site.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "additionalAttributes.key",
            "in": "query",
            "description": "Search by userVars key.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "additionalAttributes.value",
            "in": "query",
            "description": "Search by userVars value.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SiteResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "tags": [
          "sites"
        ],
        "summary": "Create a site.",
        "description": "`Permissions`: \"USER_ACCOUNT_FORM\", \"SERVICE_ACCOUNT_FORM\", \"TEMPLATES_FORM\".\n\n**Note:** All fields of type string for the internal transfer sites (besides AS2 and System to Human) support Expression Language (EL), except those regarding certificates and enum ones.\nRefer to the schema for each transfer site. Valid expressions are:\n* custom properties passed in a REST API Pull/Push request via the '/transfers/operations' resource - \"${DXAGENT_TRANSFERSAPI_*}\"\n* SecureTransport specific named variable sets - \"${stenv.variable}\" and \"${env['variable']}\"\n* predefined functions using EL - \"{concat(\"var1\", \"var2\")}}\"\n\n**Note**: To create a transfer site and use the placeholder default values of the selected site template, add a trailing hyphen to the placeholder name: \"testPlaceholder-\": \"\"\n              Use of default placeholder values is applicable with the following transfer sites only: Connect:Direct, Synchrony, File Services interface protocol.\n",
        "operationId": "createSite",
        "requestBody": {
          "description": "Site that needs to be created.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/sites_body"
              },
              "examples": {
                "HTTP": {
                  "$ref": "#/components/examples/HTTPSiteExample"
                },
                "FTP": {
                  "$ref": "#/components/examples/FTPSiteExample"
                },
                "SSH": {
                  "$ref": "#/components/examples/SSHSiteExample"
                },
                "PeSIT": {
                  "$ref": "#/components/examples/PeSITSiteExample"
                },
                "AS2": {
                  "$ref": "#/components/examples/AS2SiteExample"
                },
                "FolderMonitor": {
                  "$ref": "#/components/examples/FolderMonitorSiteExample"
                },
                "Adhoc": {
                  "$ref": "#/components/examples/AdhocSiteExample"
                },
                "ConnectDirect": {
                  "$ref": "#/components/examples/ConnectDirectSiteExample"
                },
                "Synchrony": {
                  "$ref": "#/components/examples/SynchronySiteExample"
                },
                "Custom": {
                  "$ref": "#/components/examples/CustomSiteExample"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created - the request has succeeded and a new resource has been created as a result of it."
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "409": {
            "description": "Conflict - duplicate entity."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/sites/{id}": {
      "get": {
        "tags": [
          "sites"
        ],
        "summary": "Get a site.",
        "description": "`Permissions`: \"USER_ACCOUNT_FORM\", \"SERVICE_ACCOUNT_FORM\", \"TEMPLATES_FORM\".\n\n`Implementation note`: When trying to filter by fields exclusive to a certain site type, the type property must be specified.\n",
        "operationId": "getSite",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the site.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "The site's fields to return.\n\n**Note:** The type field will always be present.\n",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Discriminator to filter by.\n\n**Note:** Type custom can only be used to filter by fields exclusive to a custom site type.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "http",
                "ftp",
                "ssh",
                "pesit",
                "as2",
                "folder",
                "adhoc",
                "cd",
                "synchrony transfer",
                "custom"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200_3"
                },
                "examples": {
                  "HTTP": {
                    "$ref": "#/components/examples/HTTPSiteExample"
                  },
                  "FTP": {
                    "$ref": "#/components/examples/FTPSiteExample"
                  },
                  "SSH": {
                    "$ref": "#/components/examples/SSHSiteExample"
                  },
                  "PeSIT": {
                    "$ref": "#/components/examples/PeSITSiteExample"
                  },
                  "AS2": {
                    "$ref": "#/components/examples/AS2SiteExample"
                  },
                  "FolderMonitor": {
                    "$ref": "#/components/examples/FolderMonitorSiteExample"
                  },
                  "Adhoc": {
                    "$ref": "#/components/examples/AdhocSiteExample"
                  },
                  "ConnectDirect": {
                    "$ref": "#/components/examples/ConnectDirectSiteExample"
                  },
                  "Synchrony": {
                    "$ref": "#/components/examples/SynchronySiteExample"
                  },
                  "Custom": {
                    "$ref": "#/components/examples/CustomSiteExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "tags": [
          "sites"
        ],
        "summary": "Replace an existing site.",
        "description": "`Permissions`: \"USER_ACCOUNT_FORM\", \"SERVICE_ACCOUNT_FORM\", \"TEMPLATES_FORM\".\n\n**Note:** All fields of type string for the internal transfer sites (besides AS2 and System to Human) support Expression Language (EL), except those regarding certificatesand enum ones.\nRefer to the schema for each transfer site. Valid expressions are:\n* custom properties passed in a REST API Pull/Push request via the '/transfers/operations' resource - \"${DXAGENT_TRANSFERSAPI_*}\"\n* SecureTransport specific named variable sets - \"${stenv.variable}\" and \"${env['variable']}\"\n* predefined functions using EL - \"{concat(\"var1\", \"var2\")}}\"\n\n**Note**: To update a transfer site and use the placeholder default values of the selected site template, add a trailing hyphen to the placeholder name: \"testPlaceholder-\": \"\"\n              Use of default placeholder values is applicable with the following transfer sites only: Connect:Direct, Synchrony, File Services interface protocol.\n",
        "operationId": "updateSiteProperties",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the site.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Site that needs to be updated for the specified site.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/sites_id_body"
              },
              "examples": {
                "HTTP": {
                  "$ref": "#/components/examples/HTTPSiteExample"
                },
                "FTP": {
                  "$ref": "#/components/examples/FTPSiteExample"
                },
                "SSH": {
                  "$ref": "#/components/examples/SSHSiteExample"
                },
                "PeSIT": {
                  "$ref": "#/components/examples/PeSITSiteExample"
                },
                "AS2": {
                  "$ref": "#/components/examples/AS2SiteExample"
                },
                "FolderMonitor": {
                  "$ref": "#/components/examples/FolderMonitorSiteExample"
                },
                "Adhoc": {
                  "$ref": "#/components/examples/AdhocSiteExample"
                },
                "ConnectDirect": {
                  "$ref": "#/components/examples/ConnectDirectSiteExample"
                },
                "Synchrony": {
                  "$ref": "#/components/examples/SynchronySiteExample"
                },
                "Custom": {
                  "$ref": "#/components/examples/CustomSiteExample"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content - successful operation."
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "409": {
            "description": "Conflict - duplicate entity."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "delete": {
        "tags": [
          "sites"
        ],
        "summary": "Delete a site.",
        "description": "`Permissions`: \"USER_ACCOUNT_FORM\", \"SERVICE_ACCOUNT_FORM\", \"TEMPLATES_FORM\".\n",
        "operationId": "deleteSite",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the site.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content - successful operation."
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "head": {
        "tags": [
          "sites"
        ],
        "summary": "Check if site exists.",
        "description": "`Permissions`: \"USER_ACCOUNT_FORM\", \"SERVICE_ACCOUNT_FORM\", \"TEMPLATES_FORM\".\n",
        "operationId": "siteExists",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the site.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - successful operation."
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "patch": {
        "tags": [
          "sites"
        ],
        "summary": "Partially update an existing site.",
        "description": "`Permissions`: \"USER_ACCOUNT_FORM\", \"SERVICE_ACCOUNT_FORM\", \"TEMPLATES_FORM\".\n\n**Note:** All fields of type string for the internal transfer sites (besides AS2 and System to Human) support Expression Language (EL), except those regarding certificatesand enum ones.\nRefer to the schema for each transfer site. Valid expressions are:\n* custom properties passed in a REST API Pull/Push request via the '/transfers/operations' resource - \"${DXAGENT_TRANSFERSAPI_*}\"\n* SecureTransport specific named variable sets - \"${stenv.variable}\" and \"${env['variable']}\"\n* predefined functions using EL - \"{concat(\"var1\", \"var2\")}}\"\n\n**Note**: To update a transfer site and use the placeholder default values of the selected site template, add a trailing hyphen to the placeholder name: \"testPlaceholder-\": \"\"\n              Use of default placeholder values is applicable with the following transfer sites only: Connect:Direct, Synchrony, File Services interface protocol.\n",
        "operationId": "partiallyUpdateSiteProperties",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the site that needs to be updated.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Site's properties that need to be updated for the specified id.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content - successful operation."
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "409": {
            "description": "Conflict - duplicate entity."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/sites/operations": {
      "post": {
        "tags": [
          "sites"
        ],
        "summary": "Tests site operations.",
        "description": "`Permissions`: \"USER_ACCOUNT_FORM\", \"SERVICE_ACCOUNT_FORM\", \"TEMPLATES_FORM\".\n",
        "operationId": "siteOperations",
        "parameters": [
          {
            "name": "operation",
            "in": "query",
            "description": "Operation type.",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "testConnection",
                "listRemoteFolder"
              ]
            }
          },
          {
            "name": "includesFolderNamesInResult",
            "in": "query",
            "description": "Defines whether folder names to be included in list operation response. Available for listRemoteFolder operation only.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "folderToList",
            "in": "query",
            "description": "Defines the remote folder on which listRemoteFolder operation will be performed. If the parameter is set to downloadFolder - list operation will be performed on download folder, otherwise operation will be performed on upload folder. Available for listRemoteFolder operation only.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "downloadFolder",
                "uploadFolder"
              ],
              "default": "downloadFolder"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The limit of the listed files and folders. If the limit parameter is set to 0 or it is null then its value will be the value of the global server configuration parameter named 'ListRemoteFolder.Result.Files.Limit' (which by default has value 50). If the limit parameter is set to -1 - all files and folders will be included in list operation result. Available for listRemoteFolder operation only.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "The properties that need to be included for the test operation for the specified site.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Connection"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200_4"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/siteTemplates": {
      "get": {
        "tags": [
          "siteTemplates"
        ],
        "summary": "Get siteTemplates collection.",
        "description": "`Permissions`: \"Site Templates\"\n\n`Implementation note:` Searching for site template by properties you must specify additional property **type**.\nOtherwise search is available only for common properties of site templates (name, protocol).\n\nWhen trying to filter by fields exclusive to a certain site template type, the type property must be specified.\n",
        "operationId": "getSiteTemplates",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "The name of the Site template.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The limit of the listed rows. The limit parameter can has only nonnegative integer value. If the limit parameter is set to 0 or it is null then its value will be the value of the global server configuration parameter named `Webservices.EntriesPerPage` (which by default has value 100).",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The start row to list. The offset parameter can has only nonnegative integer value. If this parameter is not set, then it is considered 0.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Site template's fields to return.\n\n**Note:** The type field will always be present.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "The type of the site template.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "cd",
                "synchrony transfer",
                "custom"
              ]
            }
          },
          {
            "name": "protocol",
            "in": "query",
            "description": "The protocol of the site template.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "localServerName",
            "in": "query",
            "description": "Applicable for cd site template. Specify the name of the site template.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "localServerPort",
            "in": "query",
            "description": "Applicable for cd site template. Specify the port of the site template.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "submitScriptWithinFile",
            "in": "query",
            "description": "Applicable for cd site. Specify if the script contains unicode characters and has to be submitted within a file.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "recScript",
            "in": "query",
            "description": "Applicable for cd site template. Specify the receive script of the site template.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sendScript",
            "in": "query",
            "description": "Applicable for cd site template. Specify the send script of the site template.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userName",
            "in": "query",
            "description": "Applicable for cd, synchrony site templates. Specify the username of the site template.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "useCertificate",
            "in": "query",
            "description": "Applicable for cd site template. Whether to use certificate for login.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "usePassword",
            "in": "query",
            "description": "Applicable for cd site template. Whether to use password for login.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "usePasswordExpr",
            "in": "query",
            "description": "Applicable for cd, synchrony site templates. Whether to use password expressions.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "transferMode",
            "in": "query",
            "description": "Applicable for cd site template. Specify the transfer mode of the site template.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "Auto detect",
                "ASCII_MODE",
                "IMAGE_MODE"
              ]
            }
          },
          {
            "name": "host",
            "in": "query",
            "description": "Applicable for synchrony site template. Specify the host of the site template.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "port",
            "in": "query",
            "description": "Applicable for synchrony site template. Specify the port of the site template.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "partner",
            "in": "query",
            "description": "Applicable for synchrony site template. Specify the partner of the site template.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "transferProfile",
            "in": "query",
            "description": "Applicable for synchrony site template. Specify the transfer profile of the site template.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "additionalProperties.appcycid",
            "in": "query",
            "description": "Applicable for synchrony site template.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "additionalProperties.fName",
            "in": "query",
            "description": "Applicable for synchrony site template.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "additionalProperties.appobjid",
            "in": "query",
            "description": "Applicable for synchrony site template.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "additionalProperties.direction",
            "in": "query",
            "description": "Applicable for synchrony site template.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "additionalProperties.freeMsg",
            "in": "query",
            "description": "Applicable for synchrony site template.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "additionalProperties.ida",
            "in": "query",
            "description": "Applicable for synchrony site template.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "additionalProperties.ipart",
            "in": "query",
            "description": "Applicable for synchrony site template.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "additionalProperties.maxDate",
            "in": "query",
            "description": "Applicable for synchrony site template.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "additionalProperties.maxTime",
            "in": "query",
            "description": "Applicable for synchrony site template.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "additionalProperties.minDate",
            "in": "query",
            "description": "Applicable for synchrony site template.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "additionalProperties.minTime",
            "in": "query",
            "description": "Applicable for synchrony site template.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "additionalProperties.nfName",
            "in": "query",
            "description": "Applicable for synchrony site template.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "additionalProperties.nIdf",
            "in": "query",
            "description": "Applicable for synchrony site template.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "additionalProperties.pri",
            "in": "query",
            "description": "Applicable for synchrony site template.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "additionalProperties.rappl",
            "in": "query",
            "description": "Applicable for synchrony site template.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "additionalProperties.rUser",
            "in": "query",
            "description": "Applicable for synchrony site template.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "additionalProperties.sappl",
            "in": "query",
            "description": "Applicable for synchrony site template.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "additionalProperties.state",
            "in": "query",
            "description": "Applicable for synchrony site template.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "additionalProperties.sUser",
            "in": "query",
            "description": "Applicable for synchrony site template.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "additionalProperties.trk",
            "in": "query",
            "description": "Applicable for synchrony site template.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "additionalAttributes.key",
            "in": "query",
            "description": "Search by userVars key.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "additionalAttributes.value",
            "in": "query",
            "description": "Search by userVars value.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SiteTemplateResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "tags": [
          "siteTemplates"
        ],
        "summary": "Create a siteTemplate.",
        "description": "`Permissions`: \"Site Templates\"\n",
        "operationId": "createSiteTemplate",
        "requestBody": {
          "description": "Site template that needs to be created.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/siteTemplates_body"
              },
              "examples": {
                "connectDirectSiteTemplate": {
                  "$ref": "#/components/examples/connectDirectSiteTemplate"
                },
                "synchronySiteTemplate": {
                  "$ref": "#/components/examples/synchronySiteTemplate"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created - the request has succeeded and a new resource has been created as a result of it."
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/siteTemplates/{id}": {
      "get": {
        "tags": [
          "siteTemplates"
        ],
        "summary": "Get a site template.",
        "description": "`Permissions`: \"Site Templates\"\n\n`Imlementation note`: When trying to filter by fields exclusive to a certain site template type, the type property must be specified.\n",
        "operationId": "getSiteTemplate",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id to search for.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "The site template's fields to return.\n\n**Note:** The type field will always be present.\n",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "The type of the site template.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "cd",
                "synchrony transfer",
                "custom"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200_5"
                },
                "examples": {
                  "connectDirectSiteTemplate": {
                    "$ref": "#/components/examples/connectDirectSiteTemplate"
                  },
                  "synchronySiteTemplate": {
                    "$ref": "#/components/examples/synchronySiteTemplate"
                  },
                  "customSiteTemplate": {
                    "$ref": "#/components/examples/CustomSiteTemplateExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "tags": [
          "siteTemplates"
        ],
        "summary": "Replace an existing site template properties.",
        "description": "`Permissions`: \"Site Templates\"\n",
        "operationId": "updateSiteTemplate",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The value of id.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The properties that need to be updated for the specified site template.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/siteTemplates_id_body"
              },
              "examples": {
                "connectDirectSiteTemplate": {
                  "$ref": "#/components/examples/connectDirectSiteTemplate"
                },
                "synchronySiteTemplate": {
                  "$ref": "#/components/examples/synchronySiteTemplate"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content - successful operation."
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "delete": {
        "tags": [
          "siteTemplates"
        ],
        "summary": "Delete a site template.",
        "description": "`Permissions`: \"Site Templates\"\n",
        "operationId": "deleteSiteTemplate",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the site template.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content - successful operation."
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "head": {
        "tags": [
          "siteTemplates"
        ],
        "summary": "Check if site template exists.",
        "description": "`Permissions`: \"Site Templates\"\n",
        "operationId": "siteTemplateExists",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id to search for.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - successful operation."
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "patch": {
        "tags": [
          "siteTemplates"
        ],
        "summary": "Partially update a site template.",
        "description": "`Permissions`: \"Site Templates\"\n",
        "operationId": "partiallyUpdateSiteTemplate",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the site template that needs to be updated.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Site template properties that needs to be updated for the specified site template.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content - successful operation."
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/transferProfiles": {
      "get": {
        "tags": [
          "transferProfiles"
        ],
        "summary": "Get transfer profiles collection.",
        "description": "`Permissions`: \"USER_ACCOUNT_FORM\", \"SERVICE_ACCOUNT_FORM\", \"TEMPLATES_FORM\".\n",
        "operationId": "getTransferProfiles",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "The limit of the listed rows. The limit parameter can has only nonnegative integer value. If the limit parameter is set to 0 or it is null then its value will be the value of the global server configuration parameter named `Webservices.EntriesPerPage` (which by default has value 100).",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The start row to list. The offset parameter can has only nonnegative integer value. If this parameter is not set, then it is considered 0.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "The transfer profiles' fields to return.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "The name of the transfer profile.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "account",
            "in": "query",
            "description": "The account for which the transfer profile is created.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "default",
            "in": "query",
            "description": "Defines whether the transfer profile is default or not.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sendMapping",
            "in": "query",
            "description": "The send mapping of the transfer profile.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "receiveMapping",
            "in": "query",
            "description": "The receive mapping of the transfer profile. The transfer profile's `Receive File as` mapping may not contain '*' or '?'.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "pattern": "^([^\\*\\?])$",
              "type": "string"
            }
          },
          {
            "name": "fileLabelOption",
            "in": "query",
            "description": "The file label option of the transfer profile. Corresponds to PI 37 code.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "DONT_SEND",
                "SEND_FILENAME",
                "SEND_FILENAME_AND_PATH"
              ]
            }
          },
          {
            "name": "multiSelect",
            "in": "query",
            "description": "Defines whether multi select is chosen.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "transferMode",
            "in": "query",
            "description": "The mode of the transfer profile.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "BINARY",
                "ASCII",
                "EBCDIC",
                "EBCDIC_NATIVE"
              ]
            }
          },
          {
            "name": "recordFormat",
            "in": "query",
            "description": "The record format of the transfer profile. It can be variable (128) or fixed (0). Corresponds to PI 31 code.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "Variable",
                "Fixed"
              ]
            }
          },
          {
            "name": "recordLength",
            "in": "query",
            "description": "The record length of the transfer profile. It should be positive. Corresponds to PI 32 code number.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maximum": 32767,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sendingAcknowledgmentEnabled",
            "in": "query",
            "description": "Defines whether the sending acknowledgment is enabled.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "paddingStripEnabled",
            "in": "query",
            "description": "Defines whether the padding strip is enabled.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "additionalAttributes.key",
            "in": "query",
            "description": "Search by userVars key.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "additionalAttributes.value",
            "in": "query",
            "description": "Search by userVars value.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "advancedSettings.enabled",
            "in": "query",
            "description": "Determines whether advancedSettings are enabled.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "advancedSettings.callerTranscoding.localDataCode",
            "in": "query",
            "description": "The file encoding of sending side of the transfer profile. It can be binary, ascii or ebcdic.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "BINARY",
                "ASCII",
                "EBCDIC"
              ]
            }
          },
          {
            "name": "advancedSettings.callerTranscoding.type",
            "in": "query",
            "description": "Determines whether and what transcoding to be applied. Acts as a discriminator and is case sensitive.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "binary",
                "ascii",
                "ebcdic",
                "ascii_predefined",
                "ebcdic_predefined"
              ]
            }
          },
          {
            "name": "advancedSettings.callerTranscoding.transcoding",
            "in": "query",
            "description": "Read-only field displayed when predefined \"type\" is used.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "predefined"
              ]
            }
          },
          {
            "name": "advancedSettings.callerTranscoding.networkDataCode",
            "in": "query",
            "description": "Defines the value of PI 16 - the data coding of the network file. The field is Read-only, populated based on type, when type is ASCII or EBCDIC.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "BINARY",
                "ASCII",
                "EBCDIC"
              ]
            }
          },
          {
            "name": "advancedSettings.callerTranscoding.sourceEncodingScheme",
            "in": "query",
            "description": "The encoding scheme of the source file. Can be one of the system supported charsets.  Applicable only for ascii_predefined and ebcdic_predefined types.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "advancedSettings.callerTranscoding.outputEncodingScheme",
            "in": "query",
            "description": "The encoding scheme of the output file. Can be one of the system supported charsets.  Applicable only for ascii_predefined and ebcdic_predefined types.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "advancedSettings.callerTranscoding.outputRecordFormat",
            "in": "query",
            "description": "The record format of the transfer profile. Corresponds to PI 31 code.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "VARIABLE",
                "FIXED"
              ]
            }
          },
          {
            "name": "advancedSettings.callerTranscoding.outputRecordLength",
            "in": "query",
            "description": "The record length of the transfer profile. It should be positive number. Corresponds to PI 32 code.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maximum": 32767,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "advancedSettings.callerTranscoding.paddingCharacter",
            "in": "query",
            "description": "The padding character can be UNICODE or ASCII and specified by its hexadecimal value.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "advancedSettings.receiverTranscoding.type",
            "in": "query",
            "description": "Determines whether and what transcoding to be applied. Acts as a discriminator and is case sensitive.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "binary",
                "ascii",
                "ebcdic",
                "predefined"
              ]
            }
          },
          {
            "name": "advancedSettings.receiverTranscoding.transcoding",
            "in": "query",
            "description": "Read-only field displayed when predefined \"type\" is used.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "predefined"
              ]
            }
          },
          {
            "name": "advancedSettings.receiverTranscoding.localDataCode",
            "in": "query",
            "description": "Read-only field populated based on \"type\". The data coding of the file on the local file system.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "BINARY",
                "ASCII",
                "EBCDIC"
              ]
            }
          },
          {
            "name": "advancedSettings.receiverTranscoding.sourceEncodingScheme",
            "in": "query",
            "description": "The encoding scheme of the source file. Can be one of the system supported charsets.  Applicable only for predefined type.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "advancedSettings.receiverTranscoding.outputEncodingScheme",
            "in": "query",
            "description": "The encoding scheme of the output file. Can be one of the system supported charsets.  Applicable only for predefined type.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "advancedSettings.receiverTranscoding.outputRecordFormat",
            "in": "query",
            "description": "The record format of the transfer profile.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "VARIABLE",
                "FIXED"
              ]
            }
          },
          {
            "name": "advancedSettings.receiverTranscoding.outputRecordLength",
            "in": "query",
            "description": "The record length of the transfer profile. It should be positive number.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maximum": 32767,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "advancedSettings.receiverTranscoding.paddingCharacter",
            "in": "query",
            "description": "The padding character can be UNICODE or ASCII and specified by its hexadecimal value.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "advancedSettings.receiverTranscoding.lineEndingFormat",
            "in": "query",
            "description": "Line ending of the receiving side of the transfer profile.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "DEFAULT",
                "WINDOWS",
                "UNIX"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransferProfileResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "tags": [
          "transferProfiles"
        ],
        "summary": "Create a transfer profile.",
        "description": "At least one of the transfer profile's 'sendMapping' or 'receiveMapping' should be set.\n\n`Permissions`: \"USER_ACCOUNT_FORM\", \"SERVICE_ACCOUNT_FORM\", \"TEMPLATES_FORM\".\n",
        "operationId": "createTransferProfile",
        "requestBody": {
          "description": "Create a transfer profile.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransferProfile"
              },
              "examples": {
                "legacyTransferProfile": {
                  "$ref": "#/components/examples/TransferProfileOldExample"
                },
                "basicTransferProfile": {
                  "$ref": "#/components/examples/TransferProfileDefaultExample"
                },
                "advancedTransferProfile": {
                  "$ref": "#/components/examples/TransferProfileAsciiAndEbcdicExample"
                },
                "advancedTransferProfilePredefined": {
                  "$ref": "#/components/examples/TransferProfileEbcdicPredefinedAndPredefinedExample"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created - the request has succeeded and a new resource has been created as a result of it."
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/transferProfiles/{id}": {
      "get": {
        "tags": [
          "transferProfiles"
        ],
        "summary": "Get a transfer profile.",
        "description": "`Permissions`: \"USER_ACCOUNT_FORM\", \"SERVICE_ACCOUNT_FORM\", \"TEMPLATES_FORM\".\n",
        "operationId": "getTransferProfile",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the transfer profile.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "The transfer profiles' fields to return.",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransferProfile"
                },
                "examples": {
                  "legacyTransferProfile": {
                    "$ref": "#/components/examples/TransferProfileOldExample"
                  },
                  "basicTransferProfile": {
                    "$ref": "#/components/examples/TransferProfileDefaultExample"
                  },
                  "advancedTransferProfile": {
                    "$ref": "#/components/examples/TransferProfileAsciiAndEbcdicExample"
                  },
                  "advancedTransferProfilePredefined": {
                    "$ref": "#/components/examples/TransferProfileEbcdicPredefinedAndPredefinedExample"
                  }
                }
              },
              "multipart/mixed": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200_6"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "tags": [
          "transferProfiles"
        ],
        "summary": "Replace an existing transfer profile.",
        "description": "`Permissions`: \"USER_ACCOUNT_FORM\", \"SERVICE_ACCOUNT_FORM\", \"TEMPLATES_FORM\".\n",
        "operationId": "updateTransferProfile",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the transfer profile.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The transfer profile that needs to be updated.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransferProfile"
              },
              "examples": {
                "legacyTransferProfile": {
                  "$ref": "#/components/examples/TransferProfileOldExample"
                },
                "basicTransferProfile": {
                  "$ref": "#/components/examples/TransferProfileDefaultExample"
                },
                "advancedTransferProfile": {
                  "$ref": "#/components/examples/TransferProfileAsciiAndEbcdicExample"
                },
                "advancedTransferProfilePredefined": {
                  "$ref": "#/components/examples/TransferProfileEbcdicPredefinedAndPredefinedExample"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content - successful operation."
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "delete": {
        "tags": [
          "transferProfiles"
        ],
        "summary": "Delete transfer profile.",
        "description": "`Permissions`: \"USER_ACCOUNT_FORM\", \"SERVICE_ACCOUNT_FORM\", \"TEMPLATES_FORM\".\n",
        "operationId": "deleteTransferProfile",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the transfer profile.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content - successful operation."
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "head": {
        "tags": [
          "transferProfiles"
        ],
        "summary": "Check if transfer profile exists.",
        "description": "`Permissions`: \\\"USER_ACCOUNT_FORM\\\", \\\"SERVICE_ACCOUNT_FORM\\\", \\\"TEMPLATES_FORM\\\".\n",
        "operationId": "transferProfileExists",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the transferProfile.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - successful operation."
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "patch": {
        "tags": [
          "transferProfiles"
        ],
        "summary": "Partially update a transfer profile.",
        "description": "`Permissions`: \"USER_ACCOUNT_FORM\", \"SERVICE_ACCOUNT_FORM\", \"TEMPLATES_FORM\".\n",
        "operationId": "partiallyUpdateTransferProfile",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the transfer profile.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The transfer profile that needs to be updated.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "204": {
            "description": "No Content - successful operation."
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/transfers/operations": {
      "post": {
        "tags": [
          "transfers"
        ],
        "summary": "Perform operation on transfers.",
        "description": "Currently only pull operation is available. Triggers pull event to retrieve files for a given transfer pull.\n\nThe \"customProperties\" field is a map, consisting of \"key\":\"value\" pairs, that can be referenced by the Transfer Site (TS)\nusing SecureTransport Expression Language (EL) with the \"DXAGENT_TRANSFERSAPI_\" prefix. For example, given a key \"foo\" with a value of \"bar\",\nwe can access it in the TS using ${DXAGENT_TRANSFERSAPI_FOO} for properties which support EL and it would be evaluated to \"bar\".\nThe transfer sites which support these expressions are FTP, HTTP, SSH, PeSIT and Folder Monitor.\n\n**Note:** The keys in the \"customProperties\" map are case insensitive.\n\n`Permissions`: \"USER_ACCOUNT_FORM\", \"TRANSFER_LOG_FORM\"\n",
        "operationId": "pullTransfer",
        "parameters": [
          {
            "name": "operation",
            "in": "query",
            "description": "Which transfer operation to be performed.",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "pull"
              ]
            }
          }
        ],
        "requestBody": {
          "description": "The transfer pull.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdminTransferPull"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransferResult"
                }
              }
            }
          },
          "202": {
            "description": "Accepted - Successfuly submitted operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransferResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          },
          "503": {
            "description": "Service Unavailable."
          }
        }
      }
    },
    "/subscriptions": {
      "get": {
        "tags": [
          "subscriptions"
        ],
        "summary": "Get collection of subscriptions on the ST server.",
        "description": " `Permissions`: \"USER_ACCOUNT_FORM\", \"SERVICE_ACCOUNT_FORM\", \"TEMPLATES_FORM\". \n\n `Implementation note:` Searching for subscription by properties you must specify additional property **type**. \n\n Otherwise search is available only for common properties of subscription (*type*, *account*, *application*, *flowAttributes*, *flowAttrsMergeMode*, *flowName*, *folder*, *folderMonitorScheduleCheck*, *maxParallelSitPulls*, *scheduledFolderMonitor*, *subscriptionEncryptMode*, *fileRetentionPeriod*, *flowAttributes.value*, *flowAttributes.key*).\n\n  When trying to filter by fields exclusive to a certain subscription type, the type property must be specified.\n\n  Searching properties or filtering by fields exclusive to a certain schedule type, the schedules.type parameter must be specified.",
        "operationId": "getSubscriptions",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "The limit of the listed rows. The limit parameter can has only nonnegative integer value. If the limit parameter is set to 0 or it is null then its value will be the value of the global server configuration parameter named `Webservices.EntriesPerPage` (which by default has value 100).",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The start row to list. The offset parameter can has only nonnegative integer value. If this parameter is not set, then it is considered 0.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Set of comma separated strings of subscription properties to return.\n\n**Note:** The type field will always be present.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "account",
            "in": "query",
            "description": "The account name to filter by.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "application",
            "in": "query",
            "description": "The application name to filter by.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Discriminator to filter by.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "AdvancedRouting",
                "Basic",
                "HumanSystem",
                "MBFT",
                "SharedFolder",
                "SiteMailbox",
                "StandardRouter",
                "SynchronyTransfer"
              ]
            }
          },
          {
            "name": "schedules.type",
            "in": "query",
            "description": "The schedules type to filter by.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "ONCE",
                "HOURLY",
                "DAILY",
                "WEEKLY",
                "MONTHLY",
                "YEARLY",
                "EXPRESSION"
              ]
            }
          },
          {
            "name": "folder",
            "in": "query",
            "description": "The subscription folder to filter by. The file path should be provided e.g '/TEST'",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "maxParallelSitPulls",
            "in": "query",
            "description": "Custom attribute under which we store the option for maximum sit pulls to be executed simultaneously. Negative value or 0 - no limit, positive value 4 - limits simultaneously",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "flowAttrsMergeMode",
            "in": "query",
            "description": "The flow merge mode.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "preserve",
                "overwrite",
                "append"
              ]
            }
          },
          {
            "name": "folderMonitorScheduleCheck",
            "in": "query",
            "description": "Whether a folder monitor subscription is scheduled.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "flowAttributes.key",
            "in": "query",
            "description": "Search by userVars key.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "flowAttributes.value",
            "in": "query",
            "description": "Search by userVars value.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "scheduledFolderMonitor",
            "in": "query",
            "description": "Specify if this subscription is targeted for a scheduled folder monitor.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fileRetentionPeriod",
            "in": "query",
            "description": "Search by fileRetentionPeriod value. If this parameter is not set, then it is considered 0.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "subscriptionEncryptMode",
            "in": "query",
            "description": "Encryption that will be used for subscription folder. Accepting one of default, enabled, disabled.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "flowAttributeKey",
            "in": "query",
            "description": "Search by flowAtrribute key.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "flowAttributeValue",
            "in": "query",
            "description": "Search by flowAtrribute value.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "templateAdvancedExpression",
            "in": "query",
            "description": "Specify if advanced expressions section be displayed in Admin UI Subscriptions page. Applicable for Basic, SharedFolder, SiteMailbox subscriptions.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "transferConfigurations.id",
            "in": "query",
            "description": "Search by id of transfer configuration.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "transferConfigurations.tag",
            "in": "query",
            "description": "Search by tag of transfer configuration.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "PARTNER-IN",
                "PARTNER-OUT"
              ]
            }
          },
          {
            "name": "transferConfigurations.outbound",
            "in": "query",
            "description": "Search by direction of transfer configuration. If true, subscriptions with outbound transfer configurations will be returned, else subscriptions with inbound transfer configrations.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "transferConfigurations.site",
            "in": "query",
            "description": "Search by transfer site name of transfer configuration.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "transferConfigurations.transferProfile",
            "in": "query",
            "description": "Search by transfer profile of transfer configuration.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "transferConfigurations.dataTransformations.id",
            "in": "query",
            "description": "Search by id of transfer configuration's data transformation.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "transferConfigurations.dataTransformations.type",
            "in": "query",
            "description": "Search by type of transfer configuration's data transformation.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "transferConfigurations.dataTransformations.asciiArmor",
            "in": "query",
            "description": "Search by asciiArmor of transfer configuration's data transformation. Specify if SecureTransport uses ASCII armor encoding. ASCII armor refers to using binary-to-text encoding for plain text data.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "enum": [
                true
              ]
            }
          },
          {
            "name": "transferConfigurations.dataTransformations.compressionAlgorithm",
            "in": "query",
            "description": "Search by compressionAlgorithm of transfer configuration's data transformation. Possible values are -1 (Preffered), 0 (No compression), 1 (ZIP), 2 (ZLIB) or 3 (BZIP2). Preferred compression methods and order of preference are determined by examining the recipient's PGP key. If the data compression method you choose is not among the recipient's preferred methods, it is possible that the recipient will not be able to access the data.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "transferConfigurations.dataTransformations.compressionLevel",
            "in": "query",
            "description": "Search by compressionLevel of transfer configuration's data transformation. Possible values are 2 (Fast), 5 (Normal), 7 (Good) or 9 (Best).",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "transferConfigurations.dataTransformations.encryptEnabled",
            "in": "query",
            "description": "Search by encryptEnabled property of transfer configuration's data transformation.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "transferConfigurations.dataTransformations.localSignCertificate",
            "in": "query",
            "description": "Search by localSignCertificate of transfer configuration's data transformation.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "transferConfigurations.dataTransformations.originalNameExpressionEnabled",
            "in": "query",
            "description": "Search by originalNameExpressionEnabled of transfer configuration's data transformation.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "transferConfigurations.dataTransformations.originalNameExpression",
            "in": "query",
            "description": "Search by originalNameExpression of transfer configuration's data transformation.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "transferConfigurations.dataTransformations.partnerEncryptCertificate",
            "in": "query",
            "description": "Search by partnerEncryptCertificate of transfer configuration's data transformation.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "transferConfigurations.dataTransformations.requireEncryption",
            "in": "query",
            "description": "Search by requireEncryption of transfer configuration's data transformation.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "enum": [
                true
              ]
            }
          },
          {
            "name": "transferConfigurations.dataTransformations.requireSignature",
            "in": "query",
            "description": "Search by requireSignature of transfer configuration's data transformation.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "enum": [
                true
              ]
            }
          },
          {
            "name": "transferConfigurations.dataTransformations.signingEnabled",
            "in": "query",
            "description": "Search by signingEnabled of transfer configuration's data transformation.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "transferConfigurations.dataTransformations.transformedNameExpressionEnabled",
            "in": "query",
            "description": "Search by transformedNameExpressionEnabled property of transfer configuration's data transformation.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "transferConfigurations.dataTransformations.transformedNameExpression",
            "in": "query",
            "description": "Search by transformedNameExpression of transfer configuration's data transformation.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "postClientDownloads.postClientDownloadActionType",
            "in": "query",
            "description": "Specify if Post Client Download Actions will be applied to each file successfully downloaded from the subscription folder. It can be 'DELETE' or no property at all. Applicable for AdvancedRouting subscription.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "postClientDownloads.postClientDownloadActionTypeFailure",
            "in": "query",
            "description": "Advanced Routing setting for post client download action type option on failure. Applicable for AdvancedRouting subscription.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "postClientDownloads.postClientDownloadTypeOnFailDoAdvancedRouting",
            "in": "query",
            "description": "Whether to trigger advanced routing in case of a failed post client download. Applicable for AdvancedRouting subscription.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "postClientDownloads.postClientDownloadTypeOnFailDoAdvancedRoutingProcessFailedFile",
            "in": "query",
            "description": "Defines whether to trigger advanced routing with file copy in case of a failed post client download. Applicable for AdvancedRouting subscription.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "postClientDownloads.postClientDownloadTypeOnPermfailDoDelete",
            "in": "query",
            "description": "Defines whether to delete the file in case of a permanent failure of a post client download. Applicable for AdvancedRouting subscription.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "postClientDownloads.postClientDownloadTypeOnSuccessDoAdvancedRouting",
            "in": "query",
            "description": "Defines whether to trigger advanced routing in case of a successful post client download. Applicable for AdvancedRouting subscription.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "postClientDownloads.postClientDownloadTypeOnSuccessDoAdvancedRoutingProcessFile",
            "in": "query",
            "description": "Defines whether to trigger advanced routing with file copy in case of a successful post client download. Applicable for AdvancedRouting subscription.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "postProcessingActions.ppaOnFailInDoDelete",
            "in": "query",
            "description": "Defines whether to delete the file on failure after the transmission. This action is applied to files arrived to this folder and processed by a route package. Applicable for AdvancedRouting subscription.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "postProcessingActions.ppaOnFailInDoMove",
            "in": "query",
            "description": "Specify a value to rename the file after transmission or move it to a different folder on failure. An expression language can be used to specify a file name/folder. This action is applied to files arrived to this folder and processed by a route package. Applicable for AdvancedRouting subscription.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "postProcessingActions.ppaOnSuccessInDoDelete",
            "in": "query",
            "description": "Defines whether to delete the file on success after the transmission. This action is applied to files arrived to this folder and processed by a route package. Applicable for AdvancedRouting subscription.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "postProcessingActions.ppaOnSuccessInDoMove",
            "in": "query",
            "description": "Specify a value to rename the file after transmission or move it to a different folder on success. An expression language can be used to specify a file name/folder. This action is applied to files arrived to this folder and processed by a route package. Applicable for AdvancedRouting subscription.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "postTransmissionActions.moveOverwrite",
            "in": "query",
            "description": "Delete the target file and repeat the rename operation. Applicable for AdvancedRouting subscription.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "postTransmissionActions.ptaOnTempfailInDoDelete",
            "in": "query",
            "description": "Defines whether to delete the file on failure after the transmission. Applicable for AdvancedRouting, Basic, SharedFolder, SiteMailbox and StandardRouter subscriptions.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "postTransmissionActions.ptaOnTempfailInDoMove",
            "in": "query",
            "description": "Specify a value to rename the file after transmission or move it to a different folder on temporary failure. An expression language can be used to specify a file name/folder. Applicable for AdvancedRouting, Basic, SharedFolder, SiteMailbox and StandardRouter subscriptions.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "postTransmissionActions.ptaOnPermfailInDoDelete",
            "in": "query",
            "description": "Defines whether to delete the file on failure after the transmission. Applicable for AdvancedRouting, Basic, SharedFolder, SiteMailbox and StandardRouter subscriptions.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "postTransmissionActions.ptaOnPermfailInDoMove",
            "in": "query",
            "description": "Specify a value to rename the file after transmission or move it to a different folder on failure. An expression language can be used to specify a file name/folder. Applicable for AdvancedRouting, Basic, SharedFolder, SiteMailbox and StandardRouter subscriptions.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "postTransmissionActions.ptaOnPermfailDoAdvancedRouting",
            "in": "query",
            "description": "Defines whether to trigger advanced routing in case of a PTA permanent failure. Applicable for AdvancedRouting subscription.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "postTransmissionActions.ptaOnPermfailInDoAdvancedRoutingFailedFile",
            "in": "query",
            "description": "Defines whether to trigger advanced routing with file copy in case of a PTA permanent failure. Applicable for AdvancedRouting subscription.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "postTransmissionActions.ptaOnPermfailInDoAdvancedRoutingWildcardPull",
            "in": "query",
            "description": "Defines whether to trigger wildcard pull with advanced routing in case of a PTA permanent failure. Applicable for AdvancedRouting subscription.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "postTransmissionActions.ptaOnTempfailInDoAdvancedRouting",
            "in": "query",
            "description": "Defines whether to trigger advanced routing in case of a PTA temporary failure. Applicable for AdvancedRouting subscription.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "postTransmissionActions.ptaOnTempfailInDoAdvancedRoutingProcessFailedFile",
            "in": "query",
            "description": "Defines whether to trigger advanced routing with file copy in case of a PTA permanent failure. Applicable for AdvancedRouting subscription.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "postTransmissionActions.ptaOnTempfailInDoAdvancedRoutingWildcardPull",
            "in": "query",
            "description": "Defines whether to trigger wildcard pull with advanced routing in case of a PTA temporary failure. Applicable for AdvancedRouting subscription.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "postTransmissionActions.ptaOnSuccessDoInAdvancedRoutingWildcardPull",
            "in": "query",
            "description": "Defines whether to trigger wildcard pull with advanced routing in case of a PTA success. Applicable for AdvancedRouting subscription.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "postTransmissionActions.ptaOnSuccessInDoDelete",
            "in": "query",
            "description": "Defines whether to delete the source file on success after the transmission. Applicable for AdvancedRouting, Basic, SharedFolder, SiteMailbox and StandardRouter subscriptions.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "postTransmissionActions.ptaOnSuccessInDoMove",
            "in": "query",
            "description": "Specify a value to rename the file after transmission or move it to a different folder on success. An expression language can be used to specify a file name/folder. Applicable for AdvancedRouting, Basic, SharedFolder, SiteMailbox and StandardRouter subscriptions.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "postTransmissionActions.ptaOnSuccessInDoMoveOverwrite",
            "in": "query",
            "description": "When the \"Allow Overwrite Existing File\" option is enabled and the rename operation fails because the target file exists, ST will delete the target file and repeat the rename operation. Applicable for AdvancedRouting subscription.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "postTransmissionActions.ptaOnPermfailOutDoDelete",
            "in": "query",
            "description": "Defines whether to delete the file on failure after the transmission. Applicable for AdvancedRouting, Basic, SiteMailbox and StandardRouter subscriptions.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "postTransmissionActions.ptaOnPermfailOutDoMove",
            "in": "query",
            "description": "Specify a value to rename the file after transmission or move it to a different folder on permanent failure. An expression language can be used to specify a file name/folder. Applicable for AdvancedRouting, Basic, SiteMailbox and StandardRouter subscriptions.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "postTransmissionActions.ptaOnSuccessOutDoDelete",
            "in": "query",
            "description": "Defines whether to delete the file on success after the transmission. Applicable for AdvancedRouting, Basic, SiteMailbox and StandardRouter subscriptions.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "postTransmissionActions.ptaOnSuccessOutDoMove",
            "in": "query",
            "description": "Specify a value to rename the file after transmission or move it to a different folder on success. An expression language can be used to specify a file name/folder. Applicable for AdvancedRouting, Basic, SiteMailbox and StandardRouter subscriptions.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "postTransmissionActions.ptaOnSuccessOutDoMoveOverwrite",
            "in": "query",
            "description": "When the \"Allow Overwrite Existing File\" option is enabled and the rename operation fails because the target file exists, ST will delete the target file and repeat the rename operation. Applicable for AdvancedRouting subscription.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "postTransmissionActions.ptaOnTempfailOutDoDelete",
            "in": "query",
            "description": "Defines whether to delete the file on failure after the transmission. Applicable for AdvancedRouting subscription.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "postTransmissionActions.ptaOnTempfailOutDoMove",
            "in": "query",
            "description": "Specify a value to rename the file after transmission or move it to a different folder on failure. An expression language can be used to specify a file name/folder. Applicable for AdvancedRouting subscription.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "postTransmissionActions.triggerOnConditionEnabled",
            "in": "query",
            "description": "If checked, processing of files in the subscription folder will be triggered upon a specific condition. Applicable for AdvancedRouting subscription.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "postTransmissionActions.triggerOnConditionExpression",
            "in": "query",
            "description": "Specify the condition on which to trigger file processing. An expression language can be used. Applicable for AdvancedRouting subscription.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "postTransmissionActions.triggerOnSuccessfulWildcardPull",
            "in": "query",
            "description": "Setting for trigger on successful wildcard pull. Applicable for AdvancedRouting subscription.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "postTransmissionActions.submitFilterType",
            "in": "query",
            "description": "Specify the submit filter type. It could be 'FILENAME_PATTERN' or 'TRIGGER_FILE_CONTENT'. Applicable for AdvancedRouting subscription.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "postTransmissionActions.submitFilenamePatternExpression",
            "in": "query",
            "description": "Specify the file name pattern. An expression language can be used. Applicable for AdvancedRouting subscription.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "postTransmissionActions.triggerFileOption",
            "in": "query",
            "description": "Specify the trigger file option. It could be 'fail', 'continue' or 'retry'. Applicable for AdvancedRouting subscription.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "postTransmissionActions.triggerFileRetriesNumber",
            "in": "query",
            "description": "Specify the trigger file maximum retries number. Applicable for AdvancedRouting subscription when 'triggerFileOption' option is set to 'retry'.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "postTransmissionActions.triggerFileRetryDelay",
            "in": "query",
            "description": "Specify the interval in seconds, when next trigger file retry will be executed. Applicable for AdvancedRouting subscription when 'triggerFileOption' option is set to 'retry'.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "subscriberID",
            "in": "query",
            "description": "The subscriber ID. Applicable for StandardRouter subscription.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "tags": [
          "subscriptions"
        ],
        "summary": "Create subscription on the ST server.",
        "description": "Subscriptions support custom attributes which can be added via the ST RESTful API. The custom attributes are in the following format: `userVars.{attribute_name}: {attribute_value}`. \n\n`Note`: For properties supporting expression language: If the filename expression begins with /, then the transformed file is put in the sub-folder indicated by this filename expression relative to the subscription folder.\n",
        "operationId": "createSubscription",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/subscriptions_body"
              },
              "examples": {
                "advancedRoutingSubscription": {
                  "$ref": "#/components/examples/AdvancedRoutingSubscriptionExample"
                },
                "basicSubscription": {
                  "$ref": "#/components/examples/BasicSubscriptionExample"
                },
                "humanSystemSubscription": {
                  "$ref": "#/components/examples/HumanSystemSubscriptionExample"
                },
                "MBFTSubscription": {
                  "$ref": "#/components/examples/MBFTSubscriptionExample"
                },
                "sharedFolderSubscription": {
                  "$ref": "#/components/examples/SharedFolderSubscriptionExample"
                },
                "siteMailboxSubscription": {
                  "$ref": "#/components/examples/SiteMailboxSubscriptionExample"
                },
                "standardRouterSubscription": {
                  "$ref": "#/components/examples/StandardRouterSubscriptionExample"
                },
                "synchronyTransferSubscription": {
                  "$ref": "#/components/examples/SynchronyTransferSubscriptionExample"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created - the request has succeeded and a new resource has been created as a result of it."
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "409": {
            "description": "Conflict - duplicate entity."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/subscriptions/{id}": {
      "get": {
        "tags": [
          "subscriptions"
        ],
        "summary": "Get a subscription.",
        "description": "`Implementation note`: When trying to filter by fields exclusive to a certain subscription type, the type property must be specified.\n",
        "operationId": "getSubscription",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the subscription.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Subscription's fields to return.\n\n**Note:** The type field will always be present.\n",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Discriminator to filter by.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "AdvancedRouting",
                "Basic",
                "HumanSystem",
                "MBFT",
                "SharedFolder",
                "SiteMailbox",
                "StandardRouter",
                "SynchronyTransfer"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/subscriptions_body"
                },
                "examples": {
                  "advancedRoutingSubscription": {
                    "$ref": "#/components/examples/AdvancedRoutingSubscriptionExample"
                  },
                  "basicSubscription": {
                    "$ref": "#/components/examples/BasicSubscriptionExample"
                  },
                  "humanSystemSubscription": {
                    "$ref": "#/components/examples/HumanSystemSubscriptionExample"
                  },
                  "MBFTSubscription": {
                    "$ref": "#/components/examples/MBFTSubscriptionExample"
                  },
                  "sharedFolderSubscription": {
                    "$ref": "#/components/examples/SharedFolderSubscriptionExample"
                  },
                  "siteMailboxSubscription": {
                    "$ref": "#/components/examples/SiteMailboxSubscriptionExample"
                  },
                  "standardRouterSubscription": {
                    "$ref": "#/components/examples/StandardRouterSubscriptionExample"
                  },
                  "synchronyTransferSubscription": {
                    "$ref": "#/components/examples/SynchronyTransferSubscriptionExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "tags": [
          "subscriptions"
        ],
        "summary": "Replace an existing properties of subscription.",
        "description": "`Implementation note:` If a subscription has a fileRetentionPeriod parameter greater than 0, changing\nthe transfer site to other than SFTP will require setting the fileRetentionPeriod parameter value to 0. Currently only\nSFTP transfer sites are supported by the 'Keep pull history' feature.\n",
        "operationId": "updateSubscription",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the subscription.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The subscription to update.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/subscriptions_id_body"
              },
              "examples": {
                "advancedRoutingSubscription": {
                  "$ref": "#/components/examples/AdvancedRoutingSubscriptionExample"
                },
                "basicSubscription": {
                  "$ref": "#/components/examples/BasicSubscriptionExample"
                },
                "humanSystemSubscription": {
                  "$ref": "#/components/examples/HumanSystemSubscriptionExample"
                },
                "MBFTSubscription": {
                  "$ref": "#/components/examples/MBFTSubscriptionExample"
                },
                "sharedFolderSubscription": {
                  "$ref": "#/components/examples/SharedFolderSubscriptionExample"
                },
                "siteMailboxSubscription": {
                  "$ref": "#/components/examples/SiteMailboxSubscriptionExample"
                },
                "standardRouterSubscription": {
                  "$ref": "#/components/examples/StandardRouterSubscriptionExample"
                },
                "synchronyTransferSubscription": {
                  "$ref": "#/components/examples/SynchronyTransferSubscriptionExample"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content - successful operation."
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "409": {
            "description": "Conflict - duplicate entity."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "delete": {
        "tags": [
          "subscriptions"
        ],
        "summary": "Delete (unsubscribe) and/or purge subscription.",
        "description": "Unsubscribing from an application deletes the associated pull history.",
        "operationId": "deleteSubscription",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the subscription.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "purge",
            "in": "query",
            "description": "Defines whether or not to purge the subscription folder.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content - successful operation."
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "head": {
        "tags": [
          "subscriptions"
        ],
        "summary": "Check if subscription exists.",
        "description": "`Permissions`: \\\"USER_ACCOUNT_FORM\\\", \\\"SERVICE_ACCOUNT_FORM\\\", \\\"TEMPLATES_FORM\\\".\n",
        "operationId": "subscriptionExists",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the subscription.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - successful operation."
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "patch": {
        "tags": [
          "subscriptions"
        ],
        "summary": "Partially update subscription properties.",
        "operationId": "patchSubscription",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the subscription.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Subscription properties that need to be updated.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content - successful operation."
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "409": {
            "description": "Conflict - duplicate entity."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/subscriptions/{id}/operations": {
      "post": {
        "tags": [
          "subscriptions"
        ],
        "summary": "Perform operation on subscriptions.",
        "description": " `Permissions`: \"USER_ACCOUNT_FORM\", \"SERVICE_ACCOUNT_FORM\", \"TEMPLATES_FORM\".\n\n `ClearPullHistory`: deletes the pull history associated with the subscription.\n\n `Purge`: does not affect the subscription pull history.",
        "operationId": "subscriptionOperation",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the subscription.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "operation",
            "in": "query",
            "description": "Operation type.",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "ClearPullHistory",
                "Purge"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PullHistoryDetailsResult"
                }
              }
            }
          },
          "202": {
            "description": "Accepted - Successfully submitted asynchronous operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Accepted"
                }
              }
            }
          },
          "204": {
            "description": "No Content - successful operation."
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/version": {
      "get": {
        "tags": [
          "version"
        ],
        "summary": "Get version information.",
        "operationId": "getSTVersion",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "The version information's fields to return.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VersionInformation"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/addressBook/sources": {
      "get": {
        "tags": [
          "addressBook"
        ],
        "summary": "Get address book sources.",
        "operationId": "getAddressBookSources",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "The fields of addressBookSource to return.",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Name of addressBookSource to filter by.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Type of addressBookSource to filter by.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "LOCAL",
                "LDAP",
                "CUSTOM"
              ]
            }
          },
          {
            "name": "parentGroup",
            "in": "query",
            "description": "Parent group of addressBookSource to filter by.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "enabled",
            "in": "query",
            "description": "Filter by whether addressBookSource is enabled.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalAddressBookSourceResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/addressBook/sources/{id}": {
      "get": {
        "tags": [
          "addressBook"
        ],
        "summary": "Get an address book source.",
        "operationId": "getAddressBookSource",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the address book source to be retrieved.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "The fields of address book source to return.",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddressBookSource"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "tags": [
          "addressBook"
        ],
        "summary": "Replace an existing address book source.",
        "operationId": "updateAddressBookSource",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the address book source that needs to be updated.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Address book source to update.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddressBookSource"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content - successful operation."
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "head": {
        "tags": [
          "addressBook"
        ],
        "summary": "Check if an address book source exists.",
        "operationId": "addressBookSourceExists",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the address book source to be checked.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - successful operation."
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "patch": {
        "tags": [
          "addressBook"
        ],
        "summary": "Partially update an existing address book source.",
        "operationId": "partiallyUpdateAddressBookSource",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the address book source that needs to be updated.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Address book source properties that need to be updated for the specified id.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content - successful operation."
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/userClasses": {
      "get": {
        "tags": [
          "userClasses"
        ],
        "summary": "Get a collection of existing on ST server user classes.",
        "operationId": "getUserClasses",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "The limit of the listed rows. The limit parameter can only have a nonnegative integer value. \nIf the limit parameter is set to 0 or it is null then its value will be the value of the global server \nconfiguration parameter named 'Webservices.EntriesPerPage' (which by default has a value of 100).\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The initial row to list all user classes. The offset parameter can only have a nonnegative integer value. \nIf this parameter is not set, then it is considered 0.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "The userClasses` fields to return.\n",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "className",
            "in": "query",
            "description": "A user class name.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userType",
            "in": "query",
            "description": "A user class type.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "*",
                "real",
                "virtual"
              ]
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "The position on which a user class is persisted.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "userName",
            "in": "query",
            "description": "A user name bound to a user class.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "enabled",
            "in": "query",
            "description": "Is user class enabled.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "group",
            "in": "query",
            "description": "The group which a user class belongs to.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "address",
            "in": "query",
            "description": "A user class host.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expression",
            "in": "query",
            "description": "A user class expression.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserClassResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "tags": [
          "userClasses"
        ],
        "summary": "Create a single user class on the SecureTransport server.",
        "description": "The required properties in the POST request are: className, userType, userName, group and host.\nThe order, expression and enabled properties are optional. Default values for this properties are false,\"\" and 1. During a POST\nrequest the properties enabled and expression can be modified, but all values passed for property order will be ignored and default one will be used.\n",
        "operationId": "createUserClass",
        "requestBody": {
          "description": "User class objects to be persisted on the SecureTransport server.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserClass"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created - the request has succeeded and a new resource has been created as a result of it."
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "409": {
            "description": "Conflict - duplicate entity."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/userClasses/{id}": {
      "get": {
        "tags": [
          "userClasses"
        ],
        "summary": "Get an instance of a user class associated with provided ID.",
        "operationId": "getUserClass",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User class ID to search for.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "The userClasses` fields to return.",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserClass"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "tags": [
          "userClasses"
        ],
        "summary": "Update an existing on SecureTransport server user class.",
        "description": "The update full overwrite the previously existing user class on the SecureTransport server.\n Required information for the user class\nfields(className, userType, address and group) must be specified. Optional properties are: enabled, expression and\norder. \n\nThe enabled property is used for enabling or disabling the user class instance.\nThe order property is used to change the position of the user class. When changing position of the user class instance\nall user classes before or after the new user class position will be shifted up or down by one position.\n",
        "operationId": "updateUserClass",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the user class which must be updated.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A user class instance with populated properties which must be updated.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserClass"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content - successful operation."
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "409": {
            "description": "Conflict - duplicate entity."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "delete": {
        "tags": [
          "userClasses"
        ],
        "summary": "Delete a user class instance.",
        "operationId": "deleteUserClass",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the class which will be deleted.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content - successful operation."
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "head": {
        "tags": [
          "userClasses"
        ],
        "summary": "Check if user class exists.",
        "operationId": "userClassExists",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the user class.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - successful operation."
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "patch": {
        "tags": [
          "userClasses"
        ],
        "summary": "Partially update an existing userClass.",
        "operationId": "partiallyUpdateUserClass",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the user class which must be updated.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "UserClass object with properties to set.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content - successful operation."
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/administrators": {
      "get": {
        "tags": [
          "administrators"
        ],
        "summary": "Get available administrators.",
        "operationId": "getAdministrators",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "The limit of the listed rows. The limit parameter can only have a non-negative integer value. If the limit parameter is set to 0 or it is null, then its value will be the value of the global server configuration parameter named 'Webservices.EntriesPerPage' (which by default has value 100).",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The initial row to list all administrators. The offset parameter can only have a non-negative integer value. If this parameter is not set, then it is considered 0.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "The administrator fields to return.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "loginName",
            "in": "query",
            "description": "The administrator's name.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "parent",
            "in": "query",
            "description": "The administrator's parent.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "roleName",
            "in": "query",
            "description": "Name of the administrator's administrative role.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isLimited",
            "in": "query",
            "description": "Whether the administrator is limited or master.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "localAuthentication",
            "in": "query",
            "description": "Search for local-authenticated or external-authenticated administrators.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "dualAuthentication",
            "in": "query",
            "description": "Search for administrators which authenticate with a certificate and password.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "locked",
            "in": "query",
            "description": "Search for locked administrators.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "passwordCredentials.passwordExpired",
            "in": "query",
            "description": "Search for administrators with an expired password.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "passwordCredentials.lastPasswordChangeTime.from",
            "in": "query",
            "description": "Search for administrators with a change of password after the specified time.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "passwordCredentials.lastPasswordChangeTime.to",
            "in": "query",
            "description": "Search for administrators with a change of password before the specified time.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "passwordCredentials.ownPasswordChanged.from",
            "in": "query",
            "description": "Search for administrators who changed their passwords after the specified time.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "passwordCredentials.ownPasswordChange.to",
            "in": "query",
            "description": "Search for administrators who changed their passwords before the specified time.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "passwordCredentials.lastLoginTime.from",
            "in": "query",
            "description": "Search for administrators who logged in after the specified time.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "passwordCredentials.lastLoginTime.to",
            "in": "query",
            "description": "Search for administrators who logged in before the specified time.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "passwordCredentials.lastFailureLoginTime.from",
            "in": "query",
            "description": "Search for administrators who failed to log in after the specified time.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "passwordCredentials.lastFailureLoginTime.to",
            "in": "query",
            "description": "Search for administrators who failed to log in before the specified time.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "passwordCredentials.loginFailureCount",
            "in": "query",
            "description": "Search for administrators who failed to log in a certain number of times.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdministratorResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "tags": [
          "administrators"
        ],
        "summary": "Create an administrator.",
        "operationId": "createAdministrator",
        "requestBody": {
          "description": "An administrator object to be created on the SecureTransport server.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Administrator"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created - the request has succeeded and a new resource has been created as a result of it."
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "409": {
            "description": "Conflict - duplicate entity."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/administrators/{name}": {
      "get": {
        "tags": [
          "administrators"
        ],
        "summary": "Get an administrator.",
        "operationId": "getAdministrator",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "The administrator's name to search for.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "The administrator's fields to return.",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Administrator"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "tags": [
          "administrators"
        ],
        "summary": "Replace an existing administrator.",
        "operationId": "updateAdministrator",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "The name of the administrator.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Administrator object with properties to set.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Administrator"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "The administrator was successfully updated.",
            "content": {}
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "409": {
            "description": "Conflict - duplicate entity."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "delete": {
        "tags": [
          "administrators"
        ],
        "summary": "Delete an administrator.",
        "operationId": "deleteAdministrator",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "The name of the administrator.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted the administrator.",
            "content": {}
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "head": {
        "tags": [
          "administrators"
        ],
        "summary": "Check if an administrator exists",
        "operationId": "administratorExists",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "The administrator's name to search for.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation."
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "patch": {
        "tags": [
          "administrators"
        ],
        "summary": "Partially update an administrator.",
        "operationId": "partiallyUpdateAdmin",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "The name of the administrator.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Administrator object with properties to set.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "The administrator was successfully updated.",
            "content": {}
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "409": {
            "description": "Conflict - duplicate entity."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/administrativeRoles": {
      "get": {
        "tags": [
          "administrativeRoles"
        ],
        "summary": "Get a collection of administrative roles.",
        "description": "Get a collection of all administrative roles with their respective menus on the SecureTransport server.",
        "operationId": "getAdministrativeRoles",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "The limit of the listed rows. The limit parameter can only have a non-negative integer value. If the limit parameter is set to 0 or it is null, then its value will be the value of the global server configuration parameter named 'Webservices.EntriesPerPage' (which by default has value 100).\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The initial row to list all administrative roles. The offset parameter can only have a non-negative integer value. If this parameter is not set, then it is considered 0.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "The administrativeRoles` fields to return.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "roleName",
            "in": "query",
            "description": "An administrative role name.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isLimited",
            "in": "query",
            "description": "Whether the role is limited or not.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "isBounceAllowed",
            "in": "query",
            "description": "Is bouncing of a server currently allowed for this administrative role.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "menus",
            "in": "query",
            "description": "The roles with access to the specified menus.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdministrativeRoleResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "tags": [
          "administrativeRoles"
        ],
        "summary": "Create an administrative role.",
        "operationId": "createAdministrativeRole",
        "requestBody": {
          "description": "Administrative role object which can be created on the SecureTransport server.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdministrativeRole"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created - the request has succeeded and a new resource has been created as a result of it."
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "409": {
            "description": "Conflict - duplicate entity."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/administrativeRoles/{name}": {
      "get": {
        "tags": [
          "administrativeRoles"
        ],
        "summary": "Get an administrative role.",
        "operationId": "getAdministrativeRole",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "An administrative role name to search for.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "The administrative role's fields to return.",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdministrativeRole"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "tags": [
          "administrativeRoles"
        ],
        "summary": "Replace an existing administrative role.",
        "operationId": "updateAdministrativeRole",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "The name of the administrative role to be updated.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Administrative role object populated with properties which must be updated.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdministrativeRole"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content - successful operation."
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "409": {
            "description": "Conflict - duplicate entity."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "delete": {
        "tags": [
          "administrativeRoles"
        ],
        "summary": "Delete an administrative role.",
        "description": "All administrators assigned to this role will also be deleted.",
        "operationId": "deleteAdministrativeRole",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "The name of the administrative role which will be deleted.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "targetRoleName",
            "in": "query",
            "description": "All administrators assigned to the deleted role will be moved to a target administrative role, specified with this query parameter.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content - successful operation."
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "head": {
        "tags": [
          "administrativeRoles"
        ],
        "summary": "Check if an administrative role exists.",
        "operationId": "administrativeRoleExists",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "The role name to search for.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - successful operation."
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "patch": {
        "tags": [
          "administrativeRoles"
        ],
        "summary": "Partially update an existing administrative role.",
        "operationId": "partiallyUpdateRole",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "The name of the administrative role to be updated.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Administrative role properties that need to be updated for the specified account.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content - successful operation."
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "409": {
            "description": "Conflict - duplicate entity."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/servers": {
      "get": {
        "tags": [
          "servers"
        ],
        "summary": "Gets a collection of servers.",
        "description": "`Implementation note:` Searching for server by properties you must specify additional property **protocol**.\n  Otherwise search is available only for common properties of servers (serverName, isActive).\n\n  When trying to filter by fields exclusive to a certain server, the protocol property must be specified.\n",
        "operationId": "getServers",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "The limit of the listed rows. The limit parameter can only have a non-negative integer value. If the limit parameter is set to 0 or it is null, then its value will be the value of the global server configuration parameter named 'Webservices.EntriesPerPage' (which by default has value 100).\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The initial row to list all administrative roles. The offset parameter can only have a non-negative integer value. If this parameter is not set, then it is considered 0.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "The server's fields to return.\n\n**Note:** The protocol field will always be present.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "protocol",
            "in": "query",
            "description": "The server protocol to filter by.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "http",
                "ftp",
                "ssh",
                "as2",
                "pesit"
              ]
            }
          },
          {
            "name": "serverName",
            "in": "query",
            "description": "The server name",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isActive",
            "in": "query",
            "description": "The current state of the server.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "host",
            "in": "query",
            "description": "Server bind host. Applicable for FTP, SSH, PeSIT",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "port",
            "in": "query",
            "description": "Server bind port. Applicable for FTP, SSH",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maximum": 65535,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "ciphers",
            "in": "query",
            "description": "Comma-separated list of enabled ciphers. Applicable for FTP, HTTP, SSH, PeSIT",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fipsCiphers",
            "in": "query",
            "description": "Comma-separated list of enabled FIPS ciphers. Applicable for FTP, HTTP, SSH, PeSIT",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "enabledSslProtocols",
            "in": "query",
            "description": "The suite of protocols available for the server. Applicable for FTP, HTTP, AS2, PeSIT",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isFipsEnabled",
            "in": "query",
            "description": "FIPS transfer mode. Applicable for FTP, HTTP, SSH, AS2, PeSIT",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "isFtpsEnabled",
            "in": "query",
            "description": "Controls whether FTPS is enabled.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "isFtpEnabled",
            "in": "query",
            "description": "Controls whether FTP is enabled.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sslKeyAlgorithm",
            "in": "query",
            "description": "FTP server SSL key algorithm.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sslProtocol",
            "in": "query",
            "description": "Server SSL protocol. Applicable for FTP, HTTP",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sslTrustAlgorithm",
            "in": "query",
            "description": "FTP SSL trust algorithm.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "certificateAlias",
            "in": "query",
            "description": "Server certificate alias for FTP, HTTP, SSH server, used for FTPS, HTTPS, SSH connections.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clientCertificateResolution",
            "in": "query",
            "description": "Controls the status of FTPS, HTTPS, AS2, SSH, PeSIT client certificate authentication.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "none",
                "optional",
                "required"
              ]
            }
          },
          {
            "name": "clientPasswordAuth",
            "in": "query",
            "description": "Controls if password authentication is enabled as a user authentication method on the SSH server.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "default",
                "disabled"
              ]
            }
          },
          {
            "name": "passivePortBase",
            "in": "query",
            "description": "Passive mode base port, 0 means 'let system choose port'. Applicable for FTP",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "passivePortNumber",
            "in": "query",
            "description": "Passive mode port range, 0 means 'there are no port range restrictions'. Applicable for FTP",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "httpPort",
            "in": "query",
            "description": "HTTP server bind port.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maximum": 65535,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "httpsPort",
            "in": "query",
            "description": "HTTPS server bind port.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maximum": 65535,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "isHttpEnabled",
            "in": "query",
            "description": "HTTP status.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "isHttpsEnabled",
            "in": "query",
            "description": "HTTPS status.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "httpHost",
            "in": "query",
            "description": "HTTP host",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "httpsHost",
            "in": "query",
            "description": "HTTPS host",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "loginFormat",
            "in": "query",
            "description": "How will the client get challenged for authentication. Applicable for HTTP",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "HTML",
                "BA",
                "ERR",
                "PREAUTH"
              ]
            }
          },
          {
            "name": "allowedAuthenticationParameters",
            "in": "query",
            "description": "HTTP allowed authentication parameters represented as a semicolon separated list.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "allowedAuthenticationParametersMaxSize",
            "in": "query",
            "description": "HTTP allowed authentication parameters maximum size in bytes.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "name": "isHstsEnabled",
            "in": "query",
            "description": "Enable or disable HSTS for HTTP, AS2 Server. On change, the server must be restarted.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "contentSecurityPolicy",
            "in": "query",
            "description": "Specifies the value of the Content-Security-Policy header for the HTTP server.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "xssProtection",
            "in": "query",
            "description": "Specifies the value of the X-XSS-Protection header for the HTTP server. Accepted values are: 0 | 1 | 1; mode=block |1; report=<reporting url>\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "contentTypeOptions",
            "in": "query",
            "description": "Specifies the value of the X-Content-Type-Options header for the HTTP server. Accepted value: nosniff\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "referrerPolicy",
            "in": "query",
            "description": "Specifies the value of the Referrer-Policy header for the HTTP server. Accepted values are: no-referrer|no-referrer-when-downgrade|origin|origin-when-cross-origin |same-origin|strict-origin|strict-origin-when-cross-origin|unsafe-url\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expectCt",
            "in": "query",
            "description": "Specifies the value of the Expect-CT header for the HTTP server. Accepted value is: max-age=<age>; enforce; report-uri=<uri>. The enforce and report-uri directives are optional.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "httpSecuritySameSite",
            "in": "query",
            "description": "Specifies value for the SameSite cookie attribute for http. Valid values: None, Lax, Strict. Default value when not set: Strict.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "redirectHostname",
            "in": "query",
            "description": "When set, all subsequent to first requests to the ST Web client will be bound to that hostname.\nThis should be used in the case where a DNS switch occurs to avoid requests getting split across different nodes.\nApplicable for HTTP.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isScpEnabled",
            "in": "query",
            "description": "Secure Copy (SCP) status",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "isSftpEnabled",
            "in": "query",
            "description": "Secure File TransferProtocol (SFTP) status",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "keyExchangeAlgorithms",
            "in": "query",
            "description": "Comma-separated list of supported Key Exchange algorithms for the current SSH server. This option is not honored when FIPS mode is enabled.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fipsKeyExchangeAlgorithms",
            "in": "query",
            "description": "Comma-separated list of supported Key Exchange algorithms in FIPS mode for the current SSH server.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "minDiffieHellmanGroupExchangeKeySize",
            "in": "query",
            "description": "Define the minimum key size for Diffie-Hellman exchange algorithms group supported by the current SSH server. This value is honored if Diffie-Hellman key exchange algorithm is defined as supported in keyExchangeAlgorithms parameter value.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "publicKeys",
            "in": "query",
            "description": "Comma-separated list of supported public keys for client certificate authentication to current SSH server. This option is not honored when FIPS mode is enabled. The first entry will be set as preferred public key for authentication to SSH daemon.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fipsPublicKeys",
            "in": "query",
            "description": "Comma-separated list of supported public keys in FIPS mode for client certificate authentication to current SSH server.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "allowedMacs",
            "in": "query",
            "description": "Comma-separated list of supported MAC algorithms for current SSH server. The first one will be set as preferred MAC algorithm. This option is not honored when FIPS mode is enabled.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fipsAllowedMacs",
            "in": "query",
            "description": "Comma-separated list of supported MAC algorithms in FIPS mode for current SSH server.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "nonSslListenerEnabled",
            "in": "query",
            "description": "AS2 non-SSL listener status.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "nonSslListenerHost",
            "in": "query",
            "description": "AS2 non-SSL host",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "nonSslListenerPort",
            "in": "query",
            "description": "AS2 non-SSL port",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maximum": 65535,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "sslListenerEnabled",
            "in": "query",
            "description": "AS2 SSL listener status",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sslListenerHost",
            "in": "query",
            "description": "AS2 SSL host",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sslListenerPort",
            "in": "query",
            "description": "AS2 SSL port",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maximum": 65535,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "enabledCipherSuites",
            "in": "query",
            "description": "Comma-separated list of AS2 enabled ciphers.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fipsEnabledCipherSuites",
            "in": "query",
            "description": "Comma-separated list of AS2 enabled FIPS ciphers.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "keyAlgorithm",
            "in": "query",
            "description": "AS2 key algorithm.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "keyAlias",
            "in": "query",
            "description": "AS2 key alias",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isReceiverEnabled",
            "in": "query",
            "description": "Whether AS2 receiving is enabled.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "isPesitEnabled",
            "in": "query",
            "description": "PeSIT plain port enabled/disabled status",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "isPesitSslEnabled",
            "in": "query",
            "description": "PeSIT SSL port enabled/disabled status",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "isCftSslEnabled",
            "in": "query",
            "description": "PeSIT CFT SSL port enabled/disabled status",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "isPtcpEnabled",
            "in": "query",
            "description": "PeSIT over parallel-TCP plain port enabled/disabled status",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "isPtcpSslEnabled",
            "in": "query",
            "description": "PeSIT over parallel-TCP SSL port enabled/disabled status",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pesitPort",
            "in": "query",
            "description": "PeSIT plain port",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maximum": 65535,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "pesitSslPort",
            "in": "query",
            "description": "PeSIT SSL port (non CFT compatible)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maximum": 65535,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "cftSslPort",
            "in": "query",
            "description": "PeSIT CFT SSL port (CFT compatible)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maximum": 65535,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "ptcpPort",
            "in": "query",
            "description": "PeSIT over parallel-TCP plain port",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maximum": 65535,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "ptcpSslPort",
            "in": "query",
            "description": "PeSIT over parallel-TCP SSL port",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maximum": 65535,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "cftSslKeyAlgorithm",
            "in": "query",
            "description": "PeSIT CFT SSL key algorithm",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cftSslKeyAlias",
            "in": "query",
            "description": "PeSIT CFT SSL key alias",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cftSslProtocol",
            "in": "query",
            "description": "PeSIT CFT SSL protocol",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cftSslTrustAlgorithm",
            "in": "query",
            "description": "PeSIT CFT SSL trust algorithm",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ptcpKeyAlgorithm",
            "in": "query",
            "description": "PeSIT pTCP SSL key algorithm",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ptcpKeyAlias",
            "in": "query",
            "description": "PeSIT pTCP SSL key alias",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ptcpProtocol",
            "in": "query",
            "description": "PeSIT pTCP SSL protocol",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ptcpTrustAlgorithm",
            "in": "query",
            "description": "PeSIT pTCP SSL trust algorithm",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pesitKeyAlgorithm",
            "in": "query",
            "description": "PeSIT SSL key algorithm",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pesitKeyAlias",
            "in": "query",
            "description": "PeSIT SSL key alias",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pesitSslProtocol",
            "in": "query",
            "description": "PeSIT SSL protocol",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pesitTrustAlgorithm",
            "in": "query",
            "description": "PeSIT SSL trust algorithm",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "autodetectTlsModeListenerEnabled",
            "in": "query",
            "description": "Whether the PeSIT autodetect TLS mode is enabled.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "autodetectTlsModeListenerPort",
            "in": "query",
            "description": "The PeSIT autodetect TLS mode listener port.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maximum": 65535,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "autodetectTlsModeListenerKeyAlgorithm",
            "in": "query",
            "description": "The autodetect TLS mode listener key algorithm. Applicable for PeSIT.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "autodetectTlsModeListenerKeyAlias",
            "in": "query",
            "description": "The autodetect TLS mode listener key alias. Applicable for PeSIT.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "autodetectTlsModeListenerProtocol",
            "in": "query",
            "description": "The autodetect TLS mode listener protocol. Applicable for PeSIT.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "autodetectTlsModeListenerTrustAlgorithm",
            "in": "query",
            "description": "The autodetect TLS mode listener trust algorithm. Applicable for PeSIT.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerConfigurations"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "tags": [
          "servers"
        ],
        "summary": "Create server with a specific configuration.",
        "operationId": "createServer",
        "requestBody": {
          "description": "Server configuration.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/servers_body"
              },
              "examples": {
                "FtpServerConfiguration": {
                  "$ref": "#/components/examples/FtpServerConfigurationExample"
                },
                "HttpServerConfiguration": {
                  "$ref": "#/components/examples/HttpServerConfigurationExample"
                },
                "SshServerConfiguration": {
                  "$ref": "#/components/examples/SshServerConfigurationExample"
                },
                "As2ServerConfiguration": {
                  "$ref": "#/components/examples/As2ServerConfigurationExample"
                },
                "PesitServerConfiguration": {
                  "$ref": "#/components/examples/PesitServerConfigurationExample"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created - the request has succeeded and a new resource has been created as a result of it."
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "409": {
            "description": "Conflict - duplicate entity."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/servers/{name}": {
      "get": {
        "tags": [
          "servers"
        ],
        "summary": "Get a server configuration.",
        "description": "`Implementation note`: When trying to filter by fields exclusive to a certain server,\nthe protocol property must be specified.\n",
        "operationId": "getServer",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "The name of the server configuration to be updated.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "The server configuration's fields to return.\n\n**Note:** The protocol field will always be present.\n",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "protocol",
            "in": "query",
            "description": "Server's protocol.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/servers_body"
                },
                "examples": {
                  "FtpServerConfiguration": {
                    "$ref": "#/components/examples/FtpServerConfigurationExample"
                  },
                  "HttpServerConfiguration": {
                    "$ref": "#/components/examples/HttpServerConfigurationExample"
                  },
                  "SshServerConfiguration": {
                    "$ref": "#/components/examples/SshServerConfigurationExample"
                  },
                  "As2ServerConfiguration": {
                    "$ref": "#/components/examples/As2ServerConfigurationExample"
                  },
                  "PesitServerConfiguration": {
                    "$ref": "#/components/examples/PesitServerConfigurationExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "tags": [
          "servers"
        ],
        "summary": "Replace an existing server configuration.",
        "operationId": "updateServer",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "The name of the server configuration to be updated.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Server configuration.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/servers_name_body"
              },
              "examples": {
                "FtpServerConfiguration": {
                  "$ref": "#/components/examples/FtpServerConfigurationExample"
                },
                "HttpServerConfiguration": {
                  "$ref": "#/components/examples/HttpServerConfigurationExample"
                },
                "SshServerConfiguration": {
                  "$ref": "#/components/examples/SshServerConfigurationExample"
                },
                "As2ServerConfiguration": {
                  "$ref": "#/components/examples/As2ServerConfigurationExample"
                },
                "PesitServerConfiguration": {
                  "$ref": "#/components/examples/PesitServerConfigurationExample"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content - successful operation."
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "409": {
            "description": "Conflict - duplicate entity."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "delete": {
        "tags": [
          "servers"
        ],
        "summary": "Delete a server.",
        "operationId": "deleteServer",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "The name of the server to be deleted.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content - successful operation."
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "head": {
        "tags": [
          "servers"
        ],
        "summary": "Check if a server configuration exists.",
        "operationId": "serverExists",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "The name of the server configuration to be updated.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - successful operation."
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "patch": {
        "tags": [
          "servers"
        ],
        "summary": "Partially update an existing server configuration.",
        "operationId": "partiallyUpdateServer",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "The name of the server configuration to be updated.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Server configuration that need to be updated for the specified account.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content - successful operation."
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "409": {
            "description": "Conflict - duplicate entity."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/servers/operations": {
      "post": {
        "tags": [
          "servers"
        ],
        "summary": "Start or stop servers.",
        "operationId": "serverOperation",
        "parameters": [
          {
            "name": "serverName",
            "in": "query",
            "description": "The server name",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "operation",
            "in": "query",
            "description": "Which server operation to be performed.",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "start",
                "stop"
              ]
            }
          },
          {
            "name": "timeout",
            "in": "query",
            "description": "Total timeout (in seconds) for waiting a response from a server.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "minimum": 150,
              "type": "integer",
              "default": 150
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The server operation was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerStatuses"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/daemons": {
      "get": {
        "tags": [
          "daemons"
        ],
        "summary": "Get daemons statuses.",
        "operationId": "getDaemonsStatus",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "The daemon's fields to return.",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return the daemons statuses.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DaemonsStatus"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/daemons/operations": {
      "post": {
        "tags": [
          "daemons"
        ],
        "summary": "Start/stop particular daemon or daemons.",
        "operationId": "daemonOperation",
        "parameters": [
          {
            "name": "daemon",
            "in": "query",
            "description": "The daemon name to start. Leave it empty to start all daemons (FTP, HTTP, SSH, AS2, PeSIT).",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "http",
                "ftp",
                "ssh",
                "as2",
                "pesit"
              ]
            }
          },
          {
            "name": "timeout",
            "in": "query",
            "description": "Total timeout (in seconds) for waiting a response from a server. In a graceful stop, the timeout parameter refers to the time (in seconds) for which the existing connections are left to complete their job. If not specified (left blank) the particular daemon server configuration timeout will be used. In a non-graceful stop it refers to the total timeout (in seconds) for waiting a response from a server.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "operation",
            "in": "query",
            "description": "Which daemons operation to be performed.",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "start",
                "stop"
              ]
            }
          },
          {
            "name": "graceful",
            "in": "query",
            "description": "Whether to stop daemon gracefully.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DaemonOperationResults"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/daemons/{name}": {
      "get": {
        "tags": [
          "daemons"
        ],
        "summary": "Get daemon configuration.",
        "operationId": "getDaemonConfiguration",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "The daemon name to get the configuration of.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "enum": [
                "ssh"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SshDaemonConfiguration"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "tags": [
          "daemons"
        ],
        "summary": "Replace an existing daemon configuration.",
        "description": "`Note:` Update of the daemon configuration requires a restart of the daemon in order to take effect.\n",
        "operationId": "updateDaemonConfiguration",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "The daemon name to update the configuration of.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "enum": [
                "ssh"
              ]
            }
          }
        ],
        "requestBody": {
          "description": "Server configuration.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SshDaemonConfiguration"
              },
              "examples": {
                "SshDaemonConfiguration": {
                  "$ref": "#/components/examples/SshDaemonConfigurationExample"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content - successful operation."
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "409": {
            "description": "Conflict - duplicate entity."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "patch": {
        "tags": [
          "daemons"
        ],
        "summary": "Partially update an existing daemon configuration.",
        "description": "`Note:` Update of the daemon configuration requires a restart of the daemon in order to take effect.\n",
        "operationId": "partiallyUpdateDaemonConfiguration",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "The daemon name to update the configuration of.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "enum": [
                "ssh"
              ]
            }
          }
        ],
        "requestBody": {
          "description": "Daemon configuration that need to be updated.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content - successful operation."
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "409": {
            "description": "Conflict - duplicate entity."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/statisticsSummary/generateReport": {
      "get": {
        "tags": [
          "statisticsSummary"
        ],
        "summary": "Generate statistics summary report.",
        "description": "Generate statistics summary report for a given date range.",
        "operationId": "generateStatisticsSummary",
        "parameters": [
          {
            "name": "startDate",
            "in": "query",
            "description": "The begging date of the date frame of the generated report. **Must be in the following format 'dd/MM/yyyy'.**",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "The ending date of the date frame of the generated report.\nCurrent date can not be included in the report. **Must be in the following format 'dd/MM/yyyy'.**\n",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - successful operation."
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/statisticsSummary/activeUsers": {
      "get": {
        "tags": [
          "statisticsSummary"
        ],
        "summary": "Return the Active Users",
        "description": "Return the active users with respective login times.",
        "operationId": "getActiveUsers",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Defines maximum count of returned entries. Expects positive integer value. If this parameter is not specified, then SecureTransport sets a default one. This parameter is used in conjunction with offset query parameter to get entries at portions.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Defines the first entry number of an ordered result to get; last entry number to return is (offset + limit - 1). Expects positive integer value. If this parameter is not specified, then SecureTransport sets a default one. This parameter is used in conjunction with limit query parameter to get entries at portions.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "The configuration option's fields to return.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "The login name of the user.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lastAccessTime.from",
            "in": "query",
            "description": "Search for logins after a specified time.\n\n**Note:** Format must be *EEE, dd MMM yyyy HH:mm:ss Z*, *yyyy-MM-dd* or a timestamp.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lastAccessTime.to",
            "in": "query",
            "description": "Search for logins before a specified time.\n\n**Note:** Format must be *EEE, dd MMM yyyy HH:mm:ss Z*, *yyyy-MM-dd* or a timestamp.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lastAdhocAccessTime.from",
            "in": "query",
            "description": "Search for adhoc access after a specified time.\n\n**Note:** Format must be *EEE, dd MMM yyyy HH:mm:ss Z*, *yyyy-MM-dd* or a timestamp.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lastAdhocAccessTime.to",
            "in": "query",
            "description": "Search for adhoc access before a specified time.\n\n**Note:** Format must be *EEE, dd MMM yyyy HH:mm:ss Z*, *yyyy-MM-dd* or a timestamp.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActiveUsersResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/clusterServices": {
      "get": {
        "tags": [
          "clusterServices"
        ],
        "summary": "Get the status of particular service.",
        "operationId": "getServiceStatus",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "The cluster service's fields to return.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "serviceName",
            "in": "query",
            "description": "The service name to get the status of.",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "FolderMonitor",
                "Scheduler"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterServiceStatus"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/clusterServices/operations": {
      "post": {
        "tags": [
          "clusterServices"
        ],
        "summary": "Operations on particular service.",
        "operationId": "clusterServiceOperation",
        "parameters": [
          {
            "name": "serviceName",
            "in": "query",
            "description": "The service name to execute operation.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "FolderMonitor",
                "Scheduler"
              ]
            }
          },
          {
            "name": "operation",
            "in": "query",
            "description": "Operation type.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "start",
                "stop"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterServiceOperationResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/transactionManager": {
      "get": {
        "tags": [
          "transactionManager"
        ],
        "summary": "Get the status of Transaction Manager.",
        "operationId": "statusTransactionManager",
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionManagerStatus"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/transactionManager/operations": {
      "post": {
        "tags": [
          "transactionManager"
        ],
        "summary": "Stops Transaction Manager.",
        "operationId": "stopTM",
        "parameters": [
          {
            "name": "timeout",
            "in": "query",
            "description": "In a graceful stop, the timeout parameter refers to the time (in seconds) for which any existing events in TM should be processed. That includes server side transfers, post processing actions, advanced routing operations. If timeout is not specified (left blank) the value from the configuration option TransactionManager.GracefulShutdownTimeout will be used.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "operation",
            "in": "query",
            "description": "Which TM operation to be performed.",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "stop"
              ]
            }
          },
          {
            "name": "graceful",
            "in": "query",
            "description": "Whether to stop TM gracefully.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionManagerOperationResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/configurations/options": {
      "get": {
        "tags": [
          "configurations"
        ],
        "summary": "Get all configuration options.",
        "description": "`Permissions`: \"SERVER_CONFIGURATION_FORM\", \"SUPPORT_TOOL_CONFIGURATION_FORM\".\n\n**Known Issue:** The configuration options collection does not comply with the common json objects representation.      \n",
        "operationId": "getOptions",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Specify name property for configuration option. Wildcard search available.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Defines maximum count of returned entries. Expects positive integer value. If this parameter is not specified, then SecureTransport sets a default one. This parameter is used in conjunction with offset query parameter to get entries at portions.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Defines the first entry number of an ordered result to get; last entry number to return is (offset + limit - 1). Expects positive integer value. If this parameter is not specified, then SecureTransport sets a default one. This parameter is used in conjunction with limit query parameter to get entries at portions.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "The configuration option's fields to return.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isLocal",
            "in": "query",
            "description": "Whether to return local or global options.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "readOnly",
            "in": "query",
            "description": "Whether to return only unmodifiable options.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ConfigurationOption"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/configurations/options/{name}": {
      "get": {
        "tags": [
          "configurations"
        ],
        "summary": "Get a configuration option.",
        "description": "`Permissions`: \"SERVER_CONFIGURATION_FORM\", \"SUPPORT_TOOL_CONFIGURATION_FORM\".\n",
        "operationId": "getOption",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "The name of the configuration option to get.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "The configuration option's fields to return.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigurationOption"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "head": {
        "tags": [
          "configurations"
        ],
        "summary": "Check if a configuration option exists.",
        "operationId": "optionExists",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "The name of the configuration option.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - successful operation."
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "patch": {
        "tags": [
          "configurations"
        ],
        "summary": "Partially update a configuration option.",
        "description": "`Permissions`: \"SERVER_CONFIGURATION_FORM\", \"SUPPORT_TOOL_CONFIGURATION_FORM\".\n",
        "operationId": "updateOptionValue",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "The name of the configuration option to update.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "An array of patch operations. Only the value of an option may be updated.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content - successful operation."
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/configurations/database": {
      "get": {
        "tags": [
          "configurations"
        ],
        "summary": "Get current database configuration.",
        "operationId": "getDatabaseConfiguration",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "The database configuration's fields to return.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatabaseSettings"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "tags": [
          "configurations"
        ],
        "summary": "Update current database configuration.",
        "parameters": [
          {
            "name": "certificateFile",
            "in": "header",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/configurations_database_body"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content - successful operation."
          },
          "400": {
            "description": "Database connection configuration test failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatabaseConfigurationFailure"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/configurations/database/{componentType}": {
      "get": {
        "tags": [
          "configurations"
        ],
        "summary": "Get current database configuration for specified component type.",
        "description": "`Note` Getting the current database configuration for specified component type is applicable only on Oracle database.\n",
        "operationId": "getDatabaseConfigurations",
        "parameters": [
          {
            "name": "componentType",
            "in": "path",
            "description": "The name of the component type for which to return database configuration.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "enum": [
                "ServerLogComponent",
                "TransferLogComponent"
              ]
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "The database configuration's fields to return.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatabaseSettings"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "tags": [
          "configurations"
        ],
        "summary": "Update current database configuration for specified component type.",
        "description": "`Note` Updating the database configuration for specified component type is applicable only on Oracle database.\n",
        "parameters": [
          {
            "name": "componentType",
            "in": "path",
            "description": "The name of the component type.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "enum": [
                "ServerLogComponent",
                "TransferLogComponent"
              ]
            }
          },
          {
            "name": "certificateFile",
            "in": "header",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/database_componentType_body"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content - successful operation."
          },
          "400": {
            "description": "Database connection configuration test failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatabaseConfigurationFailure"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/configurations/database/operations": {
      "post": {
        "tags": [
          "configurations"
        ],
        "summary": "Database operations.",
        "parameters": [
          {
            "name": "operation",
            "in": "query",
            "description": "`test` - Test database configuration for main database or by component type.\n\n`restart` - Restarts the database. Applicable only on MySQL and MariaDB.\n\n`createPartitions` - Manually creates additional partitions in advance for the following days separately from the automated service. Applicable only on PostgreSQL.\n\n`certificatesGeneration` - Generates embedded database certificates with a given validity (days). Applicable only on MariaDB with secure connection enabled.\n\n`certificatesValidity` - Returns days, after which the embedded database certificates will expire. Applicable only on MariaDB.\n",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "test",
                "restart",
                "createPartitions",
                "certificatesGeneration",
                "certificatesValidity"
              ]
            }
          },
          {
            "name": "numberOfPartitions",
            "in": "query",
            "description": "Number of partitions that will be created. Accepted range (3 to 365).\n\n`Note` Used for `createPartitions` operation.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maximum": 365,
              "minimum": 3,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "certificatesValidityPeriod",
            "in": "query",
            "description": "Days for which the internalDB certificates will be valid.\n\n`Note` Used for `certificatesGeneration` operation.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/database_operations_body"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK - successful operation."
          },
          "204": {
            "description": "No Content - successful operation."
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "405": {
            "description": "Method Not Allowed - request method is not supported by the target resource."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/configurations/sentinel": {
      "get": {
        "tags": [
          "configurations"
        ],
        "summary": "Get the current Sentinel configuration on the ST server.",
        "description": "`Permissions`: \"MASTER_SENTINEL_SETTINGS\"\n",
        "operationId": "getSentinelConfig",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "The sentinel configuration's fields to return.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Sentinel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "tags": [
          "configurations"
        ],
        "summary": "Replace the existing Sentinel configuration on the ST server.",
        "description": "`Permissions`: \"MASTER_SENTINEL_SETTINGS\"\n",
        "operationId": "updateSentinelConfig",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Sentinel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content - successful operation."
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "409": {
            "description": "Conflict - duplicate entity."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "patch": {
        "tags": [
          "configurations"
        ],
        "summary": "Partially update the existing Sentinel configuration on the ST server.",
        "description": "`Permissions`: \"MASTER_SENTINEL_SETTINGS\"\n",
        "operationId": "partiallyUpdateSentinelConfig",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content - successful operation."
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "409": {
            "description": "Conflict - duplicate entity."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/configurations/loginSettings": {
      "get": {
        "tags": [
          "configurations"
        ],
        "summary": "Get login settings.",
        "operationId": "getLoginSettings",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "The login setting's fields to return.\n\n**Note:** The certificateIssuer field will always be present.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200_7"
                },
                "examples": {
                  "Internal": {
                    "$ref": "#/components/examples/InternalLoginSettingsExample"
                  },
                  "Trusted": {
                    "$ref": "#/components/examples/TrustedLoginSettingsExample"
                  },
                  "Other": {
                    "$ref": "#/components/examples/OtherLoginSettingsExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "tags": [
          "configurations"
        ],
        "summary": "Replace an existing login settings.",
        "operationId": "updateLoginSettings",
        "requestBody": {
          "description": "Object to update.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/configurations_loginSettings_body"
              },
              "examples": {
                "Internal": {
                  "$ref": "#/components/examples/InternalLoginSettingsExample"
                },
                "Trusted": {
                  "$ref": "#/components/examples/TrustedLoginSettingsExample"
                },
                "Selected": {
                  "$ref": "#/components/examples/SelectedLoginSettingsExample"
                },
                "Other": {
                  "$ref": "#/components/examples/OtherLoginSettingsExample"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content - successful operation."
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "409": {
            "description": "Conflict - duplicate entity."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "patch": {
        "tags": [
          "configurations"
        ],
        "summary": "Partially update the current login settings on ST server.",
        "operationId": "partiallyUpdateLoginSettings",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content - successful operation."
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "409": {
            "description": "Conflict - duplicate entity."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/configurations/allowedSTServers": {
      "get": {
        "tags": [
          "configurations"
        ],
        "summary": "Get allowed ST servers.",
        "operationId": "getAllowedSTServers",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "The limit of the listed rows. The limit parameter can only have a non-negative integer value. If the limit parameter is set to 0 or it is null, then its value will be the value of the global server configuration parameter named 'Webservices.EntriesPerPage' (which by default has value 100).",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The initial row to list all administrators. The offset parameter can only have a non-negative integer value. If this parameter is not set, then it is considered 0.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AllowedSTServersResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "tags": [
          "configurations"
        ],
        "summary": "Replace the list of allowed ST Servers.",
        "operationId": "updateAllowedSTServers",
        "requestBody": {
          "description": "Object to update.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AllowedSTServers"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content - successful operation."
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "409": {
            "description": "Conflict - duplicate entity."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "patch": {
        "tags": [
          "configurations"
        ],
        "summary": "Partially update the list of allowed ST Servers.",
        "operationId": "partiallyUpdateAllowedSTServers",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content - successful operation."
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "409": {
            "description": "Conflict - duplicate entity."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/configurations/keystorePassword": {
      "put": {
        "tags": [
          "configurations"
        ],
        "summary": "Replace an existing keystore password.",
        "operationId": "changeKeystorePassword",
        "requestBody": {
          "description": "Object to update.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/KeystorePassword"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content - successful operation."
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "409": {
            "description": "Conflict - duplicate entity."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/configurations/fileArchiving": {
      "get": {
        "tags": [
          "configurations"
        ],
        "summary": "Get file archiving options on ST server.",
        "operationId": "getFileArchivingConfig",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "The file archiving's fields to return.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileArchiving"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "tags": [
          "configurations"
        ],
        "summary": "Replace an existing file archiving.",
        "operationId": "updateFileArchivingConfig",
        "requestBody": {
          "description": "Object to update.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FileArchiving"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content - successful operation."
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "409": {
            "description": "Conflict - duplicate entity."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "patch": {
        "tags": [
          "configurations"
        ],
        "summary": "Partially update file archiving settings on ST server.",
        "operationId": "partiallyUpdateFileArchivingConfig",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content - successful operation."
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "409": {
            "description": "Conflict - duplicate entity."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/configurations/clusterManagement": {
      "get": {
        "tags": [
          "configurations"
        ],
        "summary": "Get collection of servers information on ST server.",
        "operationId": "getServersInfo",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "The fields of cluster information to return.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ClusterInformation"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "tags": [
          "configurations"
        ],
        "summary": "Add a server.",
        "description": "Applicable only in EC.",
        "operationId": "addServer",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/configurations_clusterManagement_body"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created - the request has succeeded and a new resource has been created as a result of it."
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "405": {
            "description": "Method Not Allowed - request method is not supported by the target resource."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "409": {
            "description": "Conflict - duplicate entity."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/configurations/clusterManagement/{serverAddress}": {
      "get": {
        "tags": [
          "configurations"
        ],
        "summary": "Get server information.",
        "operationId": "getServerInfo",
        "parameters": [
          {
            "name": "serverAddress",
            "in": "path",
            "description": "The server address to retrieve.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "The cluster node's fields to return.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterNode"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "delete": {
        "tags": [
          "configurations"
        ],
        "summary": "Delete a server address.",
        "description": "Applicable only in EC.",
        "operationId": "deleteServerEC",
        "parameters": [
          {
            "name": "serverAddress",
            "in": "path",
            "description": "The name of the server address that will be deleted.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content - successful operation."
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "head": {
        "tags": [
          "configurations"
        ],
        "summary": "Check if server address exists.",
        "description": "Applicable only in EC.",
        "operationId": "serverAddressExist",
        "parameters": [
          {
            "name": "serverAddress",
            "in": "path",
            "description": "The server address to check for existance.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - successful operation."
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/configurations/clusterManagement/nodeThreshold": {
      "get": {
        "tags": [
          "configurations"
        ],
        "summary": "Get node threshold.",
        "description": "Applicable only in EC.",
        "operationId": "getNodeThreshold",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "The node threshold's fields to return.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodeThreshold"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "tags": [
          "configurations"
        ],
        "summary": "Replace an existing node threshold.",
        "description": "Applicable only in EC.",
        "operationId": "updateNodeThreshold",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NodeThreshold"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content - successful operation."
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "409": {
            "description": "Conflict - duplicate entity."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "patch": {
        "tags": [
          "configurations"
        ],
        "summary": "Partially update node threshold.",
        "description": "Applicable only in EC.",
        "operationId": "partiallyUpdateNodeThreshold",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content - successful operation."
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "409": {
            "description": "Conflict - duplicate entity."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/configurations/clusterManagement/{serverAddress}/operations": {
      "post": {
        "tags": [
          "configurations"
        ],
        "summary": "Bounce the server.",
        "description": "Applicable only in SC.",
        "operationId": "bounceServer",
        "parameters": [
          {
            "name": "serverAddress",
            "in": "path",
            "description": "The server address.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "operation",
            "in": "query",
            "description": "Operation type.",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "bounce"
              ]
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content - successful operation."
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "409": {
            "description": "Conflict - duplicate entity."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/configurations/clusterManagement/operations": {
      "post": {
        "tags": [
          "configurations"
        ],
        "summary": "Execute operations over cluster servers.",
        "description": "Applicable only in SC.",
        "operationId": "serverOperations",
        "parameters": [
          {
            "name": "operation",
            "in": "query",
            "description": "Operation type.",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "bounce",
                "synchronize"
              ]
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content - successful operation."
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "409": {
            "description": "Conflict - duplicate entity."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/accountSetup": {
      "post": {
        "tags": [
          "accountSetup"
        ],
        "summary": "Setup a new or existing account with certificates, transfer sites, transfer profiles and subscriptions.",
        "description": "Setup a new or existing account with certificates, transfer sites, transfer profiles and subscriptions.\nWhen the Content-Type and Accept headers are `multipart/mixed`, certificates can be imported from a file, in which they are separated\nby a boundary and the following headers are specified for each file:\n\nContent-Type: application/octet-stream\n\nContent-Disposition: attachment;\n\nkeyname:<name specified in the respective certificate body>\n\nencoded: false\n\n**Note:** Due to an issue with the swagger schema, when importing certificates the json must also have a starting boundary and a Content-Type: application/json.\n\n**Known issue:** The import of x509 certificates of local and private usage can not be done via text representation of the certificate, unless it is Base64 encoded (the 'encoded' header serves to show whether this is the case or not). If the encrypted certificate has not been encoded, it must be supplied in a PKCS #12 format file rather than plain text.\n\n**Known issue:** Certificate import requires additional file with the certificate content because of swagger limitations (refer to https://github.com/swagger-api/swagger-ui/issues/5090).\n",
        "requestBody": {
          "description": "Account setup to be created.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Flow"
              }
            },
            "multipart/mixed; boundary=BOUNDARY": {
              "schema": {
                "$ref": "#/components/schemas/MultiPartFlow"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FlowResponseArray"
                }
              },
              "multipart/mixed": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200_8"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/accountSetup/{name}": {
      "get": {
        "tags": [
          "accountSetup"
        ],
        "summary": "Get an account and its certificates, transfer sites, transfer profiles, routes and subscriptions.",
        "description": "Get an account and its certificates, transfer sites, transfer profiles, routes and subscriptions.\nWhen Accept header is set to `application/json`, only certificate properties would be returned.\nWhen Accept header is set to `multipart/mixed`, certificates would be exported.\n",
        "operationId": "getFlows",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "The account name to search for.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Flow"
                }
              },
              "multipart/mixed": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200_9"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/events": {
      "get": {
        "tags": [
          "events"
        ],
        "summary": "Get collection of events on the ST server.",
        "description": "`Permissions`: \\\"TRANSFER_LOG_FORM\\\" and \\\"STATISTICS_MONITOR_ACTION\\\"\n",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "The limit of the listed rows. The limit parameter can has only nonnegative integer value. If the limit parameter is set to 0 or it is null then its value will be the value of the global server configuration parameter named 'Webservices.EntriesPerPage' (which by default has value 100).\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The start row to list. The offset parameter can has only nonnegative integer value. If this parameter is not set, then it is considered 0.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "The fields of event to return.",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "The id of the event.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "agentTrigger",
            "in": "query",
            "description": "Event's trigger.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "agentType",
            "in": "query",
            "description": "Event type.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "arrivalTime",
            "in": "query",
            "description": "Event arrival time.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "clusterNode",
            "in": "query",
            "description": "The cluster node on which the event is processing.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "eventGroup",
            "in": "query",
            "description": "Event group.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limited",
            "in": "query",
            "description": "Client initiated transfers.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "nextProcessingTime",
            "in": "query",
            "description": "Next processing time.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "processorType",
            "in": "query",
            "description": "Defines which task processor should take care of a task.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "DEFAULT",
                "ADVANCED_ROUTING",
                "PESIT"
              ]
            }
          },
          {
            "name": "recovered",
            "in": "query",
            "description": "Whether the event is recovered or not.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "retryCount",
            "in": "query",
            "description": "Event retry number.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Event status.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subscriptionId",
            "in": "query",
            "description": "Subscription id which event is associated with.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountId",
            "in": "query",
            "description": "Account id which event is associated with.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fullTarget",
            "in": "query",
            "description": "File location.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lastHeartbeatBefore",
            "in": "query",
            "description": "Timestamp (UTC) before the last updated heartbeat time for the persisted event.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lastHeartbeatAfter",
            "in": "query",
            "description": "Timestamp (UTC) after the last updated heartbeat time for the persisted event.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/events/{id}": {
      "get": {
        "tags": [
          "events"
        ],
        "summary": "Get an event.",
        "description": "`Permissions`: \\\"TRANSFER_LOG_FORM\\\" and \\\"STATISTICS_MONITOR_ACTION\\\"\n",
        "operationId": "getEvent",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The event id to search for.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "The event's fields to return.",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/events/operations": {
      "post": {
        "tags": [
          "events"
        ],
        "summary": "Perform operation on events.",
        "description": "`Permissions`: \"TRANSFER_LOG_FORM\" and \\\"STATISTICS_MONITOR_ACTION\\\"\n",
        "operationId": "deleteEvent",
        "parameters": [
          {
            "name": "operation",
            "in": "query",
            "description": "Which event operation to be performed.",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "delete"
              ]
            }
          }
        ],
        "requestBody": {
          "description": "Collection of event ids.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventDelete"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventDeleteResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - server could not understand the request due to invalid syntax."
          },
          "401": {
            "description": "Unauthorized - incorrect login credentials."
          },
          "403": {
            "description": "Forbidden - insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Not Found - entity with specified parameter can not be found on the ST server."
          },
          "406": {
            "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
          },
          "415": {
            "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
          },
          "500": {
            "description": "Internal Server Error"
          },
          "503": {
            "description": "Service Unavailable."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AccountResult": {
        "type": "object",
        "properties": {
          "resultSet": {
            "$ref": "#/components/schemas/ResultSet"
          },
          "result": {
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/UserAccount"
                },
                {
                  "$ref": "#/components/schemas/TemplateAccount"
                },
                {
                  "$ref": "#/components/schemas/ServiceAccount"
                }
              ]
            }
          }
        }
      },
      "UserAccount": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseAccount"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "user"
              },
              "unlicensed": {
                "type": "boolean",
                "description": "This property defines if the account is an unlicensed account.",
                "default": false
              },
              "isUnlicensedUserAllowedToReply": {
                "type": "boolean",
                "description": "This property defines if the unlicensed user may reply to packages.",
                "default": false
              },
              "routingMode": {
                "type": "string",
                "description": "Accounts support PeSIT Store and Forward mode via property named 'routingMode'. There are three possible options for the routingMode: accept (the value for Routing Mode that accept transfers), reject (the value for Routing Mode that reject transfers) and ignore (the value for Routing Mode that ignores transfers). By default is 'reject'.\n",
                "enum": [
                  "reject",
                  "accept",
                  "ignore"
                ],
                "default": "reject"
              },
              "fileMaintenanceSettings": {
                "$ref": "#/components/schemas/FileMaintenanceSettingsForAccount"
              },
              "bandwidthLimits": {
                "$ref": "#/components/schemas/BandwidthLimits"
              },
              "accountMaintenanceSettings": {
                "$ref": "#/components/schemas/AccountMaintenanceSettingsForAccount"
              },
              "addressBookSettings": {
                "$ref": "#/components/schemas/AddressBookSettingsForAccount"
              },
              "user": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        ]
      },
      "BaseAccount": {
        "required": [
          "homeFolder",
          "name",
          "type"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 80,
            "minLength": 0,
            "pattern": "^(([^\\/\\;\\']*))$",
            "type": "string",
            "description": "The account name",
            "default": "string"
          },
          "homeFolder": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "The home folder on the local system used for this account. The folder path name must be a valid absolute directory name\n"
          },
          "type": {
            "type": "string",
            "description": "The account type. Type 'user' means user account; type 'service' means service account; type 'template' means account template. Acts as a discriminator.\n",
            "enum": [
              "user",
              "service",
              "template"
            ]
          },
          "uid": {
            "type": "string",
            "description": "The numeric user ID of the account. Required for SecureTransport installation running on UNIX environment.",
            "default": "10000"
          },
          "gid": {
            "type": "string",
            "description": "The numeric group ID of the account",
            "default": "10000"
          },
          "homeFolderAccessLevel": {
            "type": "string",
            "description": "The home folder access level",
            "enum": [
              "PRIVATE",
              "PUBLIC",
              "BUSINESS_UNIT"
            ]
          },
          "skin": {
            "type": "string",
            "description": "The skin templates",
            "enum": [
              "Default HTML Template",
              "Axway Jelly Ball 9",
              "SecureTransport Legacy Client",
              "Axway Box and Stripe in Blue",
              "SecureTransport Web Access Plus"
            ]
          },
          "notes": {
            "maxLength": 2048,
            "minLength": 0,
            "type": "string",
            "description": "An unstructured comments to the account",
            "default": "user"
          },
          "lastModified": {
            "type": "string",
            "description": "Last modified time for the account."
          },
          "authByEmail": {
            "type": "boolean",
            "description": "This property defines if authentication by email address is allowed for this account",
            "default": false
          },
          "disabled": {
            "type": "boolean",
            "description": "This property defines if this account is disabled. If the account is disabled: 1) Subscriptions for the account will not trigger. ; 2) Users associated with the account will not be able to login and perform any transfers\n",
            "default": false
          },
          "transfersWebServiceAllowed": {
            "type": "boolean",
            "description": "This property is an attribute name to indicate whether access to the transfers resource from the end user RESTful API is allowed.\n",
            "default": false
          },
          "pesitId": {
            "type": "string",
            "description": "This property defines the PeSIT ID which is used for defining a PeSIT partnership."
          },
          "accountCreationDate": {
            "type": "integer",
            "description": "Account creation date.",
            "format": "int64",
            "readOnly": true
          },
          "loginRestrictionPolicy": {
            "type": "string",
            "description": "The login restriction policy for this account."
          },
          "transferType": {
            "type": "string",
            "description": "This property is an attribute name to indicate the transfer type of the account's transfer site. It can be unspecified (N), internal (I), partner(E). By default is unspecified.\n",
            "enum": [
              "N",
              "I",
              "E"
            ],
            "default": "N"
          },
          "accountSubmitForApprove": {
            "type": "boolean",
            "description": "If the account has been sent for approve to 'checker' administrator.",
            "default": false
          },
          "accountVerificationStatus": {
            "type": "string",
            "description": "Verification status for the account."
          },
          "managedByCG": {
            "type": "boolean",
            "description": "This property indicates whether the account is managed by Central Governance.",
            "default": false
          },
          "businessUnit": {
            "type": "string",
            "description": "The business unit that account belongs to."
          },
          "rejectReason": {
            "maxLength": 2048,
            "type": "string",
            "description": "Reject reason."
          },
          "accountEncryptMode": {
            "type": "string",
            "description": "Account entities support repository encryption mode. There are two possible options for the encryptMode - 'ENABLED' and 'UNSPECIFIED'.\nWhen 'ENABLED' is set then repository encryption for the account is enabled.\nWhen 'UNSPECIFIED' is set then repository encryption for the account is not enabled and can be specified with EncryptClass.\n",
            "enum": [
              "UNSPECIFIED",
              "ENABLED"
            ]
          },
          "subscriptionFolderDiscovery": {
            "type": "string",
            "description": "For accounts with multiple subscriptions, the number of subscriptions and the target folder depth would impact performance.\nThere are two possible options for the subscriptionFolderDiscovery - 'ITERATIVE' and 'RECURSIVE'.\nWhen 'ITERATIVE' is set, then subscription folder discovery is performed by iteration over all of the account's subscriptions while trying to match the target folder. Should be used when the number of subscriptions is small and the target folder depth is large.\nWhen 'RECURSIVE' is set, then subscription folder discovery is performed by recursive traversal of the target folder hierarchy - the target folder is checked first, then moving up to parent folders. Should be used when the number of subscriptions is large and the target folder depth is small.\nThe default value is 'ITERATIVE'.\n",
            "enum": [
              "ITERATIVE",
              "RECURSIVE"
            ]
          },
          "fileArchivingPolicy": {
            "type": "string",
            "description": "Account entities support a custom property named 'fileArchivingPolicy' that can be set only if the global File Archiving is enabled.\nThere are three possible options for the fileArchivingPolicy - 'DEFAULT', 'DISABLED' and 'ENABLED'.\nWhen 'DEFAULT' is set, then the following apply: if the account is assigned to business unit, it will inherit its policy, otherwise, the global archiving policy applies.\nWhen 'DISABLED' is set, file archiving will be disabled for this account.\nWhen 'ENABLED' is set, file archiving will be enabled for this account.\n",
            "enum": [
              "DEFAULT",
              "DISABLED",
              "ENABLED"
            ]
          },
          "mappedUser": {
            "type": "string",
            "description": "The name of the real user mapped to this account for SecureTransport installation running on Windows environment."
          },
          "additionalAttributes": {
            "type": "object",
            "additionalProperties": {
              "maxLength": 4000,
              "minLength": 1,
              "type": "string"
            },
            "description": "Additional attributes which are defined with \"key\": \"value\" pairs. Keys should follow the pattern: [a-zA-Z0-9_.]+\nand have length between 10 and 255 characters. Key should not start with \"userVars.\", since it is\na reserved word. Both key and value cannot be blank.\n"
          },
          "contact": {
            "$ref": "#/components/schemas/AccountContact"
          },
          "adhocSettings": {
            "$ref": "#/components/schemas/AdhocSettings"
          }
        },
        "discriminator": {
          "propertyName": "type"
        }
      },
      "AccountContact": {
        "type": "object",
        "properties": {
          "email": {
            "maxLength": 255,
            "type": "string",
            "description": "The account email"
          },
          "phone": {
            "maxLength": 80,
            "type": "string",
            "description": "The account phone."
          }
        }
      },
      "AdhocSettings": {
        "type": "object",
        "properties": {
          "deliveryMethod": {
            "type": "string",
            "description": "This property defines the delivery method. When deliveryMethod is set to 'Disabled' then Adhoc is disabled and enrollmentType/implicitEnrollmentType can not be set. When deliveryMethod is set to 'Default' then it is only available on BU and Account (setting the BU to use the value and account to use the BU value). When deliveryMethod is set to 'Anonymous' then implicit enrollment types 'Anonymous' and \"\" (empty string for Select by sender) are enabled. When deliveryMethod is set to 'Account Without Enrollment' then implicit enrollment types 'Anonymous', \"\"  (empty string for Select by sender) and 'Existing Account' are enabled. When deliveryMethod is set to 'Account With Enrollment' then implicit enrollment types 'Anonymous', \"\" (empty string for Select by sender), 'Enroll unlicensed', 'Enroll licensed' are enabled          \n",
            "enum": [
              "DEFAULT",
              "DISABLED",
              "ANONYMOUS",
              "ACCOUNT_WITHOUT_ENROLLMENT",
              "ACCOUNT_WITH_ENROLLMENT",
              "CUSTOM"
            ]
          },
          "enrollmentTypes": {
            "type": "array",
            "description": "This property is used for a custom delivery method and can be set only if deliveryMethod property is set to 'Custom'\n",
            "items": {
              "type": "string"
            }
          },
          "implicitEnrollmentType": {
            "type": "string",
            "description": "The Implicit Enrollment Type value controls which option Web Access Plus selects initially in the User Access window and which enrollment type is used by the Axway Email Plug-ins. The choices depend on the enrollment types enabled by the Delivery Methods and Enrollment Types fields\n",
            "enum": [
              "ANONYMOUS_LINK",
              "CHALLENGED_LINK",
              "EXISTING_ACCOUNT",
              "ENROLL_UNLICENSED",
              "ENROLL_LICENSED"
            ]
          }
        }
      },
      "FileMaintenanceSettingsForAccount": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FileMaintenanceSettings"
          },
          {
            "type": "object",
            "properties": {
              "reportNotified": {
                "type": "string",
                "description": "Report email notifications for future action."
              },
              "warnNotified": {
                "type": "string",
                "description": "Warning email notifications for future action."
              }
            }
          }
        ]
      },
      "AccountMaintenanceSettingsForAccount": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AccountMaintenanceSettings"
          },
          {
            "type": "object",
            "properties": {
              "accountDisabledDate": {
                "type": "integer",
                "description": "Date when account has been disabled by account retention maintenance.",
                "format": "int64"
              },
              "accountNotified": {
                "type": "boolean",
                "description": "Denotes whether an email has already been sent as a notification to the current account.",
                "readOnly": true,
                "default": false
              },
              "accountPasswordNotified": {
                "type": "boolean",
                "description": "If the account password will expire in one of configured notification days, a notification mail will be sent to the email addresses configured for that user.",
                "default": false
              },
              "accountCertificateNotified": {
                "type": "boolean",
                "description": "If the account certificates will expire in one of configured notification days, a notification mail will be sent to the email addresses configured for that user.",
                "default": false
              }
            }
          }
        ]
      },
      "AddressBookSettingsForAccount": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AddressBookSettings"
          },
          {
            "type": "object",
            "properties": {
              "contacts": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AddressBookContact"
                }
              }
            }
          }
        ]
      },
      "AddressBookContact": {
        "required": [
          "fullName",
          "primaryEmail"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the address book contact"
          },
          "fullName": {
            "type": "string",
            "description": "The full name of the address book contact"
          },
          "primaryEmail": {
            "type": "string",
            "description": "The primary email of the address book contact."
          }
        }
      },
      "User": {
        "required": [
          "name",
          "passwordCredentials"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 80,
            "minLength": 0,
            "pattern": "^(([^\\+\\:\\[]*))$",
            "type": "string",
            "description": "The name of the user (the login name)",
            "default": "string"
          },
          "authExternal": {
            "type": "boolean",
            "description": "Tells if external authentication is enabled. It has value 'true' if the user authentication is done by an external authentication and 'false' if the user authentication is done by the ST system\n",
            "default": false
          },
          "lastLogin": {
            "type": "string",
            "description": "The time the user last successfully logged in. It has value null if the user never successfully logged in. The time is in RFC 2822 format - EEE, d MMM yyyy HH:mm:ss Z. Note: This property is read only property. Secure Transport server sets that property on user login.\n",
            "readOnly": true
          },
          "locked": {
            "type": "boolean",
            "description": "Test if authentication via the user login is disabled. This may be because the user has been locked or the maximum authentication attempts has been exceeded\n",
            "default": false
          },
          "failedAuthAttempts": {
            "minimum": 0,
            "type": "integer",
            "description": "The number of sequential failed authentication attempts",
            "format": "int32",
            "readOnly": true
          },
          "failedAuthMaximum": {
            "minimum": 1,
            "type": "integer",
            "description": "The number of failed authentication attempts allowed before authentication via the user is disabled. If not set, the value from configuration option Users.DefaultLockoutLimit will be taken. A value of 0 allows the user an unlimited number of attempts\n",
            "format": "int32"
          },
          "failedSshKeyAuthAttempts": {
            "minimum": 0,
            "type": "integer",
            "description": "The number of sequential failed ssh key authentication attempts",
            "format": "int32",
            "readOnly": true
          },
          "failedSshKeyAuthMaximum": {
            "minimum": 1,
            "type": "integer",
            "description": "The number of failed ssh key authentication attempts allowed before authentication via the user is disabled. If not set, the value from configuration option Users.DefaultSshKeyLockoutLimit will be taken. A value of 0 allows the user an unlimited number of attempts\n",
            "format": "int32"
          },
          "successfulAuthMaximum": {
            "minimum": 1,
            "type": "integer",
            "description": "The number of successful authentication attempts allowed within a predefined period before authentication is disabled. That period is defined globally. A value of null allows the user an unlimited number of attempts\n",
            "format": "int32"
          },
          "lastFailedAuth": {
            "type": "string",
            "description": "The time of the last unsuccessful authentication attempt. The time is in RFC 2822 format - EEE, d MMM yyyy HH:mm:ss Z. Note: This property is read only property. Secure Transport server sets that property on failed user login.\n",
            "readOnly": true
          },
          "lastFailedSshKeyAuth": {
            "type": "string",
            "description": "The time of the last unsuccessful ssh key authentication attempt. The time is in RFC 2822 format - EEE, d MMM yyyy HH:mm:ss Z. Note: This property is read only property. Secure Transport server sets that property on failed user login.\n",
            "readOnly": true
          },
          "successfulLogins": {
            "type": "integer",
            "description": "The number of successful login attempts",
            "readOnly": true
          },
          "passwordCredentials": {
            "$ref": "#/components/schemas/PasswordCredentials"
          },
          "secretQuestion": {
            "$ref": "#/components/schemas/SecretQuestion"
          }
        }
      },
      "PasswordCredentials": {
        "required": [
          "username"
        ],
        "type": "object",
        "properties": {
          "password": {
            "maxLength": 2147483647,
            "minLength": 1,
            "type": "string",
            "description": "The password. If the password property is not set then the passwordDigest property must be set and vice versa\n"
          },
          "passwordDigest": {
            "maxLength": 2147483647,
            "minLength": 1,
            "type": "string",
            "description": "The password digest. If the passwordDigest property is not set then the password property must be set and vice versa\n"
          },
          "forcePasswordChange": {
            "type": "boolean",
            "description": "Checks if password change is forced",
            "default": false
          },
          "lastPasswordChange": {
            "type": "string",
            "description": "The last password change. The time is in RFC 2822 format - EEE, d MMM yyyy HH:mm:ss Z. Note: This property is read only property. Secure Transport server sets that property on password change.\n"
          },
          "lastOwnPasswordChange": {
            "type": "string",
            "description": "The last password change by the user. The time is in RFC 2822 format - EEE, d MMM yyyy HH:mm:ss Z. Note: This property is read only property. Secure Transport server sets that property on password change by user.\n"
          },
          "passwordExpiryInterval": {
            "minimum": 1,
            "type": "integer",
            "description": "The password expiry interval. Accepts only positive integers.",
            "format": "int32"
          }
        }
      },
      "SecretQuestion": {
        "type": "object",
        "properties": {
          "secretQuestion": {
            "type": "string",
            "description": "The secret question text.",
            "readOnly": true
          },
          "secretAnswerGuessFailures": {
            "type": "integer",
            "description": "Failed attempts for guessing the secret answer.",
            "format": "int32"
          },
          "forceSecretQuestionChange": {
            "type": "boolean",
            "description": "Flag indicating if user is forced to set its secret question.",
            "default": false
          }
        }
      },
      "TemplateAccount": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseAccount"
          },
          {
            "required": [
              "templateClass"
            ],
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "template"
              },
              "isUnlicensedUserAllowedToReply": {
                "type": "boolean",
                "description": "This property defines if the unlicensed user may reply to packages.",
                "default": false
              },
              "enrolledWithExternalPass": {
                "type": "boolean",
                "description": "Wheter or not to enroll the account with external password. Note - this is only applicable for account template.",
                "default": false
              },
              "templateClass": {
                "type": "string"
              },
              "fileMaintenanceSettings": {
                "$ref": "#/components/schemas/FileMaintenanceSettingsForAccount"
              },
              "bandwidthLimits": {
                "$ref": "#/components/schemas/BandwidthLimits"
              },
              "addressBookSettings": {
                "$ref": "#/components/schemas/AddressBookSettingsForAccount"
              }
            }
          }
        ]
      },
      "ServiceAccount": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseAccount"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "service"
              },
              "routingMode": {
                "type": "string",
                "description": "Accounts support PeSIT Store and Forward mode via property named 'routingMode'. There are three possible options for the routingMode: accept (the value for Routing Mode that accept transfers), reject (the value for Routing Mode that reject transfers) and ignore (the value for Routing Mode that ignores transfers). By default is 'reject'.\n",
                "enum": [
                  "reject",
                  "accept",
                  "ignore"
                ],
                "default": "reject"
              },
              "user": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        ]
      },
      "UserAccount_1": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseAccount"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "user"
              },
              "unlicensed": {
                "type": "boolean",
                "description": "This property defines if the account is an unlicensed account.",
                "default": false
              },
              "isUnlicensedUserAllowedToReply": {
                "type": "boolean",
                "description": "This property defines if the unlicensed user may reply to packages.",
                "default": false
              },
              "routingMode": {
                "type": "string",
                "description": "Accounts support PeSIT Store and Forward mode via property named 'routingMode'. There are three possible options for the routingMode: accept (the value for Routing Mode that accept transfers), reject (the value for Routing Mode that reject transfers) and ignore (the value for Routing Mode that ignores transfers). By default is 'reject'.\n",
                "enum": [
                  "reject",
                  "accept",
                  "ignore"
                ],
                "default": "reject"
              },
              "fileMaintenanceSettings": {
                "$ref": "#/components/schemas/FileMaintenanceSettingsForAccount_1"
              },
              "bandwidthLimits": {
                "$ref": "#/components/schemas/BandwidthLimits"
              },
              "accountMaintenanceSettings": {
                "$ref": "#/components/schemas/AccountMaintenanceSettingsForAccount_1"
              },
              "addressBookSettings": {
                "$ref": "#/components/schemas/AddressBookSettingsForAccount_1"
              },
              "user": {
                "$ref": "#/components/schemas/User_1"
              }
            }
          }
        ]
      },
      "TemplateAccount_1": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseAccount"
          },
          {
            "required": [
              "templateClass"
            ],
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "template"
              },
              "isUnlicensedUserAllowedToReply": {
                "type": "boolean",
                "description": "This property defines if the unlicensed user may reply to packages.",
                "default": false
              },
              "enrolledWithExternalPass": {
                "type": "boolean",
                "description": "Wheter or not to enroll the account with external password. Note - this is only applicable for account template.",
                "default": false
              },
              "templateClass": {
                "type": "string"
              },
              "fileMaintenanceSettings": {
                "$ref": "#/components/schemas/FileMaintenanceSettingsForAccount_1"
              },
              "bandwidthLimits": {
                "$ref": "#/components/schemas/BandwidthLimits"
              },
              "addressBookSettings": {
                "$ref": "#/components/schemas/AddressBookSettingsForAccount_1"
              }
            }
          }
        ]
      },
      "ServiceAccount_1": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseAccount"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "service"
              },
              "routingMode": {
                "type": "string",
                "description": "Accounts support PeSIT Store and Forward mode via property named 'routingMode'. There are three possible options for the routingMode: accept (the value for Routing Mode that accept transfers), reject (the value for Routing Mode that reject transfers) and ignore (the value for Routing Mode that ignores transfers). By default is 'reject'.\n",
                "enum": [
                  "reject",
                  "accept",
                  "ignore"
                ],
                "default": "reject"
              },
              "user": {
                "$ref": "#/components/schemas/User_1"
              }
            }
          }
        ]
      },
      "PatchRequest": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/PatchDocument"
        }
      },
      "PatchDocument": {
        "required": [
          "op",
          "path"
        ],
        "properties": {
          "op": {
            "type": "string",
            "description": "The operation to be performed",
            "enum": [
              "add",
              "remove",
              "replace"
            ]
          },
          "path": {
            "type": "string",
            "description": "A JSON-Pointer"
          },
          "value": {
            "type": "object",
            "description": "The value to be used within the operations."
          }
        },
        "description": "PATCH Method follows *RFC 6902* and covers 3 operation types - *add*, *remove* and *replace*.\n\n**1. add**\nThe *add* operation is used in different ways depending on the target of the path being referenced.\nGenerally speaking we can use add to append to a list, add a member to an object or update the value of an existing field.\nThe add operation accepts a value member which is the value to update the referenced path.\n\n- If the target location specifies an array index or -, a new value is\ninserted into the array at the specified index or in the end of the array where order does not matter.\n\n**Note:** Some objects are being listed in the order they were persisted in the database, despite the patch operation placing it at the correct position.\n- If the target location specifies an object member that does not\nalready exist, a new member is added to the object. If this member is invalid,\nit would be ignored and would not be created.\n- If the target location specifies an object member that does exist, that member is completely updated.\n\n**2. remove**\nThe *remove* operation removes the value at the target location. The target location MUST exist for the operation to be successful.\n\n**3. replace**\nThe *replace* operation replaces the value at the target location with a new value.  The operation object MUST contain a \"value\" member\nwhose content specifies the replacement value. The target location MUST exist for the operation to be successful.\n- If the target location specifies an array index, the object at that index would be modified,\nbut the array elements could be in different order on next GET request.\n"
      },
      "IcapServerResult": {
        "type": "object",
        "properties": {
          "resultSet": {
            "$ref": "#/components/schemas/ResultSet"
          },
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IcapServer"
            }
          }
        }
      },
      "IcapServer": {
        "type": "object",
        "properties": {
          "serverEnabled": {
            "type": "boolean",
            "description": "Choose whether or not ICAP server to be enabled",
            "default": false
          },
          "basicSettings": {
            "$ref": "#/components/schemas/BasicSettings"
          },
          "scanFilteringSettings": {
            "$ref": "#/components/schemas/ScanFilteringSettings"
          },
          "headerSettings": {
            "$ref": "#/components/schemas/HeaderSettings"
          },
          "advancedConnectionSettings": {
            "$ref": "#/components/schemas/AdvancedConnectionSettings"
          },
          "advancedIcapSettings": {
            "$ref": "#/components/schemas/AdvancedIcapSettings"
          }
        },
        "description": "ICAP server object."
      },
      "BasicSettings": {
        "required": [
          "maxSize",
          "name",
          "previewSize",
          "type",
          "url"
        ],
        "type": "object",
        "properties": {
          "name": {
            "pattern": "^(([^\\/\\;\\']*))$",
            "type": "string",
            "description": "The name of the ICAP server",
            "default": "string"
          },
          "type": {
            "type": "string",
            "description": "The type of the ICAP server: INCOMING, OUTGOING or BOTH. INCOMING means that scanning will be performed by this ICAP server for all Incoming transfers: File upload, AdHoc message creation, etc. OUTGOING means that scanning will be performed by this ICAP server for all Outgoing transfers: File download, Reading of an AdHoc message, etc. BOTH means that scanning will be performed by this ICAP server for all types of transfers",
            "enum": [
              "BOTH",
              "INCOMING",
              "OUTGOING"
            ]
          },
          "url": {
            "type": "string",
            "description": "The ICAP server URL in the following format: icap://dlpav-address:port/servicename. The 'servicename' could be the same as the mode of operation - REQMOD or RESPMOD, or it could be something custom and vendor specific. Examples: icap://dlpav-address:1344/AVSCAN, icap://dlpav-address:1344/REQMOD, icap://dlpav-address:11344/RESPMOD"
          },
          "maxSize": {
            "type": "integer",
            "description": "Message maximum file size in MB to be sent to the ICAP server. If max message size is set to 0 or negative value, it is considered unlimited",
            "format": "int32"
          },
          "previewSize": {
            "type": "integer",
            "description": "Preview size in KB. If it is set to 0 or negative value, the whole file is transfered to the ICAP server, otherwise the specified size of the file is sent first. Based on the result of the preview, the scan is either complete or the rest of the file is sent for scan as well.",
            "format": "int32"
          },
          "connectionSecure": {
            "type": "boolean",
            "description": "Indicates if ICAP server should use secure connection",
            "default": false
          },
          "verifyCertificate": {
            "type": "boolean",
            "description": "Indicates if server certificates should be verified or not.",
            "default": false
          },
          "clientCertificate": {
            "type": "string",
            "description": "ID of local certificate to be used for authentication."
          },
          "fipsEnabled": {
            "type": "boolean",
            "description": "Indicates whether or not FIPS transfer mode should be used.",
            "default": false
          },
          "denyOnConnectionError": {
            "type": "boolean",
            "description": "Indicates whether or not to deny the transfer on connection failure",
            "default": false
          },
          "notifyOnIcapError": {
            "type": "boolean",
            "description": "Indicates whether or not to enable email notifications on connection failure",
            "default": false
          },
          "mailAddressesOnIcapError": {
            "type": "string",
            "description": "List of addresses to which email notifications must be sent in case of connection failure"
          },
          "notifyOnIcapDenied": {
            "type": "boolean",
            "description": "Indicates whether or not to enable email notifications on ICAP denied",
            "default": false
          },
          "mailAddressesOnIcapDenied": {
            "type": "string",
            "description": "List of addresses to which email notifications must be sent in case of ICAP deny"
          },
          "includeFilename": {
            "type": "boolean",
            "description": "Indicates whether to report the absolute path to the transferred file inside the ICAP request",
            "default": true
          }
        }
      },
      "ScanFilteringSettings": {
        "type": "object",
        "properties": {
          "policyExpression": {
            "type": "string",
            "description": "The field allows the usage of ST Expression Language. Based on this expression scanning will be performed or not. Example: ${env['DXAGENT_PROTOCOL'] ne 'ssh'}. Translation: Do not scan if the transfer is taking place over SSH protocol"
          },
          "onlyIfPartnerRecipient": {
            "type": "boolean",
            "description": "Enables or disables ICAP scanning for AdHoc messages if at least one of the recipients is partner. User type - internal or partner - is controlled by the account setting. Possible values are 'Internal' - internal accounts - and 'Partner' - external accounts. If the type of a recipient cannot be identified, the account will be considered External.",
            "default": false
          },
          "withoutBU": {
            "type": "boolean",
            "description": "Indicates whether or not to enable ICAP scanning for accounts with no Business Unit assigned",
            "default": false
          },
          "ignoredFileType": {
            "type": "string",
            "description": "List of file extensions separated by comma. Files with these extensions will not be scanned"
          }
        }
      },
      "HeaderSettings": {
        "type": "object",
        "properties": {
          "headersMapping": {
            "type": "string",
            "description": "A list of semicolon separated key-value pairs of custom HTTP headers in the following format: 'key=value'. The separator sign '=' is mandatory."
          }
        }
      },
      "AdvancedConnectionSettings": {
        "type": "object",
        "properties": {
          "connectionTimeout": {
            "minimum": 0,
            "type": "integer",
            "description": "Indicates maximum connection tiomeout in seconds",
            "format": "int32"
          },
          "retryAttempts": {
            "minimum": 0,
            "type": "integer",
            "description": "Indicates maximum retry attempts in case of a connection failure. The value should be a non-negative one.",
            "format": "int32"
          },
          "retryDelay": {
            "minimum": 0,
            "type": "integer",
            "description": "Indicates the delay between retry attempts in seconds. The value should be a non-negative one.",
            "format": "int32"
          },
          "readTimeout": {
            "minimum": 0,
            "type": "integer",
            "description": "Read timeout in seconds",
            "format": "int32"
          },
          "enabledCiphers": {
            "type": "string",
            "description": "A list of comma separated ciphers to be used for SSL connection. The default value is: TLS_AES_256_GCM_SHA384, TLS_AES_128_GCM_SHA256, TLS_CHACHA20_POLY1305_SHA256, TLS_AES_128_CCM_SHA256, TLS_AES_128_CCM_8_SHA256, TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384, TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384, TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256, TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256, TLS_DHE_RSA_WITH_AES_256_GCM_SHA384, TLS_DHE_DSS_WITH_AES_256_GCM_SHA384, TLS_DHE_DSS_WITH_AES_256_CBC_SHA256, TLS_DHE_RSA_WITH_AES_256_CBC_SHA256, TLS_DHE_RSA_WITH_AES_128_GCM_SHA256, TLS_DHE_DSS_WITH_AES_128_GCM_SHA256, TLS_DHE_DSS_WITH_AES_128_CBC_SHA256, TLS_DHE_RSA_WITH_AES_128_CBC_SHA256, TLS_RSA_WITH_AES_256_CBC_SHA256"
          },
          "enabledProtocols": {
            "type": "string",
            "description": "A list of comma separated SSL protocols to be enabled. The default value is: TLSv1.2, TLSv1.3"
          }
        }
      },
      "AdvancedIcapSettings": {
        "type": "object",
        "properties": {
          "enableWinNtFormat": {
            "type": "boolean",
            "description": "Indicates whether or not to report X-Authenticated-User in WinNT format in case of LDAP authentication.",
            "default": false
          },
          "stopTransfersModifyOrNotHandled": {
            "type": "boolean",
            "description": "Indicates whether or not to stop the transfer if ICAP server returns a MODIFY result or an unhandled status",
            "default": false
          },
          "treatModifyAsBlock": {
            "type": "boolean",
            "description": "Indicates whether or not to treat the ICAP MODIFIED action as block",
            "default": false
          }
        }
      },
      "LdapDomainResult": {
        "type": "object",
        "properties": {
          "resultSet": {
            "$ref": "#/components/schemas/ResultSet"
          },
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LdapDomain"
            }
          }
        }
      },
      "LdapDomain": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the ldap domain."
          },
          "name": {
            "maxLength": 255,
            "type": "string",
            "description": "The name of the ldap domain."
          },
          "isDefault": {
            "type": "boolean",
            "description": "Specify if ldap doamin is default domain.",
            "default": false
          },
          "precedence": {
            "type": "integer",
            "description": "Precedence property of ldap domain.",
            "format": "int32"
          },
          "protocolVersion": {
            "type": "integer",
            "description": "Protocol version of ldap domain.",
            "format": "int32",
            "enum": [
              2,
              3
            ]
          },
          "sslEnabled": {
            "type": "boolean",
            "description": "Whether ssl is enabled for ldap domain.",
            "default": false
          },
          "tlsEnabled": {
            "type": "boolean",
            "description": "Whether tls is enabled for ldap domain.",
            "default": false
          },
          "referralsAllowed": {
            "type": "boolean",
            "description": "Whether referrals are allowed.",
            "default": false
          },
          "anonymousBindsAllowed": {
            "type": "boolean",
            "description": "Whether anonymous binds are allowed.",
            "default": false
          },
          "bindDn": {
            "type": "string",
            "description": "Bind dn of ldap domain."
          },
          "bindDnPassword": {
            "type": "string",
            "description": "Bind dn password of ldap domain."
          },
          "commonCase": {
            "type": "string",
            "description": "Common case property of ldap domain.",
            "enum": [
              "NONE",
              "UPPER",
              "LOWER"
            ]
          },
          "clientCertificate": {
            "type": "string",
            "description": "ID of a local certificate to be used for authentication."
          },
          "certVerify": {
            "type": "boolean",
            "description": "CertVerify property of ldap domain.",
            "default": false
          },
          "description": {
            "maxLength": 4000,
            "type": "string",
            "description": "Description of ldap domain."
          },
          "addressBookSettings": {
            "$ref": "#/components/schemas/AddressBookSettingsLDAP"
          },
          "userSettings": {
            "$ref": "#/components/schemas/UserSettingsLDAP"
          },
          "ldapSearches": {
            "$ref": "#/components/schemas/LdapSearches"
          },
          "ldapServers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LdapServers"
            }
          },
          "attributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttributesLDAP"
            }
          },
          "addressBookAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AddressBookAttributesLDAP"
            }
          },
          "dnFilters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DnFiltersLDAP"
            }
          }
        }
      },
      "AddressBookSettingsLDAP": {
        "type": "object",
        "properties": {
          "addressBookBaseDN": {
            "type": "string",
            "description": "Base DN of address book."
          },
          "addressBookQuery": {
            "type": "string",
            "description": "Address book query."
          },
          "shouldUseOnlyAdditionalQuery": {
            "type": "boolean",
            "description": "Whether to use only additional query.",
            "default": false
          }
        }
      },
      "UserSettingsLDAP": {
        "type": "object",
        "properties": {
          "defaultUid": {
            "minimum": 1,
            "type": "integer",
            "description": "Default uid.",
            "format": "int32",
            "default": 10000
          },
          "defaultGid": {
            "minimum": 1,
            "type": "integer",
            "description": "Default gid.",
            "format": "int32",
            "default": 10000
          },
          "defaultUserType": {
            "type": "string",
            "description": "Default user type.",
            "enum": [
              "virtual",
              "real"
            ],
            "default": "virtual"
          },
          "defaultUserShell": {
            "type": "string",
            "description": "Default user's shell.",
            "default": "/bin/sh"
          },
          "defaultAuthByEmail": {
            "type": "boolean",
            "description": "Authentication by email.",
            "default": false
          },
          "sysUser": {
            "type": "string",
            "description": "System user attribute. Windows specific."
          }
        }
      },
      "LdapSearches": {
        "type": "object",
        "properties": {
          "baseDn": {
            "type": "string",
            "description": "Base dn.",
            "default": "ou=Engineering, o=Acme"
          },
          "aliasQuery": {
            "type": "string",
            "description": "Alias query."
          },
          "useGenericSearchFilter": {
            "type": "boolean",
            "description": "Whether to use generic search filter.",
            "default": false
          },
          "genericSearchAttribute": {
            "maxLength": 128,
            "type": "string",
            "description": "Generic search attribute."
          },
          "genericSearchFilter": {
            "maxLength": 1024,
            "type": "string",
            "description": "Generic search filter."
          },
          "searchAttribute": {
            "type": "string",
            "description": "Search attribute.",
            "enum": [
              "UID",
              "CN",
              "SAMACCOUNTNAME"
            ],
            "default": "UID"
          }
        }
      },
      "LdapServers": {
        "required": [
          "host",
          "port"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of ldap server."
          },
          "host": {
            "maxLength": 255,
            "type": "string",
            "description": "The host of ldap server."
          },
          "port": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "description": "The port of ldap server.",
            "format": "int32",
            "default": 389
          },
          "order": {
            "type": "integer",
            "description": "Order of ldap server.",
            "format": "int32",
            "default": 1
          }
        }
      },
      "AttributesLDAP": {
        "required": [
          "attribute",
          "mappedAttribute"
        ],
        "type": "object",
        "properties": {
          "attribute": {
            "maxLength": 255,
            "type": "string",
            "description": "Attribute name."
          },
          "description": {
            "type": "string",
            "description": "Description of attribute."
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether attribute is enabled.",
            "default": false
          },
          "mappedAttribute": {
            "maxLength": 255,
            "type": "string",
            "description": "The mapped attribute."
          }
        }
      },
      "AddressBookAttributesLDAP": {
        "required": [
          "attribute",
          "mappedAttribute"
        ],
        "type": "object",
        "properties": {
          "attribute": {
            "maxLength": 255,
            "type": "string",
            "description": "Attribute name of address book."
          },
          "description": {
            "type": "string",
            "description": "Description of address book attribute."
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether attribute is enabled for address book.",
            "default": false
          },
          "mappedAttribute": {
            "maxLength": 255,
            "type": "string",
            "description": "The mapped attribute for address book."
          }
        }
      },
      "DnFiltersLDAP": {
        "required": [
          "enabled",
          "filter",
          "userClass"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of dn filter."
          },
          "enabled": {
            "type": "string",
            "description": "Whether dn filter is enabled.",
            "default": "false"
          },
          "filter": {
            "maxLength": 255,
            "type": "string",
            "description": "Filter's name."
          },
          "userClass": {
            "maxLength": 255,
            "type": "string",
            "description": "User class property of dn filter."
          }
        }
      },
      "ApplicationResult": {
        "type": "object",
        "properties": {
          "resultSet": {
            "$ref": "#/components/schemas/ResultSet"
          },
          "result": {
            "type": "array",
            "items": {
              "discriminator": {
                "propertyName": "type",
                "mapping": {
                  "AccountFilePurge": "#/AccountFilePurgeApplication",
                  "AccountTTL": "#/AccountMaintenanceApplication",
                  "AdvancedRouting": "#/AdvancedRoutingApplication",
                  "ArchiveMaint": "#/ArchiveMaintApplication",
                  "AuditLogMaint": "#/AuditLogMaintApplication",
                  "Basic": "#/BasicApplication",
                  "HumanSystem": "#/HumanSystemApplication",
                  "LogEntryMaint": "#/LogEntryMaintApplication",
                  "LoginThresholdMaintenance": "#/LoginThresholdMaintenanceApplication",
                  "MBFT": "#/MBFTApplication",
                  "PackageRetentionMaint": "#/PackageRetentionMaintApplication",
                  "SentinelLinkDataMaint": "#/SentinelLinkDataMaintApplication",
                  "SharedFolder": "#/SharedFolderApplication",
                  "SiteMailbox": "#/SiteMailboxApplication",
                  "StandardRouter": "#/StandardRouterApplication",
                  "SynchronyTransfer": "#/SynchronyTransferApplication",
                  "TransferLogMaint": "#/TransferLogMaintApplication",
                  "UnlicensedAccountMaint": "#/UnlicensedAccountMaintApplication"
                }
              },
              "anyOf": [
                {
                  "$ref": "#/components/schemas/AccountFilePurgeApplication"
                },
                {
                  "$ref": "#/components/schemas/AccountMaintenanceApplication"
                },
                {
                  "$ref": "#/components/schemas/AdvancedRoutingApplication"
                },
                {
                  "$ref": "#/components/schemas/ArchiveMaintApplication"
                },
                {
                  "$ref": "#/components/schemas/AuditLogMaintApplication"
                },
                {
                  "$ref": "#/components/schemas/BasicApplication"
                },
                {
                  "$ref": "#/components/schemas/HumanSystemApplication"
                },
                {
                  "$ref": "#/components/schemas/LogEntryMaintApplication"
                },
                {
                  "$ref": "#/components/schemas/LoginThresholdMaintenanceApplication"
                },
                {
                  "$ref": "#/components/schemas/MBFTApplication"
                },
                {
                  "$ref": "#/components/schemas/PackageRetentionMaintApplication"
                },
                {
                  "$ref": "#/components/schemas/SentinelLinkDataMaintApplication"
                },
                {
                  "$ref": "#/components/schemas/SharedFolderApplication"
                },
                {
                  "$ref": "#/components/schemas/SiteMailboxApplication"
                },
                {
                  "$ref": "#/components/schemas/StandardRouterApplication"
                },
                {
                  "$ref": "#/components/schemas/SynchronyTransferApplication"
                },
                {
                  "$ref": "#/components/schemas/TransferLogMaintApplication"
                },
                {
                  "$ref": "#/components/schemas/UnlicensedAccountMaintApplication"
                }
              ]
            }
          }
        }
      },
      "AccountFilePurgeApplication": {
        "description": "A representation of a File Maintenance application.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Application"
          },
          {
            "required": [
              "deleteFilesDays"
            ],
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "AccountFilePurge"
              },
              "deleteFilesDays": {
                "type": "integer",
                "description": "This property represents file retention period. All files older than the property value will be deleted.",
                "format": "int32"
              },
              "pattern": {
                "type": "string",
                "description": "This property represents file name pattern. All file names match of the property value will be regarded by the application."
              },
              "expirationPeriod": {
                "type": "boolean",
                "description": "If this property is set to true, the deletion of files based on file expiration period will be enabled. The file expiration period will be set as flow file attribute EXPIRE.ON.\n",
                "default": false
              },
              "removeFolders": {
                "type": "boolean",
                "description": "If this property is set to true, the deletion of folders remain empty after File Maintence will be enabled.",
                "default": false
              },
              "warningNotifications": {
                "type": "boolean",
                "description": "If this property is set to true, the warning notifications feature will be enabled.",
                "default": false
              },
              "notifyDays": {
                "type": "string",
                "description": "This property represents warning notifications period when emails will be sent to the recipients. Accept comma-separated values."
              },
              "sendSentinelAlert": {
                "type": "boolean",
                "description": "If this property is set to true, the warning TO_BE_DELETED state will be reported to Sentinel Server.",
                "default": false
              },
              "warnNotifyAccount": {
                "type": "boolean",
                "description": "If this property is set to true, the warning notifications will be sent to account email.",
                "default": false
              },
              "warningNotificationsTemplate": {
                "type": "string",
                "description": "The email template name which will be used in File Maintenance warning email notifications.",
                "enum": [
                  "FileMaintenanceNotification.xhtml",
                  "AccountMaintenanceNotification.xhtml",
                  "LoginThresholdReport.xhtml",
                  "AdhocDefault.xhtml",
                  "LoginThresholdNotification.xhtml",
                  "RoutingFailedNotification.xhtml",
                  "RoutingSucceededNotification.xhtml",
                  "RoutingTriggeredNotification.xhtml"
                ],
                "default": "FileMaintenanceNotification.xhtml"
              },
              "warnNotifyEmails": {
                "type": "string",
                "description": "This property represents comma-separated email addresses for warning notifications recipients."
              },
              "deletionNotifications": {
                "type": "boolean",
                "description": "If this property is set to true, the deletion notifications feature will be enabled.",
                "default": false
              },
              "deletionNotificationsTemplate": {
                "type": "string",
                "description": "The email template name which will be used in File Maintenance report email notifications.",
                "enum": [
                  "FileMaintenanceNotification.xhtml",
                  "AccountMaintenanceNotification.xhtml",
                  "LoginThresholdReport.xhtml",
                  "AdhocDefault.xhtml",
                  "LoginThresholdNotification.xhtml",
                  "RoutingFailedNotification.xhtml",
                  "RoutingSucceededNotification.xhtml",
                  "RoutingTriggeredNotification.xhtml"
                ],
                "default": "FileMaintenanceNotification.xhtml"
              },
              "deletionNotifyAccount": {
                "type": "boolean",
                "description": "If this property is set to true, the deletion notifications will be sent to account email.",
                "default": false
              },
              "deletionNotifyEmails": {
                "type": "string",
                "description": "This property represents comma-separated email addresses for deletion notifications recipients."
              },
              "schedules": {
                "type": "array",
                "description": "Application's schedules.",
                "items": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/OnceSchedule"
                    },
                    {
                      "$ref": "#/components/schemas/HourlySchedule"
                    },
                    {
                      "$ref": "#/components/schemas/DailySchedule"
                    },
                    {
                      "$ref": "#/components/schemas/WeeklySchedule"
                    },
                    {
                      "$ref": "#/components/schemas/MonthlySchedule"
                    },
                    {
                      "$ref": "#/components/schemas/YearlySchedule"
                    },
                    {
                      "$ref": "#/components/schemas/CronExpressionSchedule"
                    }
                  ]
                }
              }
            }
          }
        ]
      },
      "Application": {
        "required": [
          "name",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The application ID"
          },
          "name": {
            "maxLength": 80,
            "minLength": 0,
            "type": "string",
            "description": "The unique application name"
          },
          "type": {
            "type": "string",
            "description": "The type of the application. Acts as a discriminator. Note: application types that does not support subscribing to are: 'TransferLogMaint', 'LogEntryMaint', 'ArchiveMaint', 'SentinelLinkDataMaint', 'UnlicensedAccountMaint', 'PackageRetentionMaint'\n",
            "enum": [
              "AccountFilePurge",
              "AccountTTL",
              "AdvancedRouting",
              "ArchiveMaint",
              "AuditLogMaint",
              "Basic",
              "HumanSystem",
              "LogEntryMaint",
              "LoginThresholdMaintenance",
              "MBFT",
              "PackageRetentionMaint",
              "SentinelLinkDataMaint",
              "SharedFolder",
              "SiteMailbox",
              "StandardRouter",
              "SynchronyTransfer",
              "TransferLogMaint",
              "UnlicensedAccountMaint"
            ]
          },
          "notes": {
            "maxLength": 2048,
            "minLength": 0,
            "type": "string",
            "description": "An unstructured comments (description) for the application entity"
          },
          "managedByCG": {
            "type": "boolean",
            "description": "This property indicates whether the application is managed by Central Governance.",
            "default": false
          },
          "additionalAttributes": {
            "type": "object",
            "additionalProperties": {
              "maxLength": 4000,
              "minLength": 1,
              "type": "string"
            },
            "description": "Additional attributes which are defined with \"key\": \"value\" pairs. Keys must start with \"userVars.\" prefix, follow the pattern: [a-zA-Z0-9_.]+\nand have length between 10 and 255 characters (including the prefix). Non prefixed part of key should not start with \"userVars.\", since it is\na reserved word. Both key and value cannot be blank.\n"
          },
          "businessUnits": {
            "type": "array",
            "description": "Names of business units that application entity belongs to.",
            "items": {
              "type": "string"
            }
          }
        },
        "discriminator": {
          "propertyName": "type"
        }
      },
      "OnceSchedule": {
        "type": "object",
        "properties": {
          "tag": {
            "type": "string",
            "description": "The type of the application or subscription. \nFor application schedule are valid the following application types: 'HumanSystem', 'StandardRouter', 'SiteMailbox', 'SharedFolde'r, 'TransferLogMaint', 'Basic', 'AdvancedRouting', 'LogEntryMaint', 'ArchiveMaint', 'SentinelLinkDataMaint', 'SynchronyTransfer', 'MBFT', 'PackageRetentionMaint', 'UnlicensedAccountMaint', 'AuditLogMaint'. \nFor subscription schedule are valid the following options : 'PARTNER-IN', 'PARTNER-OUT'.\n"
          },
          "type": {
            "type": "string",
            "description": "The type of the schedule",
            "example": "ONCE",
            "default": "ONCE"
          },
          "skipHolidays": {
            "type": "boolean",
            "description": "Whether to skip holidays.",
            "default": false
          },
          "startDate": {
            "type": "string",
            "description": "The start date in date-time format",
            "format": "date-time"
          },
          "executionTimes": {
            "uniqueItems": true,
            "type": "array",
            "description": "The execution times",
            "nullable": true,
            "items": {
              "type": "string"
            }
          }
        },
        "description": "A representation of a schedule of type OnceSchedule"
      },
      "HourlySchedule": {
        "type": "object",
        "properties": {
          "tag": {
            "type": "string",
            "description": "The type of the application or subscription. \nFor application schedule are valid the following application types: 'HumanSystem', 'StandardRouter', 'SiteMailbox', 'SharedFolde'r, 'TransferLogMaint', 'Basic', 'AdvancedRouting', 'LogEntryMaint', 'ArchiveMaint', 'SentinelLinkDataMaint', 'SynchronyTransfer', 'MBFT', 'PackageRetentionMaint', 'UnlicensedAccountMaint', 'AuditLogMaint'. \nFor subscription schedule are valid the following options : 'PARTNER-IN', 'PARTNER-OUT'.\n"
          },
          "type": {
            "type": "string",
            "description": "The type of the schedule",
            "example": "HOURLY",
            "default": "HOURLY"
          },
          "skipHolidays": {
            "type": "boolean",
            "description": "Whether to skip holidays.",
            "default": false
          },
          "startDate": {
            "type": "string",
            "description": "The start date in date-time format",
            "format": "date-time"
          },
          "executionTimes": {
            "uniqueItems": true,
            "type": "array",
            "description": "The execution times",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "endDate": {
            "type": "string",
            "description": "The end date in date-time format",
            "format": "date-time"
          },
          "hourlyStep": {
            "type": "integer",
            "description": "The hourly step",
            "format": "int64"
          },
          "hourlyType": {
            "type": "string",
            "description": "The hourly type",
            "example": "string",
            "enum": [
              "PERHOURS",
              "PERMINUTES"
            ]
          }
        },
        "description": "A representation of a schedule of type HourlySchedule"
      },
      "DailySchedule": {
        "type": "object",
        "properties": {
          "tag": {
            "type": "string",
            "description": "The type of the application or subscription. \nFor application schedule are valid the following application types: 'HumanSystem', 'StandardRouter', 'SiteMailbox', 'SharedFolde'r, 'TransferLogMaint', 'Basic', 'AdvancedRouting', 'LogEntryMaint', 'ArchiveMaint', 'SentinelLinkDataMaint', 'SynchronyTransfer', 'MBFT', 'PackageRetentionMaint', 'UnlicensedAccountMaint', 'AuditLogMaint'. \nFor subscription schedule are valid the following options : 'PARTNER-IN', 'PARTNER-OUT'.\n"
          },
          "type": {
            "type": "string",
            "description": "The type of the schedule",
            "example": "DAILY",
            "default": "DAILY"
          },
          "skipHolidays": {
            "type": "boolean",
            "description": "Whether to skip holidays.",
            "default": false
          },
          "startDate": {
            "type": "string",
            "description": "The start date in date-time format",
            "format": "date-time"
          },
          "executionTimes": {
            "uniqueItems": true,
            "type": "array",
            "description": "The execution times",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "dailyType": {
            "type": "string",
            "description": "The daily type",
            "example": "string",
            "enum": [
              "EVERYDAY",
              "EVERY_WEEKDAY"
            ]
          },
          "endDate": {
            "type": "string",
            "description": "The end date in date-time format",
            "format": "date-time"
          }
        },
        "description": "A representation of a schedule of type DailySchedule"
      },
      "WeeklySchedule": {
        "type": "object",
        "properties": {
          "tag": {
            "type": "string",
            "description": "The type of the application or subscription. \nFor application schedule are valid the following application types: 'HumanSystem', 'StandardRouter', 'SiteMailbox', 'SharedFolde'r, 'TransferLogMaint', 'Basic', 'AdvancedRouting', 'LogEntryMaint', 'ArchiveMaint', 'SentinelLinkDataMaint', 'SynchronyTransfer', 'MBFT', 'PackageRetentionMaint', 'UnlicensedAccountMaint', 'AuditLogMaint'. \nFor subscription schedule are valid the following options : 'PARTNER-IN', 'PARTNER-OUT'.\n"
          },
          "type": {
            "type": "string",
            "description": "The type of the schedule",
            "example": "WEEKLY",
            "default": "WEEKLY"
          },
          "skipHolidays": {
            "type": "boolean",
            "description": "Whether to skip holidays.",
            "default": false
          },
          "startDate": {
            "type": "string",
            "description": "The start date in date-time format",
            "format": "date-time"
          },
          "executionTimes": {
            "uniqueItems": true,
            "type": "array",
            "description": "The execution times",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "endDate": {
            "type": "string",
            "description": "The end date in date-time format",
            "format": "date-time"
          },
          "daysOfWeek": {
            "uniqueItems": true,
            "type": "array",
            "description": "The days of week",
            "nullable": true,
            "items": {
              "type": "string",
              "example": "string",
              "enum": [
                "SUNDAY",
                "MONDAY",
                "TUESDAY",
                "WEDNESDAY",
                "THURSDAY",
                "FRIDAY",
                "SATURDAY"
              ]
            }
          }
        },
        "description": "A representation of a schedule of type WeeklySchedule"
      },
      "MonthlySchedule": {
        "required": [
          "monthlyType"
        ],
        "type": "object",
        "properties": {
          "tag": {
            "type": "string",
            "description": "The type of the application or subscription. \nFor application schedule are valid the following application types: 'HumanSystem', 'StandardRouter', 'SiteMailbox', 'SharedFolde'r, 'TransferLogMaint', 'Basic', 'AdvancedRouting', 'LogEntryMaint', 'ArchiveMaint', 'SentinelLinkDataMaint', 'SynchronyTransfer', 'MBFT', 'PackageRetentionMaint', 'UnlicensedAccountMaint', 'AuditLogMaint'. \nFor subscription schedule are valid the following options : 'PARTNER-IN', 'PARTNER-OUT'.\n"
          },
          "type": {
            "type": "string",
            "description": "The type of the schedule",
            "example": "MONTHLY",
            "default": "MONTHLY"
          },
          "skipHolidays": {
            "type": "boolean",
            "description": "Whether to skip holidays.",
            "default": false
          },
          "startDate": {
            "type": "string",
            "description": "The start date in date-time format",
            "format": "date-time"
          },
          "executionTimes": {
            "uniqueItems": true,
            "type": "array",
            "description": "The execution times",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "daysOfWeek": {
            "uniqueItems": true,
            "type": "array",
            "description": "The days of week",
            "nullable": true,
            "items": {
              "type": "string",
              "example": "string",
              "enum": [
                "SUNDAY",
                "MONDAY",
                "TUESDAY",
                "WEDNESDAY",
                "THURSDAY",
                "FRIDAY",
                "SATURDAY"
              ]
            }
          },
          "daysOfMonth": {
            "uniqueItems": true,
            "type": "array",
            "description": "The days of month",
            "nullable": true,
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "weekOfMonth": {
            "type": "string",
            "description": "The week of the month",
            "example": "string",
            "enum": [
              "FIRST",
              "SECOND",
              "THIRD",
              "FOURTH",
              "LAST"
            ]
          },
          "monthlyType": {
            "type": "string",
            "description": "The monthly type",
            "example": "string",
            "enum": [
              "EXACT",
              "SEQUENCE_WEEKLY",
              "SEQUENCE_MONTHLY"
            ]
          },
          "endDate": {
            "type": "string",
            "description": "The end date in date-time format",
            "format": "date-time"
          }
        },
        "description": "A representation of a schedule of type MonthlySchedule"
      },
      "YearlySchedule": {
        "type": "object",
        "properties": {
          "tag": {
            "type": "string",
            "description": "The type of the application or subscription. \nFor application schedule are valid the following application types: 'HumanSystem', 'StandardRouter', 'SiteMailbox', 'SharedFolde'r, 'TransferLogMaint', 'Basic', 'AdvancedRouting', 'LogEntryMaint', 'ArchiveMaint', 'SentinelLinkDataMaint', 'SynchronyTransfer', 'MBFT', 'PackageRetentionMaint', 'UnlicensedAccountMaint', 'AuditLogMaint'. \nFor subscription schedule are valid the following options : 'PARTNER-IN', 'PARTNER-OUT'.\n"
          },
          "type": {
            "type": "string",
            "description": "The type of the schedule",
            "example": "YEARLY",
            "default": "YEARLY"
          },
          "skipHolidays": {
            "type": "boolean",
            "description": "Whether to skip holidays.",
            "default": false
          },
          "startDate": {
            "type": "string",
            "description": "The start date in date-time format",
            "format": "date-time"
          },
          "executionTimes": {
            "uniqueItems": true,
            "type": "array",
            "description": "The execution times",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "daysOfMonth": {
            "uniqueItems": true,
            "type": "array",
            "description": "The days of month",
            "nullable": true,
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "endDate": {
            "type": "string",
            "description": "The end date in date-time format",
            "format": "date-time"
          },
          "months": {
            "uniqueItems": true,
            "type": "array",
            "description": "The months",
            "nullable": true,
            "items": {
              "type": "string",
              "example": "string",
              "enum": [
                "JANUARY",
                "FEBRUARY",
                "MARCH",
                "APRIL",
                "MAY",
                "JUNE",
                "JULY",
                "AUGUST",
                "SEPTEMBER",
                "OCTOBER",
                "NOVEMBER",
                "DECEMBER"
              ]
            }
          }
        },
        "description": "A representation of a schedule of type YearlySchedule"
      },
      "CronExpressionSchedule": {
        "type": "object",
        "properties": {
          "tag": {
            "type": "string",
            "description": "The type of the application or subscription. \nFor application schedule are valid the following application types: 'HumanSystem', 'StandardRouter', 'SiteMailbox', 'SharedFolde'r, 'TransferLogMaint', 'Basic', 'AdvancedRouting', 'LogEntryMaint', 'ArchiveMaint', 'SentinelLinkDataMaint', 'SynchronyTransfer', 'MBFT', 'PackageRetentionMaint', 'UnlicensedAccountMaint', 'AuditLogMaint'. \nFor subscription schedule are valid the following options : 'PARTNER-IN', 'PARTNER-OUT'.\n"
          },
          "type": {
            "type": "string",
            "description": "The type of the schedule",
            "example": "EXPRESSION",
            "default": "EXPRESSION"
          },
          "skipHolidays": {
            "type": "boolean",
            "description": "Whether to skip holidays.",
            "default": false
          },
          "startDate": {
            "type": "string",
            "description": "The start date in date-time format",
            "format": "date-time"
          },
          "cronExpression": {
            "type": "string",
            "description": "The cron expression."
          },
          "endDate": {
            "type": "string",
            "description": "The end date in date-time format",
            "format": "date-time"
          }
        },
        "description": "A representation of a schedule of type CronExpressionSchedule"
      },
      "AccountMaintenanceApplication": {
        "description": "A representation of an Account Maintenance application.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Application"
          },
          {
            "required": [
              "accountAction"
            ],
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "AccountTTL"
              },
              "accountCreationDaysCriteria": {
                "minimum": 0,
                "type": "integer",
                "description": "The criteria representing the amount of days after account creation or first maintenance job run.",
                "format": "int32"
              },
              "accountInactivityDaysCriteria": {
                "minimum": 0,
                "type": "integer",
                "description": "The criteria representing the amount of days of account inactivity.",
                "format": "int32"
              },
              "accountAction": {
                "type": "string",
                "description": "The action which should be performed when Account Maintenance criteria is met.",
                "enum": [
                  "DELETE",
                  "DISABLE",
                  "PURGE"
                ]
              },
              "deleteDisabledAccountAfterXDaysCriteria": {
                "minimum": 0,
                "type": "integer",
                "description": "The sub-action criteria representing the amount of days for deletion of accounts disabled by Account Maintenance application only. It is valid if action is set to \"DISABLE\".\n",
                "format": "int32"
              },
              "notificationDays": {
                "type": "string",
                "description": "The comma-separated periods for notifications."
              },
              "reportNotificationEmailTemplate": {
                "type": "string",
                "description": "The email template name which will be used in Account Maintenance report email notifications.",
                "enum": [
                  "AccountMaintenanceNotification.xhtml",
                  "FileMaintenanceNotification.xhtml",
                  "LoginThresholdReport.xhtml",
                  "AdhocDefault.xhtml",
                  "LoginThresholdNotification.xhtml",
                  "RoutingFailedNotification.xhtml",
                  "RoutingSucceededNotification.xhtml",
                  "RoutingTriggeredNotification.xhtml"
                ],
                "default": "AccountMaintenanceNotification.xhtml"
              },
              "enableAccountNotifications": {
                "type": "boolean",
                "description": "If the account matches a criteria and an action to be performed in X days or sooner, a notification mail should be sent to the email address configured for that user. Accepts \"on\" value to enable the notifications.",
                "default": false
              },
              "actionNotificationEmails": {
                "type": "string",
                "description": "The comma-separated email addresses for notifications."
              },
              "passwordNotificationDays": {
                "type": "string",
                "description": "The comma-separated periods for the account password expiration notifications."
              },
              "passwordNotificationEmailTemplate": {
                "type": "string",
                "description": "The email template name which will be used in Account Maintenance password email notifications.",
                "enum": [
                  "AccountMaintenanceNotification.xhtml",
                  "FileMaintenanceNotification.xhtml",
                  "LoginThresholdReport.xhtml",
                  "AdhocDefault.xhtml",
                  "LoginThresholdNotification.xhtml",
                  "RoutingFailedNotification.xhtml",
                  "RoutingSucceededNotification.xhtml",
                  "RoutingTriggeredNotification.xhtml"
                ],
                "default": "AccountMaintenanceNotification.xhtml"
              },
              "enablePasswordExpirationNotifications": {
                "type": "boolean",
                "description": "If the account password will expire in one of configured notification days, a notification mail will be sent to the email addresses configured for that user. Accepts \"on\" value to enable the password exipration notifications.",
                "default": false
              },
              "passwordExpirationNotificationEmails": {
                "type": "string",
                "description": "The comma-separated email addresses for the account password exipration notifications."
              },
              "certificateNotificationDays": {
                "type": "string",
                "description": "The comma-separated periods for the account certificates expiration notifications."
              },
              "firstMaintenanceRun": {
                "minimum": 0,
                "type": "integer",
                "description": "First TTL maintenance job run.",
                "format": "int64"
              },
              "certificateNotificationEmailTemplate": {
                "type": "string",
                "description": "The email template name which will be used in Account Maintenance certificate email notifications.",
                "enum": [
                  "AccountMaintenanceNotification.xhtml",
                  "FileMaintenanceNotification.xhtml",
                  "LoginThresholdReport.xhtml",
                  "AdhocDefault.xhtml",
                  "LoginThresholdNotification.xhtml",
                  "RoutingFailedNotification.xhtml",
                  "RoutingSucceededNotification.xhtml",
                  "RoutingTriggeredNotification.xhtml"
                ],
                "default": "AccountMaintenanceNotification.xhtml"
              },
              "enableCertificateExpirationNotifications": {
                "type": "boolean",
                "description": "If the account certificates will expire in one of configured notification days, a notification mail will be sent to the email addresses configured for that user. Accepts \"on\" value to enable the certificates exipration notifications.",
                "default": false
              },
              "notificationCertificateEmails": {
                "type": "string",
                "description": "The comma-separated email addresses for the account certificates exipration notifications."
              },
              "schedules": {
                "type": "array",
                "description": "Application's schedules.",
                "items": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/OnceSchedule"
                    },
                    {
                      "$ref": "#/components/schemas/HourlySchedule"
                    },
                    {
                      "$ref": "#/components/schemas/DailySchedule"
                    },
                    {
                      "$ref": "#/components/schemas/WeeklySchedule"
                    },
                    {
                      "$ref": "#/components/schemas/MonthlySchedule"
                    },
                    {
                      "$ref": "#/components/schemas/YearlySchedule"
                    },
                    {
                      "$ref": "#/components/schemas/CronExpressionSchedule"
                    }
                  ]
                }
              }
            }
          }
        ]
      },
      "AdvancedRoutingApplication": {
        "description": "A representation of an AdvancedRouting application.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Application"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "AdvancedRouting"
              }
            }
          }
        ]
      },
      "ArchiveMaintApplication": {
        "description": "A representation of an ArchiveMaint application.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Application"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "ArchiveMaint"
              },
              "schedules": {
                "type": "array",
                "description": "Application's schedules.",
                "items": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/OnceSchedule"
                    },
                    {
                      "$ref": "#/components/schemas/HourlySchedule"
                    },
                    {
                      "$ref": "#/components/schemas/DailySchedule"
                    },
                    {
                      "$ref": "#/components/schemas/WeeklySchedule"
                    },
                    {
                      "$ref": "#/components/schemas/MonthlySchedule"
                    },
                    {
                      "$ref": "#/components/schemas/YearlySchedule"
                    },
                    {
                      "$ref": "#/components/schemas/CronExpressionSchedule"
                    }
                  ]
                }
              }
            }
          }
        ]
      },
      "AuditLogMaintApplication": {
        "description": "A representation of an AuditLogMaint application.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Application"
          },
          {
            "required": [
              "dayMode",
              "timeKeepingDataInDb"
            ],
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "AuditLogMaint"
              },
              "timeKeepingDataInDb": {
                "type": "integer",
                "description": "Specify in days or months (depending on 'dayMode' property) how old transfer log entries will be when they are deleted.\n",
                "format": "int32"
              },
              "dayMode": {
                "type": "integer",
                "description": "The day mode. Set value 0 for months or 1 for days.",
                "format": "int32"
              },
              "exportEnabled": {
                "type": "boolean",
                "description": "Define whether to export the deleted audit log entries to a file before they are deleted. If true then exportDir property is required to be set.\n",
                "default": false
              },
              "exportDir": {
                "type": "string",
                "description": "A full directory path specifying where the export files are. stored."
              },
              "schedules": {
                "type": "array",
                "description": "Application's schedules.",
                "items": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/OnceSchedule"
                    },
                    {
                      "$ref": "#/components/schemas/HourlySchedule"
                    },
                    {
                      "$ref": "#/components/schemas/DailySchedule"
                    },
                    {
                      "$ref": "#/components/schemas/WeeklySchedule"
                    },
                    {
                      "$ref": "#/components/schemas/MonthlySchedule"
                    },
                    {
                      "$ref": "#/components/schemas/YearlySchedule"
                    },
                    {
                      "$ref": "#/components/schemas/CronExpressionSchedule"
                    }
                  ]
                }
              }
            }
          }
        ]
      },
      "BasicApplication": {
        "description": "A representation of a Basic application.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Application"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "Basic"
              }
            }
          }
        ]
      },
      "HumanSystemApplication": {
        "description": "A representation of a HumanSystem application.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Application"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "HumanSystem"
              }
            }
          }
        ]
      },
      "LogEntryMaintApplication": {
        "description": "A representation of a LogEntryMaint application.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Application"
          },
          {
            "required": [
              "recordsPerFile",
              "timeKeepingDataInDb"
            ],
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "LogEntryMaint"
              },
              "timeKeepingDataInDb": {
                "type": "integer",
                "description": "Specify how old log entries will be when they are deleted in terms of days, hours, or minutes. You cannot enter spaces-only values in this field.\n",
                "format": "int32"
              },
              "exportDir": {
                "type": "string",
                "description": "A full directory path specifying where the export files are stored. If you are exporting from an Oracle database, you must fill in the name of the directory defined in the Oracle database ,for example, ST_DMPDIR. The value of this property will be set automatically for the folder property of the application.\n",
                "format": "int32"
              },
              "pgdumpPath": {
                "type": "string",
                "description": "A full directory path specifying where the pg_dump utility is on the PostgreSQL database server. Required for PostgreSQL database.\n"
              },
              "daysKeepingDataInFiles": {
                "type": "integer",
                "description": "Specify when SecureTransport deletes old exported log entry data. The value can be specified in days/hours/minutes depending on the dayMode property.\n",
                "format": "int32"
              },
              "recordsPerFile": {
                "type": "integer",
                "description": "Specify the maximum number of records that can exist in an exported file. When this value is exceeded, SecureTransport starts to export the server log entries in a new file.\n",
                "format": "int32"
              },
              "dayMode": {
                "type": "integer",
                "description": "The day mode. Set value 0 for days; 1 for hours or 2 for hours.",
                "format": "int32"
              },
              "exportEnabled": {
                "type": "boolean",
                "description": "Whether export is enabled. Applicable only for Oracle.",
                "default": false
              },
              "parallelismDegree": {
                "type": "integer",
                "description": "Number of processors to use for export. Applicable only for Oracle.",
                "format": "int32"
              },
              "schedules": {
                "type": "array",
                "description": "Application's schedules.",
                "items": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/OnceSchedule"
                    },
                    {
                      "$ref": "#/components/schemas/HourlySchedule"
                    },
                    {
                      "$ref": "#/components/schemas/DailySchedule"
                    },
                    {
                      "$ref": "#/components/schemas/WeeklySchedule"
                    },
                    {
                      "$ref": "#/components/schemas/MonthlySchedule"
                    },
                    {
                      "$ref": "#/components/schemas/YearlySchedule"
                    },
                    {
                      "$ref": "#/components/schemas/CronExpressionSchedule"
                    }
                  ]
                }
              }
            }
          }
        ]
      },
      "LoginThresholdMaintenanceApplication": {
        "description": "A representation of a LoginThresholdMaintenance application.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Application"
          },
          {
            "required": [
              "isUnlock"
            ],
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "LoginThresholdMaintenance"
              },
              "isUnlock": {
                "type": "boolean",
                "description": "Define whether unlock functionality is enabled",
                "default": false
              },
              "isReport": {
                "type": "boolean",
                "description": "If this property is set to true, a report will be sent to the specified email addresses in the emails property. If isUnlock is set to true, the report will contain a list of unlocked users. If isUnlock is set to false, the report will contain a list of locked, due to login threshold functionality, users\n",
                "default": false
              },
              "emails": {
                "type": "string",
                "description": "The email address or addresses to deliver the report to. Email addresses can be separated by either a comma or a semicolon.\n"
              },
              "reportEmailTemplate": {
                "type": "string",
                "description": "The email template for the report from the Report Email Template list.",
                "enum": [
                  "LoginThresholdReport.xhtml",
                  "AdhocDefault.xhtml",
                  "LoginThresholdNotification.xhtml",
                  "RoutingFailedNotification.xhtml",
                  "RoutingSucceededNotification.xhtml",
                  "RoutingTriggeredNotification.xhtml",
                  "AccountMaintenanceNotification.xhtml",
                  "FileMaintenanceNotification.xhtml"
                ],
                "default": "LoginThresholdReport.xhtml"
              },
              "schedules": {
                "type": "array",
                "description": "Application's schedules.",
                "items": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/OnceSchedule"
                    },
                    {
                      "$ref": "#/components/schemas/HourlySchedule"
                    },
                    {
                      "$ref": "#/components/schemas/DailySchedule"
                    },
                    {
                      "$ref": "#/components/schemas/WeeklySchedule"
                    },
                    {
                      "$ref": "#/components/schemas/MonthlySchedule"
                    },
                    {
                      "$ref": "#/components/schemas/YearlySchedule"
                    },
                    {
                      "$ref": "#/components/schemas/CronExpressionSchedule"
                    }
                  ]
                }
              }
            }
          }
        ]
      },
      "MBFTApplication": {
        "description": "A representation of a MBFT application.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Application"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "MBFT"
              }
            }
          }
        ]
      },
      "PackageRetentionMaintApplication": {
        "description": "A representation of a PackageRetentionMaint application.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Application"
          },
          {
            "required": [
              "maxRunningMinutes"
            ],
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "PackageRetentionMaint"
              },
              "maxRunningMinutes": {
                "type": "integer",
                "description": "The maximum number of minutes the application runs each time it is started.",
                "format": "int32"
              },
              "schedules": {
                "type": "array",
                "description": "Application's schedules.",
                "items": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/OnceSchedule"
                    },
                    {
                      "$ref": "#/components/schemas/HourlySchedule"
                    },
                    {
                      "$ref": "#/components/schemas/DailySchedule"
                    },
                    {
                      "$ref": "#/components/schemas/WeeklySchedule"
                    },
                    {
                      "$ref": "#/components/schemas/MonthlySchedule"
                    },
                    {
                      "$ref": "#/components/schemas/YearlySchedule"
                    },
                    {
                      "$ref": "#/components/schemas/CronExpressionSchedule"
                    }
                  ]
                }
              }
            }
          }
        ]
      },
      "SentinelLinkDataMaintApplication": {
        "description": "A representation of a SentinelLinkDataMaint application.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Application"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "SentinelLinkDataMaint"
              },
              "schedules": {
                "type": "array",
                "description": "Application's schedules.",
                "items": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/OnceSchedule"
                    },
                    {
                      "$ref": "#/components/schemas/HourlySchedule"
                    },
                    {
                      "$ref": "#/components/schemas/DailySchedule"
                    },
                    {
                      "$ref": "#/components/schemas/WeeklySchedule"
                    },
                    {
                      "$ref": "#/components/schemas/MonthlySchedule"
                    },
                    {
                      "$ref": "#/components/schemas/YearlySchedule"
                    },
                    {
                      "$ref": "#/components/schemas/CronExpressionSchedule"
                    }
                  ]
                }
              }
            }
          }
        ]
      },
      "SharedFolderApplication": {
        "description": "A representation of a SharedFolder application.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Application"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "SharedFolder"
              },
              "sharedFolder": {
                "type": "string",
                "description": "The shared folder."
              }
            }
          }
        ]
      },
      "SiteMailboxApplication": {
        "description": "A representation of a SiteMailbox application.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Application"
          },
          {
            "required": [
              "inboxFolder",
              "outboxFolder"
            ],
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "SiteMailbox"
              },
              "outboxFolder": {
                "type": "string",
                "description": "The application outbox folder"
              },
              "inboxFolder": {
                "type": "string",
                "description": "The application inbox folder."
              },
              "dropFolder": {
                "type": "string",
                "description": "The drop folder."
              }
            }
          }
        ]
      },
      "StandardRouterApplication": {
        "description": "A representation of a StandardRouter application.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Application"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "StandardRouter"
              },
              "outboxEnabled": {
                "type": "boolean",
                "description": "[Allow Subscribers to Submit files in this Application] When this property is set to true then permit incoming file transfers from the subscriber parties to the application and following properties can be set: OUTBOX_FOLDER, SECURE_CONNECTION_REQUIRED, RENAME_FILES and OUTGOING_FILENAME_FORMAT\n",
                "default": false
              },
              "outboxFolder": {
                "type": "string",
                "description": "The name of the folder where incoming transferred files are submitted via subscriptions"
              },
              "secureConnectionRequired": {
                "type": "boolean",
                "description": "Define whether to enable SSL for the incoming transfers",
                "default": false
              },
              "renameFilesEnabled": {
                "type": "boolean",
                "description": "Define whether to add a prefix to the file name identifying the sender before it is sent to the internal system\n",
                "default": false
              },
              "outboxFileFormat": {
                "type": "string",
                "description": "The format of the new file name. By default, the file is renamed in the format &lt;ID&gt;\\_&lt;FILENAME&gt; where, &lt;ID&gt; is the Subscriber ID specified when the subscription is created, &lt;FILENAME&gt; is the original name of the transferred file and \"\\_\" is the delimiter. The use of the placeholders, &lt;ID&gt;,&lt;FILENAME&gt; and the delimiter in the new file name format is mandatory\n",
                "default": "false"
              },
              "inboxEnabled": {
                "type": "boolean",
                "description": "[Send files to Subscribers] When this property is set to true then permit outgoing file transfers from the application to the subscribed parties. The properties INBOX_FOLDER and ID_FROM_FILENAME_EXTRACTION_PATTERN can be set\n",
                "default": false
              },
              "inboxFolder": {
                "type": "boolean",
                "description": "[Receive folder] The name of the folder where outgoing transferred files are submitted to the subscriber. The receive folder is created as a sub-folder of the subscription folder\n",
                "default": false
              },
              "inboxIdPattern": {
                "type": "string",
                "description": "A pattern in the ID Pattern box to define the ID of the subscriber to whom files are routed. By default, the pattern is &lt;ID&gt;\\_&lt;FILENAME&gt; where, &lt;ID&gt; is a regular expression corresponding to the Subscriber ID specified when the subscription is created, &lt;FILENAME&gt; is the original name of the transferred file and and \"\\_\" is the delimiter. The use of the placeholders, &lt;ID&gt;,&lt;FILENAME&gt; and the delimiter in the new file name format is mandatory.\n",
                "default": "false"
              },
              "dropFolder": {
                "type": "string",
                "description": "The drop folder."
              }
            }
          }
        ]
      },
      "SynchronyTransferApplication": {
        "description": "A representation of a SynchronyTransfer application.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Application"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "SynchronyTransfer"
              }
            }
          }
        ]
      },
      "TransferLogMaintApplication": {
        "description": "A representation of a TransferLogMaint application.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Application"
          },
          {
            "required": [
              "daysKeepingDataInDb",
              "daysKeepingDataInFiles",
              "daysKeepingInProgressInDb",
              "recordsPerFile"
            ],
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "TransferLogMaint"
              },
              "daysKeepingDataInDb": {
                "type": "integer",
                "description": "Specify in days how old transfer log entries will be when they are deleted",
                "format": "int32"
              },
              "daysKeepingInProgressInDb": {
                "type": "integer",
                "description": "Specify in days how long to keep in-progress transfers",
                "format": "int32"
              },
              "exportEnabled": {
                "type": "boolean",
                "description": "Define whether to export data before deletetion. By default is false. When is set to true then the properties folder, daysKeepingDataInFiles and  recordsPerFile can be set",
                "default": false
              },
              "exportDir": {
                "type": "string",
                "description": "A full directory path specifying where the export files are stored"
              },
              "pgdumpPath": {
                "type": "string",
                "description": "A full directory path specifying where the pg_dump utility is on the PostgreSQL database server. Required for PostgreSQL database.\n"
              },
              "daysKeepingDataInFiles": {
                "type": "integer",
                "description": "The period of time in days exported files remain in the export directory before they are deleted. If this field is empty or zero, SecureTransport does not delete the files\n",
                "format": "int32"
              },
              "recordsPerFile": {
                "type": "integer",
                "description": "The maximum number of records in thousands that can exist in an exported file. When this value is exceeded, SecureTransport starts to export the transfer log entries in a new file.\n",
                "format": "int32"
              },
              "parallelismDegree": {
                "type": "integer",
                "description": "Number of processors to use for export. Applicable only for Oracle.",
                "format": "int32"
              },
              "schedules": {
                "type": "array",
                "description": "Application's schedules.",
                "items": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/OnceSchedule"
                    },
                    {
                      "$ref": "#/components/schemas/HourlySchedule"
                    },
                    {
                      "$ref": "#/components/schemas/DailySchedule"
                    },
                    {
                      "$ref": "#/components/schemas/WeeklySchedule"
                    },
                    {
                      "$ref": "#/components/schemas/MonthlySchedule"
                    },
                    {
                      "$ref": "#/components/schemas/YearlySchedule"
                    },
                    {
                      "$ref": "#/components/schemas/CronExpressionSchedule"
                    }
                  ]
                }
              }
            }
          }
        ]
      },
      "UnlicensedAccountMaintApplication": {
        "description": "A representation of an UnlicensedAccountMaint application.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Application"
          },
          {
            "required": [
              "inactivePeriod"
            ],
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "UnlicensedAccountMaint"
              },
              "inactivePeriod": {
                "type": "integer",
                "description": "Specify how long in days an unlicensed account must be inactive before it is deleted.",
                "format": "int32"
              },
              "schedules": {
                "type": "array",
                "description": "Application's schedules.",
                "items": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/OnceSchedule"
                    },
                    {
                      "$ref": "#/components/schemas/HourlySchedule"
                    },
                    {
                      "$ref": "#/components/schemas/DailySchedule"
                    },
                    {
                      "$ref": "#/components/schemas/WeeklySchedule"
                    },
                    {
                      "$ref": "#/components/schemas/MonthlySchedule"
                    },
                    {
                      "$ref": "#/components/schemas/YearlySchedule"
                    },
                    {
                      "$ref": "#/components/schemas/CronExpressionSchedule"
                    }
                  ]
                }
              }
            }
          }
        ]
      },
      "AccountFilePurgeApplication_1": {
        "description": "A representation of a File Maintenance application.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Application"
          },
          {
            "required": [
              "deleteFilesDays"
            ],
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "AccountFilePurge"
              },
              "deleteFilesDays": {
                "type": "integer",
                "description": "This property represents file retention period. All files older than the property value will be deleted.",
                "format": "int32"
              },
              "pattern": {
                "type": "string",
                "description": "This property represents file name pattern. All file names match of the property value will be regarded by the application."
              },
              "expirationPeriod": {
                "type": "boolean",
                "description": "If this property is set to true, the deletion of files based on file expiration period will be enabled. The file expiration period will be set as flow file attribute EXPIRE.ON.\n",
                "default": false
              },
              "removeFolders": {
                "type": "boolean",
                "description": "If this property is set to true, the deletion of folders remain empty after File Maintence will be enabled.",
                "default": false
              },
              "warningNotifications": {
                "type": "boolean",
                "description": "If this property is set to true, the warning notifications feature will be enabled.",
                "default": false
              },
              "notifyDays": {
                "type": "string",
                "description": "This property represents warning notifications period when emails will be sent to the recipients. Accept comma-separated values."
              },
              "sendSentinelAlert": {
                "type": "boolean",
                "description": "If this property is set to true, the warning TO_BE_DELETED state will be reported to Sentinel Server.",
                "default": false
              },
              "warnNotifyAccount": {
                "type": "boolean",
                "description": "If this property is set to true, the warning notifications will be sent to account email.",
                "default": false
              },
              "warningNotificationsTemplate": {
                "type": "string",
                "description": "The email template name which will be used in File Maintenance warning email notifications.",
                "enum": [
                  "FileMaintenanceNotification.xhtml",
                  "AccountMaintenanceNotification.xhtml",
                  "LoginThresholdReport.xhtml",
                  "AdhocDefault.xhtml",
                  "LoginThresholdNotification.xhtml",
                  "RoutingFailedNotification.xhtml",
                  "RoutingSucceededNotification.xhtml",
                  "RoutingTriggeredNotification.xhtml"
                ],
                "default": "FileMaintenanceNotification.xhtml"
              },
              "warnNotifyEmails": {
                "type": "string",
                "description": "This property represents comma-separated email addresses for warning notifications recipients."
              },
              "deletionNotifications": {
                "type": "boolean",
                "description": "If this property is set to true, the deletion notifications feature will be enabled.",
                "default": false
              },
              "deletionNotificationsTemplate": {
                "type": "string",
                "description": "The email template name which will be used in File Maintenance report email notifications.",
                "enum": [
                  "FileMaintenanceNotification.xhtml",
                  "AccountMaintenanceNotification.xhtml",
                  "LoginThresholdReport.xhtml",
                  "AdhocDefault.xhtml",
                  "LoginThresholdNotification.xhtml",
                  "RoutingFailedNotification.xhtml",
                  "RoutingSucceededNotification.xhtml",
                  "RoutingTriggeredNotification.xhtml"
                ],
                "default": "FileMaintenanceNotification.xhtml"
              },
              "deletionNotifyAccount": {
                "type": "boolean",
                "description": "If this property is set to true, the deletion notifications will be sent to account email.",
                "default": false
              },
              "deletionNotifyEmails": {
                "type": "string",
                "description": "This property represents comma-separated email addresses for deletion notifications recipients."
              },
              "schedules": {
                "type": "array",
                "description": "Application's schedules.",
                "items": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/OnceSchedule"
                    },
                    {
                      "$ref": "#/components/schemas/HourlySchedule"
                    },
                    {
                      "$ref": "#/components/schemas/DailySchedule"
                    },
                    {
                      "$ref": "#/components/schemas/WeeklySchedule"
                    },
                    {
                      "$ref": "#/components/schemas/MonthlySchedule"
                    },
                    {
                      "$ref": "#/components/schemas/YearlySchedule"
                    },
                    {
                      "$ref": "#/components/schemas/CronExpressionSchedule"
                    }
                  ]
                }
              }
            }
          }
        ]
      },
      "AccountMaintenanceApplication_1": {
        "description": "A representation of an Account Maintenance application.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Application"
          },
          {
            "required": [
              "accountAction"
            ],
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "AccountTTL"
              },
              "accountCreationDaysCriteria": {
                "minimum": 0,
                "type": "integer",
                "description": "The criteria representing the amount of days after account creation or first maintenance job run.",
                "format": "int32"
              },
              "accountInactivityDaysCriteria": {
                "minimum": 0,
                "type": "integer",
                "description": "The criteria representing the amount of days of account inactivity.",
                "format": "int32"
              },
              "accountAction": {
                "type": "string",
                "description": "The action which should be performed when Account Maintenance criteria is met.",
                "enum": [
                  "DELETE",
                  "DISABLE",
                  "PURGE"
                ]
              },
              "deleteDisabledAccountAfterXDaysCriteria": {
                "minimum": 0,
                "type": "integer",
                "description": "The sub-action criteria representing the amount of days for deletion of accounts disabled by Account Maintenance application only. It is valid if action is set to \"DISABLE\".\n",
                "format": "int32"
              },
              "notificationDays": {
                "type": "string",
                "description": "The comma-separated periods for notifications."
              },
              "reportNotificationEmailTemplate": {
                "type": "string",
                "description": "The email template name which will be used in Account Maintenance report email notifications.",
                "enum": [
                  "AccountMaintenanceNotification.xhtml",
                  "FileMaintenanceNotification.xhtml",
                  "LoginThresholdReport.xhtml",
                  "AdhocDefault.xhtml",
                  "LoginThresholdNotification.xhtml",
                  "RoutingFailedNotification.xhtml",
                  "RoutingSucceededNotification.xhtml",
                  "RoutingTriggeredNotification.xhtml"
                ],
                "default": "AccountMaintenanceNotification.xhtml"
              },
              "enableAccountNotifications": {
                "type": "boolean",
                "description": "If the account matches a criteria and an action to be performed in X days or sooner, a notification mail should be sent to the email address configured for that user. Accepts \"on\" value to enable the notifications.",
                "default": false
              },
              "actionNotificationEmails": {
                "type": "string",
                "description": "The comma-separated email addresses for notifications."
              },
              "passwordNotificationDays": {
                "type": "string",
                "description": "The comma-separated periods for the account password expiration notifications."
              },
              "passwordNotificationEmailTemplate": {
                "type": "string",
                "description": "The email template name which will be used in Account Maintenance password email notifications.",
                "enum": [
                  "AccountMaintenanceNotification.xhtml",
                  "FileMaintenanceNotification.xhtml",
                  "LoginThresholdReport.xhtml",
                  "AdhocDefault.xhtml",
                  "LoginThresholdNotification.xhtml",
                  "RoutingFailedNotification.xhtml",
                  "RoutingSucceededNotification.xhtml",
                  "RoutingTriggeredNotification.xhtml"
                ],
                "default": "AccountMaintenanceNotification.xhtml"
              },
              "enablePasswordExpirationNotifications": {
                "type": "boolean",
                "description": "If the account password will expire in one of configured notification days, a notification mail will be sent to the email addresses configured for that user. Accepts \"on\" value to enable the password exipration notifications.",
                "default": false
              },
              "passwordExpirationNotificationEmails": {
                "type": "string",
                "description": "The comma-separated email addresses for the account password exipration notifications."
              },
              "certificateNotificationDays": {
                "type": "string",
                "description": "The comma-separated periods for the account certificates expiration notifications."
              },
              "firstMaintenanceRun": {
                "minimum": 0,
                "type": "integer",
                "description": "First TTL maintenance job run.",
                "format": "int64"
              },
              "certificateNotificationEmailTemplate": {
                "type": "string",
                "description": "The email template name which will be used in Account Maintenance certificate email notifications.",
                "enum": [
                  "AccountMaintenanceNotification.xhtml",
                  "FileMaintenanceNotification.xhtml",
                  "LoginThresholdReport.xhtml",
                  "AdhocDefault.xhtml",
                  "LoginThresholdNotification.xhtml",
                  "RoutingFailedNotification.xhtml",
                  "RoutingSucceededNotification.xhtml",
                  "RoutingTriggeredNotification.xhtml"
                ],
                "default": "AccountMaintenanceNotification.xhtml"
              },
              "enableCertificateExpirationNotifications": {
                "type": "boolean",
                "description": "If the account certificates will expire in one of configured notification days, a notification mail will be sent to the email addresses configured for that user. Accepts \"on\" value to enable the certificates exipration notifications.",
                "default": false
              },
              "notificationCertificateEmails": {
                "type": "string",
                "description": "The comma-separated email addresses for the account certificates exipration notifications."
              },
              "schedules": {
                "type": "array",
                "description": "Application's schedules.",
                "items": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/OnceSchedule"
                    },
                    {
                      "$ref": "#/components/schemas/HourlySchedule"
                    },
                    {
                      "$ref": "#/components/schemas/DailySchedule"
                    },
                    {
                      "$ref": "#/components/schemas/WeeklySchedule"
                    },
                    {
                      "$ref": "#/components/schemas/MonthlySchedule"
                    },
                    {
                      "$ref": "#/components/schemas/YearlySchedule"
                    },
                    {
                      "$ref": "#/components/schemas/CronExpressionSchedule"
                    }
                  ]
                }
              }
            }
          }
        ]
      },
      "AdvancedRoutingApplication_1": {
        "description": "A representation of an AdvancedRouting application.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Application"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "AdvancedRouting"
              }
            }
          }
        ]
      },
      "ArchiveMaintApplication_1": {
        "description": "A representation of an ArchiveMaint application.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Application"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "ArchiveMaint"
              },
              "schedules": {
                "type": "array",
                "description": "Application's schedules.",
                "items": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/OnceSchedule"
                    },
                    {
                      "$ref": "#/components/schemas/HourlySchedule"
                    },
                    {
                      "$ref": "#/components/schemas/DailySchedule"
                    },
                    {
                      "$ref": "#/components/schemas/WeeklySchedule"
                    },
                    {
                      "$ref": "#/components/schemas/MonthlySchedule"
                    },
                    {
                      "$ref": "#/components/schemas/YearlySchedule"
                    },
                    {
                      "$ref": "#/components/schemas/CronExpressionSchedule"
                    }
                  ]
                }
              }
            }
          }
        ]
      },
      "AuditLogMaintApplication_1": {
        "description": "A representation of an AuditLogMaint application.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Application"
          },
          {
            "required": [
              "dayMode",
              "timeKeepingDataInDb"
            ],
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "AuditLogMaint"
              },
              "timeKeepingDataInDb": {
                "type": "integer",
                "description": "Specify in days or months (depending on 'dayMode' property) how old transfer log entries will be when they are deleted.\n",
                "format": "int32"
              },
              "dayMode": {
                "type": "integer",
                "description": "The day mode. Set value 0 for months or 1 for days.",
                "format": "int32"
              },
              "exportEnabled": {
                "type": "boolean",
                "description": "Define whether to export the deleted audit log entries to a file before they are deleted. If true then exportDir property is required to be set.\n",
                "default": false
              },
              "exportDir": {
                "type": "string",
                "description": "A full directory path specifying where the export files are. stored."
              },
              "schedules": {
                "type": "array",
                "description": "Application's schedules.",
                "items": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/OnceSchedule"
                    },
                    {
                      "$ref": "#/components/schemas/HourlySchedule"
                    },
                    {
                      "$ref": "#/components/schemas/DailySchedule"
                    },
                    {
                      "$ref": "#/components/schemas/WeeklySchedule"
                    },
                    {
                      "$ref": "#/components/schemas/MonthlySchedule"
                    },
                    {
                      "$ref": "#/components/schemas/YearlySchedule"
                    },
                    {
                      "$ref": "#/components/schemas/CronExpressionSchedule"
                    }
                  ]
                }
              }
            }
          }
        ]
      },
      "BasicApplication_1": {
        "description": "A representation of a Basic application.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Application"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "Basic"
              }
            }
          }
        ]
      },
      "HumanSystemApplication_1": {
        "description": "A representation of a HumanSystem application.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Application"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "HumanSystem"
              }
            }
          }
        ]
      },
      "LogEntryMaintApplication_1": {
        "description": "A representation of a LogEntryMaint application.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Application"
          },
          {
            "required": [
              "recordsPerFile",
              "timeKeepingDataInDb"
            ],
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "LogEntryMaint"
              },
              "timeKeepingDataInDb": {
                "type": "integer",
                "description": "Specify how old log entries will be when they are deleted in terms of days, hours, or minutes. You cannot enter spaces-only values in this field.\n",
                "format": "int32"
              },
              "exportDir": {
                "type": "string",
                "description": "A full directory path specifying where the export files are stored. If you are exporting from an Oracle database, you must fill in the name of the directory defined in the Oracle database ,for example, ST_DMPDIR. The value of this property will be set automatically for the folder property of the application.\n",
                "format": "int32"
              },
              "pgdumpPath": {
                "type": "string",
                "description": "A full directory path specifying where the pg_dump utility is on the PostgreSQL database server. Required for PostgreSQL database.\n"
              },
              "daysKeepingDataInFiles": {
                "type": "integer",
                "description": "Specify when SecureTransport deletes old exported log entry data. The value can be specified in days/hours/minutes depending on the dayMode property.\n",
                "format": "int32"
              },
              "recordsPerFile": {
                "type": "integer",
                "description": "Specify the maximum number of records that can exist in an exported file. When this value is exceeded, SecureTransport starts to export the server log entries in a new file.\n",
                "format": "int32"
              },
              "dayMode": {
                "type": "integer",
                "description": "The day mode. Set value 0 for days; 1 for hours or 2 for hours.",
                "format": "int32"
              },
              "exportEnabled": {
                "type": "boolean",
                "description": "Whether export is enabled. Applicable only for Oracle.",
                "default": false
              },
              "parallelismDegree": {
                "type": "integer",
                "description": "Number of processors to use for export. Applicable only for Oracle.",
                "format": "int32"
              },
              "schedules": {
                "type": "array",
                "description": "Application's schedules.",
                "items": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/OnceSchedule"
                    },
                    {
                      "$ref": "#/components/schemas/HourlySchedule"
                    },
                    {
                      "$ref": "#/components/schemas/DailySchedule"
                    },
                    {
                      "$ref": "#/components/schemas/WeeklySchedule"
                    },
                    {
                      "$ref": "#/components/schemas/MonthlySchedule"
                    },
                    {
                      "$ref": "#/components/schemas/YearlySchedule"
                    },
                    {
                      "$ref": "#/components/schemas/CronExpressionSchedule"
                    }
                  ]
                }
              }
            }
          }
        ]
      },
      "LoginThresholdMaintenanceApplication_1": {
        "description": "A representation of a LoginThresholdMaintenance application.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Application"
          },
          {
            "required": [
              "isUnlock"
            ],
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "LoginThresholdMaintenance"
              },
              "isUnlock": {
                "type": "boolean",
                "description": "Define whether unlock functionality is enabled",
                "default": false
              },
              "isReport": {
                "type": "boolean",
                "description": "If this property is set to true, a report will be sent to the specified email addresses in the emails property. If isUnlock is set to true, the report will contain a list of unlocked users. If isUnlock is set to false, the report will contain a list of locked, due to login threshold functionality, users\n",
                "default": false
              },
              "emails": {
                "type": "string",
                "description": "The email address or addresses to deliver the report to. Email addresses can be separated by either a comma or a semicolon.\n"
              },
              "reportEmailTemplate": {
                "type": "string",
                "description": "The email template for the report from the Report Email Template list.",
                "enum": [
                  "LoginThresholdReport.xhtml",
                  "AdhocDefault.xhtml",
                  "LoginThresholdNotification.xhtml",
                  "RoutingFailedNotification.xhtml",
                  "RoutingSucceededNotification.xhtml",
                  "RoutingTriggeredNotification.xhtml",
                  "AccountMaintenanceNotification.xhtml",
                  "FileMaintenanceNotification.xhtml"
                ],
                "default": "LoginThresholdReport.xhtml"
              },
              "schedules": {
                "type": "array",
                "description": "Application's schedules.",
                "items": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/OnceSchedule"
                    },
                    {
                      "$ref": "#/components/schemas/HourlySchedule"
                    },
                    {
                      "$ref": "#/components/schemas/DailySchedule"
                    },
                    {
                      "$ref": "#/components/schemas/WeeklySchedule"
                    },
                    {
                      "$ref": "#/components/schemas/MonthlySchedule"
                    },
                    {
                      "$ref": "#/components/schemas/YearlySchedule"
                    },
                    {
                      "$ref": "#/components/schemas/CronExpressionSchedule"
                    }
                  ]
                }
              }
            }
          }
        ]
      },
      "MBFTApplication_1": {
        "description": "A representation of a MBFT application.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Application"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "MBFT"
              }
            }
          }
        ]
      },
      "PackageRetentionMaintApplication_1": {
        "description": "A representation of a PackageRetentionMaint application.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Application"
          },
          {
            "required": [
              "maxRunningMinutes"
            ],
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "PackageRetentionMaint"
              },
              "maxRunningMinutes": {
                "type": "integer",
                "description": "The maximum number of minutes the application runs each time it is started.",
                "format": "int32"
              },
              "schedules": {
                "type": "array",
                "description": "Application's schedules.",
                "items": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/OnceSchedule"
                    },
                    {
                      "$ref": "#/components/schemas/HourlySchedule"
                    },
                    {
                      "$ref": "#/components/schemas/DailySchedule"
                    },
                    {
                      "$ref": "#/components/schemas/WeeklySchedule"
                    },
                    {
                      "$ref": "#/components/schemas/MonthlySchedule"
                    },
                    {
                      "$ref": "#/components/schemas/YearlySchedule"
                    },
                    {
                      "$ref": "#/components/schemas/CronExpressionSchedule"
                    }
                  ]
                }
              }
            }
          }
        ]
      },
      "SentinelLinkDataMaintApplication_1": {
        "description": "A representation of a SentinelLinkDataMaint application.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Application"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "SentinelLinkDataMaint"
              },
              "schedules": {
                "type": "array",
                "description": "Application's schedules.",
                "items": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/OnceSchedule"
                    },
                    {
                      "$ref": "#/components/schemas/HourlySchedule"
                    },
                    {
                      "$ref": "#/components/schemas/DailySchedule"
                    },
                    {
                      "$ref": "#/components/schemas/WeeklySchedule"
                    },
                    {
                      "$ref": "#/components/schemas/MonthlySchedule"
                    },
                    {
                      "$ref": "#/components/schemas/YearlySchedule"
                    },
                    {
                      "$ref": "#/components/schemas/CronExpressionSchedule"
                    }
                  ]
                }
              }
            }
          }
        ]
      },
      "SharedFolderApplication_1": {
        "description": "A representation of a SharedFolder application.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Application"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "SharedFolder"
              },
              "sharedFolder": {
                "type": "string",
                "description": "The shared folder."
              }
            }
          }
        ]
      },
      "SiteMailboxApplication_1": {
        "description": "A representation of a SiteMailbox application.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Application"
          },
          {
            "required": [
              "inboxFolder",
              "outboxFolder"
            ],
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "SiteMailbox"
              },
              "outboxFolder": {
                "type": "string",
                "description": "The application outbox folder"
              },
              "inboxFolder": {
                "type": "string",
                "description": "The application inbox folder."
              },
              "dropFolder": {
                "type": "string",
                "description": "The drop folder."
              }
            }
          }
        ]
      },
      "StandardRouterApplication_1": {
        "description": "A representation of a StandardRouter application.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Application"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "StandardRouter"
              },
              "outboxEnabled": {
                "type": "boolean",
                "description": "[Allow Subscribers to Submit files in this Application] When this property is set to true then permit incoming file transfers from the subscriber parties to the application and following properties can be set: OUTBOX_FOLDER, SECURE_CONNECTION_REQUIRED, RENAME_FILES and OUTGOING_FILENAME_FORMAT\n",
                "default": false
              },
              "outboxFolder": {
                "type": "string",
                "description": "The name of the folder where incoming transferred files are submitted via subscriptions"
              },
              "secureConnectionRequired": {
                "type": "boolean",
                "description": "Define whether to enable SSL for the incoming transfers",
                "default": false
              },
              "renameFilesEnabled": {
                "type": "boolean",
                "description": "Define whether to add a prefix to the file name identifying the sender before it is sent to the internal system\n",
                "default": false
              },
              "outboxFileFormat": {
                "type": "string",
                "description": "The format of the new file name. By default, the file is renamed in the format &lt;ID&gt;\\_&lt;FILENAME&gt; where, &lt;ID&gt; is the Subscriber ID specified when the subscription is created, &lt;FILENAME&gt; is the original name of the transferred file and \"\\_\" is the delimiter. The use of the placeholders, &lt;ID&gt;,&lt;FILENAME&gt; and the delimiter in the new file name format is mandatory\n",
                "default": "false"
              },
              "inboxEnabled": {
                "type": "boolean",
                "description": "[Send files to Subscribers] When this property is set to true then permit outgoing file transfers from the application to the subscribed parties. The properties INBOX_FOLDER and ID_FROM_FILENAME_EXTRACTION_PATTERN can be set\n",
                "default": false
              },
              "inboxFolder": {
                "type": "boolean",
                "description": "[Receive folder] The name of the folder where outgoing transferred files are submitted to the subscriber. The receive folder is created as a sub-folder of the subscription folder\n",
                "default": false
              },
              "inboxIdPattern": {
                "type": "string",
                "description": "A pattern in the ID Pattern box to define the ID of the subscriber to whom files are routed. By default, the pattern is &lt;ID&gt;\\_&lt;FILENAME&gt; where, &lt;ID&gt; is a regular expression corresponding to the Subscriber ID specified when the subscription is created, &lt;FILENAME&gt; is the original name of the transferred file and and \"\\_\" is the delimiter. The use of the placeholders, &lt;ID&gt;,&lt;FILENAME&gt; and the delimiter in the new file name format is mandatory.\n",
                "default": "false"
              },
              "dropFolder": {
                "type": "string",
                "description": "The drop folder."
              }
            }
          }
        ]
      },
      "SynchronyTransferApplication_1": {
        "description": "A representation of a SynchronyTransfer application.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Application"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "SynchronyTransfer"
              }
            }
          }
        ]
      },
      "TransferLogMaintApplication_1": {
        "description": "A representation of a TransferLogMaint application.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Application"
          },
          {
            "required": [
              "daysKeepingDataInDb",
              "daysKeepingDataInFiles",
              "daysKeepingInProgressInDb",
              "recordsPerFile"
            ],
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "TransferLogMaint"
              },
              "daysKeepingDataInDb": {
                "type": "integer",
                "description": "Specify in days how old transfer log entries will be when they are deleted",
                "format": "int32"
              },
              "daysKeepingInProgressInDb": {
                "type": "integer",
                "description": "Specify in days how long to keep in-progress transfers",
                "format": "int32"
              },
              "exportEnabled": {
                "type": "boolean",
                "description": "Define whether to export data before deletetion. By default is false. When is set to true then the properties folder, daysKeepingDataInFiles and  recordsPerFile can be set",
                "default": false
              },
              "exportDir": {
                "type": "string",
                "description": "A full directory path specifying where the export files are stored"
              },
              "pgdumpPath": {
                "type": "string",
                "description": "A full directory path specifying where the pg_dump utility is on the PostgreSQL database server. Required for PostgreSQL database.\n"
              },
              "daysKeepingDataInFiles": {
                "type": "integer",
                "description": "The period of time in days exported files remain in the export directory before they are deleted. If this field is empty or zero, SecureTransport does not delete the files\n",
                "format": "int32"
              },
              "recordsPerFile": {
                "type": "integer",
                "description": "The maximum number of records in thousands that can exist in an exported file. When this value is exceeded, SecureTransport starts to export the transfer log entries in a new file.\n",
                "format": "int32"
              },
              "parallelismDegree": {
                "type": "integer",
                "description": "Number of processors to use for export. Applicable only for Oracle.",
                "format": "int32"
              },
              "schedules": {
                "type": "array",
                "description": "Application's schedules.",
                "items": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/OnceSchedule"
                    },
                    {
                      "$ref": "#/components/schemas/HourlySchedule"
                    },
                    {
                      "$ref": "#/components/schemas/DailySchedule"
                    },
                    {
                      "$ref": "#/components/schemas/WeeklySchedule"
                    },
                    {
                      "$ref": "#/components/schemas/MonthlySchedule"
                    },
                    {
                      "$ref": "#/components/schemas/YearlySchedule"
                    },
                    {
                      "$ref": "#/components/schemas/CronExpressionSchedule"
                    }
                  ]
                }
              }
            }
          }
        ]
      },
      "UnlicensedAccountMaintApplication_1": {
        "description": "A representation of an UnlicensedAccountMaint application.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Application"
          },
          {
            "required": [
              "inactivePeriod"
            ],
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "UnlicensedAccountMaint"
              },
              "inactivePeriod": {
                "type": "integer",
                "description": "Specify how long in days an unlicensed account must be inactive before it is deleted.",
                "format": "int32"
              },
              "schedules": {
                "type": "array",
                "description": "Application's schedules.",
                "items": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/OnceSchedule"
                    },
                    {
                      "$ref": "#/components/schemas/HourlySchedule"
                    },
                    {
                      "$ref": "#/components/schemas/DailySchedule"
                    },
                    {
                      "$ref": "#/components/schemas/WeeklySchedule"
                    },
                    {
                      "$ref": "#/components/schemas/MonthlySchedule"
                    },
                    {
                      "$ref": "#/components/schemas/YearlySchedule"
                    },
                    {
                      "$ref": "#/components/schemas/CronExpressionSchedule"
                    }
                  ]
                }
              }
            }
          }
        ]
      },
      "BusinessUnitResult": {
        "type": "object",
        "properties": {
          "resultSet": {
            "$ref": "#/components/schemas/ResultSet"
          },
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BusinessUnit"
            }
          }
        }
      },
      "BusinessUnit": {
        "required": [
          "baseFolder",
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 2147483647,
            "minLength": 1,
            "type": "string",
            "description": "The unique name of the business unit entity."
          },
          "baseFolder": {
            "maxLength": 2147483647,
            "minLength": 1,
            "type": "string",
            "description": "The base folder of the business unit entity."
          },
          "parent": {
            "type": "string",
            "description": "The name of the parent business unit entity."
          },
          "businessUnitHierarchy": {
            "type": "string",
            "description": "The full path hierarchy of the business unit entity."
          },
          "baseFolderModifyingAllowed": {
            "type": "boolean",
            "description": "Flag indicating if the base folder of the business unit entity is modifiable (this property defines whether the base folder for the belonging accounts may be modified).\n",
            "default": false
          },
          "homeFolderModifyingAllowed": {
            "type": "boolean",
            "description": "Flag indicating if the belonging accounts' base folders are modifiable.",
            "default": false
          },
          "dmz": {
            "type": "string",
            "description": "The name of the DMZ zone"
          },
          "managedByCG": {
            "type": "boolean",
            "description": "This property indicates whether the business unit is managed by Central Governance.",
            "default": false
          },
          "enabledIcapServers": {
            "type": "array",
            "description": "Enabled icap servers of the business unit.",
            "items": {
              "type": "string"
            }
          },
          "additionalAttributes": {
            "type": "object",
            "additionalProperties": {
              "maxLength": 4000,
              "minLength": 1,
              "type": "string"
            },
            "description": "Additional attributes which are defined with \"key\": \"value\" pairs. Keys must start with \"userVars.\" prefix, follow the pattern: [a-zA-Z0-9_.]+\nand have length between 10 and 255 characters (including the prefix). Non prefixed part of key should not start with \"userVars.\", since it is\na reserved word. Both key and value cannot be blank.\n"
          },
          "bandwidthLimits": {
            "$ref": "#/components/schemas/BandwidthLimitsForBU"
          },
          "accountMaintenanceSettings": {
            "$ref": "#/components/schemas/AccountMaintenanceSettingsForBU"
          },
          "htmlTemplateSettings": {
            "$ref": "#/components/schemas/HtmlTemplateSettings"
          },
          "transfersApiSettings": {
            "$ref": "#/components/schemas/TransfersApiSettings"
          },
          "adHocSettings": {
            "$ref": "#/components/schemas/AdhocSettings"
          },
          "fileArchivingSettings": {
            "$ref": "#/components/schemas/FileArchivingSettings"
          },
          "loginRestrictionSettings": {
            "$ref": "#/components/schemas/LoginRestrictionSettings"
          },
          "addressBookSettings": {
            "$ref": "#/components/schemas/AddressBookSettingsForBU"
          },
          "fileMaintenanceSettings": {
            "$ref": "#/components/schemas/FileMaintenanceSettingsForBU"
          },
          "sharedFoldersCollaborationAllowed": {
            "type": "boolean",
            "description": "Flag indicating if accounts may collaborate using, creating and sharing folders.\n",
            "default": false
          }
        }
      },
      "BandwidthLimitsForBU": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BandwidthLimits"
          },
          {
            "type": "object",
            "properties": {
              "modifyLimitsAllowed": {
                "type": "boolean",
                "description": "Whether modifying limits is allowed.",
                "default": false
              }
            }
          }
        ]
      },
      "AccountMaintenanceSettingsForBU": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessUnitAccountMaintenanceSettings"
          },
          {
            "type": "object",
            "properties": {
              "emailNotificationBeforeAction": {
                "$ref": "#/components/schemas/EmailNotificationBeforeActionForBU"
              },
              "emailNotificationForUserPassword": {
                "$ref": "#/components/schemas/EmailNotificationForUserPasswordForBU"
              },
              "emailNotificationForUserCertificate": {
                "$ref": "#/components/schemas/EmailNotificationForUserCertificateForBU"
              }
            }
          }
        ]
      },
      "EmailNotificationBeforeActionForBU": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EmailNotificationBeforeAction"
          },
          {
            "type": "object",
            "properties": {
              "notifyEmails": {
                "type": "string",
                "description": "The comma-separated email addresses for Account Maintenance notifications."
              }
            }
          }
        ]
      },
      "EmailNotificationForUserPasswordForBU": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EmailNotificationForUserPassword"
          },
          {
            "type": "object",
            "properties": {
              "notifyEmails": {
                "type": "string",
                "description": "The comma-separated email addresses for Account Maintenance notifications."
              }
            }
          }
        ]
      },
      "EmailNotificationForUserCertificateForBU": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EmailNotificationForUserCertificate"
          },
          {
            "type": "object",
            "properties": {
              "notifyEmails": {
                "type": "string",
                "description": "The comma-separated email addresses for Account Maintenance notifications."
              }
            }
          }
        ]
      },
      "HtmlTemplateSettings": {
        "type": "object",
        "properties": {
          "htmlTemplateFolderPath": {
            "pattern": "^((Default HTML Template)|(Axway Jelly Ball 9)|(Axway Box and Stripe in Blue)|(ST Web Client)|(SecureTransport Legacy Client))$",
            "type": "string",
            "description": "The HTML template directory path on the local system used for this business unit entity",
            "default": "Default HTML Template"
          },
          "isAllowedForModifying": {
            "type": "boolean",
            "description": "Flag indicating if the HTML Template folder may be modified",
            "default": false
          }
        }
      },
      "TransfersApiSettings": {
        "type": "object",
        "properties": {
          "isWebServiceRightsModifyingAllowed": {
            "type": "boolean",
            "description": "Flag indicating if web services rights are allowed for modifying",
            "default": false
          },
          "transfersWebServiceAllowed": {
            "type": "boolean",
            "description": "Defines whether the access to the /transfers resource from the End-user REST API is allowed",
            "default": false
          }
        }
      },
      "FileArchivingSettings": {
        "required": [
          "customFileSize",
          "customFileSizePolicy",
          "encryptionCertificatePolicy",
          "folderPolicy",
          "policy"
        ],
        "type": "object",
        "properties": {
          "policy": {
            "type": "string",
            "description": "Defines whether the child business units are allowed to modify archiving policy",
            "enum": [
              "default",
              "enabled",
              "disabled"
            ]
          },
          "policyModifyingAllowed": {
            "type": "boolean",
            "description": "Defines whether the child business units are allowed to modify archiving policy.",
            "default": false
          },
          "folderPolicy": {
            "type": "string",
            "description": "Defines whether account under BU can modify folder.",
            "enum": [
              "default",
              "custom"
            ]
          },
          "customFolder": {
            "type": "string",
            "description": "Custom archiving folder of the business unit"
          },
          "encryptionCertificatePolicy": {
            "type": "string",
            "description": "Archiving certificate policy of the business unit."
          },
          "customEncryptionCertificate": {
            "type": "string",
            "description": "Custom encryption certificate of the business unit."
          },
          "customFileSizePolicy": {
            "type": "string",
            "description": "Custom file size policy of the business unit.",
            "enum": [
              "default",
              "custom"
            ]
          },
          "customFileSize": {
            "minimum": 0,
            "type": "integer",
            "description": "Custom file size for archiving of the businessunit unit.",
            "format": "int32"
          }
        }
      },
      "LoginRestrictionSettings": {
        "type": "object",
        "properties": {
          "isPolicyModifyingAllowed": {
            "type": "boolean",
            "description": "Flag indicating whether the login restriction policy option is modifiable on account level.",
            "default": false
          },
          "policy": {
            "type": "string",
            "description": "The login restriction policy for this business unit."
          }
        }
      },
      "AddressBookSettingsForBU": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AddressBookSettings"
          },
          {
            "type": "object",
            "properties": {
              "modifySourcesAllowed": {
                "type": "boolean",
                "description": "If sources are allowed for modifying.",
                "default": false
              },
              "modifyCollaborationAllowed": {
                "type": "boolean",
                "description": "Defines whether the Shared Folders collaboration is enabled for the business unit successors.",
                "default": false
              }
            }
          }
        ]
      },
      "FileMaintenanceSettingsForBU": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FileMaintenanceSettings"
          },
          {
            "type": "object",
            "properties": {
              "allowPolicyModifying": {
                "type": "boolean",
                "description": "This property defines whether the modification of File Maintenance settings at account level is enabled/disabled.",
                "default": false
              },
              "warnNotifyEmails": {
                "type": "string",
                "description": "This property represents comma-separated email addresses for warning notifications recipients."
              },
              "deletionNotifyEmails": {
                "type": "string",
                "description": "This property represents comma-separated email addresses for deletion notifications recipients."
              }
            }
          }
        ]
      },
      "CertificateResult": {
        "type": "object",
        "properties": {
          "resultSet": {
            "$ref": "#/components/schemas/ResultSet"
          },
          "result": {
            "type": "array",
            "items": {
              "discriminator": {
                "propertyName": "usage",
                "mapping": {
                  "private": "#/PrivateCertificate",
                  "local": "#/LocalCertificate",
                  "partner": "#/PartnerCertificate",
                  "login": "#/LoginCertificate",
                  "trusted": "#/TrustedCertificate"
                }
              },
              "anyOf": [
                {
                  "$ref": "#/components/schemas/PrivateCertificate"
                },
                {
                  "$ref": "#/components/schemas/LocalCertificate"
                },
                {
                  "$ref": "#/components/schemas/PartnerCertificate"
                },
                {
                  "$ref": "#/components/schemas/LoginCertificate"
                },
                {
                  "$ref": "#/components/schemas/TrustedCertificate"
                }
              ]
            }
          }
        }
      },
      "PrivateCertificate": {
        "description": "A representation of a private certificate.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Certificate"
          },
          {
            "type": "object",
            "properties": {
              "usage": {
                "type": "string",
                "default": "private"
              }
            }
          }
        ]
      },
      "Certificate": {
        "required": [
          "caPassword",
          "keySize",
          "subject",
          "type",
          "usage",
          "validityPeriod"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the certificate entity."
          },
          "name": {
            "maxLength": 80,
            "type": "string",
            "description": "The name of the certificate."
          },
          "subject": {
            "type": "string",
            "description": "The the certificate subject DN (distinguished name) in RFC2253 format. Example: 'CN=test,OU=Axway_TT,O=Axway,L=Sofia,ST=Sofia,C=Bulgaria'.\n"
          },
          "type": {
            "type": "string",
            "description": "The type of the certificate entity as string.",
            "enum": [
              "x509",
              "pgp",
              "ssh"
            ]
          },
          "usage": {
            "type": "string",
            "description": "The usage of the certificate entity as string.",
            "enum": [
              "login",
              "trusted",
              "partner",
              "local",
              "private"
            ]
          },
          "expirationTime": {
            "type": "string",
            "description": "The certificate expiration time in Unix Timestamp format. This is a read only property and it is automatically calculated depending on the 'validityPeriod' property\n"
          },
          "creationTime": {
            "type": "integer",
            "description": "The creation time of the certificate entity in Unix Timestamp format.",
            "format": "int64"
          },
          "signAlgorithm": {
            "type": "string",
            "description": "The certificate signature algorithm as string",
            "enum": [
              "SHA1withRSA",
              "SHA256withRSA",
              "SHA384withRSA",
              "SHA512withRSA"
            ],
            "default": "SHA256withRSA"
          },
          "keySize": {
            "type": "integer",
            "description": "The size of the key. Valid values are: 1024, 2048, 3072, 4096.\n",
            "format": "int32",
            "default": 2048
          },
          "keyAlgorithm": {
            "type": "string",
            "description": "The name of the algorithm for generated key. Only for certificate entities of type 'pgp' this property can be set (for certificate entities of type 'x509' this property is automatically being set to 'RSA' when generate a 'x509' certificate.\n"
          },
          "issuer": {
            "type": "string",
            "description": "The issuer of the certificate. This is a auto generating read only property."
          },
          "serialNumber": {
            "type": "string",
            "description": "The serial number. This is a auto generating read only property."
          },
          "validityPeriod": {
            "maximum": 100000.0,
            "minimum": 1,
            "type": "integer",
            "description": "The certificate validity in days.",
            "format": "int32"
          },
          "fingerprint": {
            "type": "string",
            "description": "The certificate fingerprint. This is a auto generating read only property."
          },
          "account": {
            "type": "string",
            "description": "The account, the certificate owner."
          },
          "accessLevel": {
            "type": "string",
            "description": "The access level to this certificate for other accounts.",
            "enum": [
              "PRIVATE",
              "PUBLIC",
              "BUSINESS_UNIT"
            ]
          },
          "overwrite": {
            "type": "boolean",
            "description": "Define whether to overwrite the certificate if a certificate with the same name, type and usage already exists.",
            "default": false
          },
          "caPassword": {
            "type": "string",
            "description": "The password of the CA for the certificate generation."
          },
          "exportPrivateKey": {
            "type": "boolean",
            "description": "Define whether to export the private key or not.",
            "default": false
          },
          "exportSSHPublicKey": {
            "type": "boolean",
            "description": "Define whether to export the SSH public key or not.",
            "default": false
          },
          "password": {
            "type": "string",
            "description": "The private key password."
          },
          "validationStatus": {
            "type": "string",
            "description": "The certificate validation status."
          },
          "version": {
            "type": "integer",
            "description": "The certificate version.",
            "format": "int32"
          },
          "additionalAttributes": {
            "type": "object",
            "additionalProperties": {
              "maxLength": 4000,
              "minLength": 1,
              "type": "string"
            },
            "description": "Additional attributes which are defined with \"key\": \"value\" pairs. Keys must start with \"userVars.\" prefix, follow the pattern: [a-zA-Z0-9_.]+\nand have length between 10 and 255 characters (including the prefix). Non prefixed part of key should not start with \"userVars.\", since it is\na reserved word. Both key and value cannot be blank.\n"
          }
        },
        "discriminator": {
          "propertyName": "usage"
        }
      },
      "LocalCertificate": {
        "description": "A representation of a local certificate.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Certificate"
          },
          {
            "type": "object",
            "properties": {
              "usage": {
                "type": "string",
                "default": "local"
              }
            }
          }
        ]
      },
      "PartnerCertificate": {
        "description": "A representation of a partner certificate.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Certificate"
          },
          {
            "type": "object",
            "properties": {
              "usage": {
                "type": "string",
                "default": "partner"
              }
            }
          }
        ]
      },
      "LoginCertificate": {
        "description": "A representation of a login certificate.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Certificate"
          },
          {
            "type": "object",
            "properties": {
              "usage": {
                "type": "string",
                "default": "login"
              }
            }
          }
        ]
      },
      "TrustedCertificate": {
        "description": "A representation of a trusted certificate.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Certificate"
          },
          {
            "type": "object",
            "properties": {
              "usage": {
                "type": "string",
                "default": "trusted"
              }
            }
          }
        ]
      },
      "MultiPart": {
        "type": "object",
        "properties": {
          "CertificateBody": {
            "$ref": "#/components/schemas/Certificate"
          },
          "CerificateContent": {
            "type": "string",
            "format": "binary"
          }
        }
      },
      "CertificateRequest": {
        "required": [
          "keySize",
          "subject",
          "usage"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The certificate id."
          },
          "subject": {
            "type": "string",
            "description": "The the certificate subject DN (distinguished name) in RFC2253 format. Example: 'CN=test,OU=Axway_TT,O=Axway,L=Sofia,ST=Sofia,C=Bulgaria'.\n"
          },
          "usage": {
            "type": "string",
            "description": "The certificate usage.",
            "enum": [
              "local",
              "private"
            ]
          },
          "fingerprint": {
            "type": "string",
            "description": "The certificate fingerprint."
          },
          "keySize": {
            "type": "integer",
            "description": "The size of the key. Valid values are: 1024, 2048, 3072, 4096.\n",
            "format": "int32",
            "default": 2048
          },
          "account": {
            "type": "string",
            "description": "The account, the certificate owner."
          },
          "signAlgorithm": {
            "type": "string",
            "description": "The certificate signature algorithm as string.",
            "enum": [
              "SHA1withRSA",
              "SHA256withRSA",
              "SHA384withRSA",
              "SHA512withRSA"
            ]
          }
        }
      },
      "MultiPartCertificateRequest": {
        "type": "object",
        "properties": {
          "CertificateBody": {
            "$ref": "#/components/schemas/CertificateRequest"
          },
          "CerificateContent": {
            "type": "string",
            "format": "binary"
          }
        }
      },
      "ZoneResult": {
        "type": "object",
        "properties": {
          "resultSet": {
            "$ref": "#/components/schemas/ResultSet"
          },
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Zone"
            }
          }
        }
      },
      "Zone": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 255,
            "minLength": 0,
            "pattern": "^([^\\/\\\\;\\']*)$",
            "type": "string",
            "description": "The name of the DMZ zone. Zone name can not contain characters \"\\\", \"/\", \";\" and \"'\"\n",
            "default": "string"
          },
          "description": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "The description of DMZ Zone."
          },
          "publicURLPrefix": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "The public URL prefix for public access to the DMZ via HTTP(s).\n"
          },
          "ssoSpEntityId": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "The SSO Service Provider EntityId to identify to an Identity Provider.\n"
          },
          "isDnsResolutionEnabled": {
            "type": "boolean",
            "description": "Define whether DNS resolution on Edge is enabled or not (true if DNS resolution on Edge is enabled and false-otherwise).\n",
            "default": false
          },
          "isDefault": {
            "type": "boolean",
            "description": "Define whether the DMZ zone is set to default or not.",
            "default": false
          },
          "edges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Edge"
            }
          }
        }
      },
      "Edge": {
        "required": [
          "title"
        ],
        "type": "object",
        "properties": {
          "title": {
            "maxLength": 255,
            "minLength": 0,
            "pattern": "^([^\\/\\\\;\\']*)$",
            "type": "string",
            "description": "Title of the DMZ edge. Edge title can not contain characters \"\\\", \"/\", \";\" and \"'\"\n",
            "default": "string"
          },
          "notes": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Notes for the DMZ edge"
          },
          "deploymentSite": {
            "type": "string",
            "description": "The cluster deployment site of the edge"
          },
          "enabledProxy": {
            "type": "boolean",
            "description": "Check status of the proxy whether it is enabled/disabled (true if proxy is enabled, false otherwise)\n",
            "default": false
          },
          "protocols": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EdgeProtocol"
            }
          },
          "proxies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EdgeProxy"
            }
          },
          "isAutoDiscoverable": {
            "type": "boolean",
            "description": "**Note:** Beta Feature - Do not use in Production. Check 'Beta.Dmz.DynamicNodeIpDiscovery.Enabled' configuration option.\n**Note:** The property is available only for zones different than the 'Private' one and only on Backend.\n\nCheck whether the zone type is auto-discoverable or static (true if zone is auto-discoverable, false - if static).\n",
            "default": false
          },
          "dynamicNodeIpDiscoveryFqdn": {
            "type": "string",
            "description": "**Note:** Beta Feature - Do not use in Production. Check 'Beta.Dmz.DynamicNodeIpDiscovery.Enabled' configuration option.\n**Note:** The property is available only for zones different than the 'Private' one and only on Backend.\n\nFqdn to be used for resolving multiple node addresses.\n"
          },
          "ipAddresses": {
            "type": "array",
            "description": "IP addresses for the DMZ edge",
            "items": {
              "$ref": "#/components/schemas/EdgeIpAddress"
            }
          },
          "configurationId": {
            "type": "string",
            "description": "The identifier of the machine"
          },
          "descriptor": {
            "type": "string",
            "description": "The unique identifier for current node (IP or hostname ..etc).\n"
          }
        }
      },
      "EdgeProtocol": {
        "required": [
          "port",
          "streamingProtocol"
        ],
        "type": "object",
        "properties": {
          "streamingProtocol": {
            "type": "string",
            "description": "The streaming protocol for DMZ edge",
            "enum": [
              "HTTP",
              "FTP",
              "AS2",
              "SSH",
              "PESIT",
              "ADMIN"
            ]
          },
          "port": {
            "maximum": 65535,
            "minimum": 1024,
            "type": "integer",
            "description": "The number of port for DMZ edge on the current protocol",
            "format": "int32"
          },
          "isEnabled": {
            "type": "boolean",
            "description": "Define whether the protocol is enabled to be used from the edge",
            "default": false
          },
          "sslAlias": {
            "type": "string",
            "description": "Certificate reference for DMZ edge on the current protocol."
          }
        }
      },
      "EdgeProxy": {
        "required": [
          "port",
          "proxyProtocol"
        ],
        "type": "object",
        "properties": {
          "proxyProtocol": {
            "type": "string",
            "description": "The proxy protocol",
            "enum": [
              "SOCKS_PROXY",
              "HTTP_PROXY"
            ]
          },
          "port": {
            "type": "integer",
            "description": "The number of port for the proxi",
            "format": "int32"
          },
          "isEnabled": {
            "type": "boolean",
            "description": "Define whether the proxy is enabled",
            "default": false
          },
          "username": {
            "type": "string",
            "description": "The user name to authenticate to the proxy"
          },
          "isUsePassword": {
            "type": "boolean",
            "description": "Shows if the password should be preserved/overwritten or removed (true if the password should be preserved/overwritten with non empty one and false when the password should be removed)\n",
            "default": false
          },
          "password": {
            "type": "string",
            "description": "The password for the edge proxy. Password can be set only if 'isUsePassword' is set to 'true'. This property can not be get via the ST REST API.\n"
          }
        }
      },
      "EdgeIpAddress": {
        "required": [
          "ipAddress"
        ],
        "type": "object",
        "properties": {
          "ipAddress": {
            "type": "string",
            "description": "The IP address for DMZ edge."
          }
        }
      },
      "PolicyResult": {
        "type": "object",
        "properties": {
          "resultSet": {
            "$ref": "#/components/schemas/ResultSet"
          },
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Policy"
            }
          }
        }
      },
      "Policy": {
        "required": [
          "name",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the policy.",
            "readOnly": true
          },
          "name": {
            "maxLength": 80,
            "minLength": 1,
            "pattern": "^([^/;']*)$",
            "type": "string",
            "description": "The name of the login restriction policy. The name can not contain characters \"/\", \";\" and \"'\".",
            "default": "string"
          },
          "type": {
            "type": "string",
            "description": "The type of the login restriction policy.",
            "enum": [
              "ALLOW_THEN_DENY",
              "DENY_THEN_ALLOW"
            ],
            "default": "ALLOW_THEN_DENY"
          },
          "description": {
            "type": "string",
            "description": "The description of the login restriction policy."
          },
          "businessUnits": {
            "type": "array",
            "description": "Names of business units that are assigned to the login restriction policy to.",
            "items": {
              "type": "string"
            }
          },
          "additionalAttributes": {
            "type": "object",
            "additionalProperties": {
              "maxLength": 4000,
              "minLength": 1,
              "type": "string"
            },
            "description": "Additional attributes which are defined with \"key\": \"value\" pairs. Keys must start with \"userVars.\" prefix, follow the pattern: [a-zA-Z0-9_.]+\nand have length between 10 and 255 characters (including the prefix). Non prefixed part of key should not start with \"userVars.\", since it is\na reserved word. Both key and value cannot be blank.\n"
          },
          "isDefault": {
            "type": "boolean",
            "description": "Define whether the policy is the default one for the ST server.",
            "default": false
          },
          "rules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Rule"
            }
          }
        }
      },
      "Rule": {
        "required": [
          "clientAddress",
          "enabled",
          "name",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the login restriction rule."
          },
          "name": {
            "maxLength": 80,
            "pattern": "^([^/;']*)$",
            "type": "string",
            "description": "The name of the login restriction rule. The name can not contain characters \"/\", \";\" and \"'\".",
            "default": "string"
          },
          "isEnabled": {
            "type": "boolean",
            "description": "Define whether the rule should be enabled (true)or disabled (false). Each rule may be temporarily disabled and in that case it will not be used until it is enabled again.",
            "default": false
          },
          "type": {
            "type": "string",
            "description": "The type of the login restriction rule. The type could be either `ALLOW` and defines a condition (IP and/or expression) to allow login or could be `DENY` and defines a condition (IP and/or expression) to deny login. The rules of the same type are always evaluated as one set of rules - the order is not significant. But the order of evaluation 'AllOW' and 'DENY' sets, depend on the type of the policy they belong to."
          },
          "clientAddress": {
            "type": "string",
            "description": "The client address for the login restriction rule. When the current rule is evaluated it is compared with this client address. If there is no match then the rule is assumed to not match. If the current client address matches to the one defined in the rule and any additional conditions defined in the rule(for example expressions) also match (all of them) then the rule is assumed to match to the current user connection and is applied. \n\nThe value of the client address could be one of:\n  - Specific IPv4 address\n  - Specific IPv6 address\n  - Specific IPv4 address combined with a network mask. Example: 172.23.34.0/24\n  - Specific IPv6 address combined with a network mask. Example: FC00:1234:56::/120\n  - Specific fully qualified host name. Example: host.domain.com\n  - Specific fully qualified host name, which is allowed to contain the * wildcard character. Example: *.domain.com\n"
          },
          "expression": {
            "type": "string",
            "description": "The expression that should be evaluated to true in order for the rule to apply. This expression should be in the form of the SecureTransport expression language. It may include any environment variables, session attributes or other elements which are available at login time. For example it may include expression which evaluates the user class of the current user and compares it with some value. This expression may be not set - empty string or null value, in which case it would not be taken into account (cosider it true)."
          },
          "description": {
            "type": "string",
            "description": "The description of a login restriction rule."
          }
        }
      },
      "AuditLogEntryResult": {
        "type": "object",
        "properties": {
          "resultSet": {
            "$ref": "#/components/schemas/ResultSet"
          },
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AuditLogEntry"
            }
          }
        }
      },
      "AuditLogEntry": {
        "required": [
          "configurationId",
          "dateModified",
          "id",
          "operationType"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the audit log entity"
          },
          "dateModified": {
            "type": "string",
            "description": "The modification date of the audit log entity"
          },
          "configurationId": {
            "type": "string",
            "description": "The configuration id of the node"
          },
          "operationType": {
            "type": "string",
            "description": "The type of the operation logged with the audit log entity",
            "enum": [
              "CREATE",
              "UPDATE",
              "DELETE",
              "CREATE_OR_UPDATE"
            ]
          },
          "objectType": {
            "type": "string",
            "description": "The type of the object for which audit log entity is added"
          },
          "objectIdentifier": {
            "type": "string",
            "description": "The id of the audited object"
          },
          "objectName": {
            "type": "string",
            "description": "The name of the audited object"
          },
          "objectString": {
            "type": "string",
            "description": "The string representation of the audited object"
          },
          "userName": {
            "type": "string",
            "description": "The name of the user who did the operation audited"
          },
          "remoteAddress": {
            "type": "string",
            "description": "The IP address of the remote client that sent the request"
          },
          "description": {
            "type": "string",
            "description": "The audit log comment."
          }
        }
      },
      "ServerLogEntryResult": {
        "type": "object",
        "properties": {
          "resultSet": {
            "$ref": "#/components/schemas/ResultSet"
          },
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ServerLogEntry"
            }
          }
        }
      },
      "ServerLogEntry": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ServerLogEntryId"
          },
          "time": {
            "type": "string",
            "description": "The time of the log in RFC 2822 format - EEE, d MMM yyyy HH:mm:ss Z. Note: This property is read only property. \n"
          },
          "node": {
            "type": "string",
            "description": "The node"
          },
          "level": {
            "type": "string",
            "description": "The level of the log",
            "enum": [
              "ALL",
              "DEBUG",
              "ERROR",
              "FATAL",
              "INFO",
              "TRACE",
              "WARN"
            ]
          },
          "component": {
            "type": "string",
            "description": "The component",
            "enum": [
              "TM;",
              "AS2D;",
              "SSHD;",
              "SOCKS;",
              "ADMIN;",
              "AUDIT;",
              "FTPD;",
              "HTTPD;",
              "PESITD;"
            ]
          },
          "thread": {
            "type": "string",
            "description": "The thread"
          },
          "filename": {
            "type": "string",
            "description": "The filename"
          },
          "className": {
            "type": "string",
            "description": "The class name"
          },
          "method": {
            "type": "string",
            "description": "The method"
          },
          "line": {
            "type": "string",
            "description": "The line"
          },
          "message": {
            "type": "string",
            "description": "The log message"
          },
          "exception": {
            "type": "string",
            "description": "The exception."
          }
        }
      },
      "ServerLogEntryId": {
        "type": "object",
        "properties": {
          "mConfigurationId": {
            "type": "string"
          },
          "mEventId": {
            "type": "integer",
            "format": "int64"
          },
          "mTimestamp": {
            "type": "integer",
            "format": "int64"
          },
          "urlrepresentation": {
            "type": "string"
          }
        }
      },
      "TransferLogEntryResult": {
        "type": "object",
        "properties": {
          "resultSet": {
            "$ref": "#/components/schemas/ResultSet"
          },
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransferLogEntry"
            }
          }
        }
      },
      "TransferLogEntry": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/TransferId"
          },
          "status": {
            "type": "string",
            "description": "The status of the transfer",
            "enum": [
              "In Progress",
              "Processed",
              "Failed",
              "Aborted",
              "Pending receipt",
              "Failed Subtransmission",
              "Paused",
              "Failed Transfer Resubmit",
              "Waiting"
            ]
          },
          "resubmitted": {
            "type": "boolean",
            "description": "Defines whether the transfer was resubmitted"
          },
          "secure": {
            "type": "boolean",
            "description": "Defines whether the transfer occurred over secure connection",
            "default": false
          },
          "account": {
            "type": "string",
            "description": "The name of the account that performed the transfer"
          },
          "login": {
            "type": "string",
            "description": "The user login name used for this transfer"
          },
          "serverName": {
            "type": "string",
            "description": "The name of the server processing the transfer"
          },
          "incoming": {
            "type": "boolean",
            "description": "Define whether the transfer direction is incoming or outgoing"
          },
          "serverInitiated": {
            "type": "string",
            "description": "Defines whether the transfer is server or client initiated"
          },
          "filename": {
            "type": "string",
            "description": "The name of the transferred file"
          },
          "localFilename": {
            "type": "string",
            "description": "The local name of the transferred file"
          },
          "filesize": {
            "type": "integer",
            "description": "Transfered file size",
            "format": "int64"
          },
          "protocol": {
            "type": "string",
            "description": "The protocol used to transfer the file"
          },
          "startTime": {
            "type": "string",
            "description": "The time when transfer started"
          },
          "duration": {
            "type": "string",
            "description": "Defines the time when transfer is finished"
          },
          "operationIndex": {
            "type": "string",
            "description": "The operation index of the transfer. It could be '(none)' or some ID."
          },
          "remoteDir": {
            "type": "string",
            "description": "Remote directory."
          },
          "remotePartner": {
            "type": "string",
            "description": "Remote partner that gets/sends the file."
          },
          "coreId": {
            "type": "string",
            "description": "The core id of the transfer"
          },
          "cycleId": {
            "type": "string",
            "description": "The sentinel cycle id for the transfer"
          },
          "securityParameters": {
            "type": "string",
            "description": "Negotiated during handshake session security parameters."
          },
          "site": {
            "$ref": "#/components/schemas/TransferSite"
          },
          "transferProfile": {
            "type": "string",
            "description": "Transfer profile of the site(PeSIT related)."
          },
          "remoteAlternativeAddresses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RemoteAlternativeAddress"
            }
          }
        }
      },
      "TransferId": {
        "type": "object",
        "properties": {
          "transferStatusId": {
            "type": "string",
            "description": "Transfer status ID."
          },
          "transferStartTime": {
            "type": "string",
            "description": "Transfer start time."
          }
        }
      },
      "TransferSite": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the transfer site"
          },
          "name": {
            "type": "string",
            "description": "Name of the transfer site"
          }
        }
      },
      "RemoteAlternativeAddress": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string",
            "description": "Alternative Address"
          },
          "state": {
            "type": "string",
            "description": "Alternative Address State"
          }
        }
      },
      "TransferLogDetails": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "The status of the transfer"
          },
          "startTime": {
            "type": "string",
            "description": "The time when the transfer started"
          },
          "duration": {
            "type": "string",
            "description": "The transfer duration"
          },
          "account": {
            "type": "string",
            "description": "The name of the account that performed the transfer"
          },
          "login": {
            "type": "string",
            "description": "The user login name used for this transfer"
          },
          "userClass": {
            "type": "string",
            "description": "The user class. By default the user class can be `VirtClass` or `RealClass`"
          },
          "userType": {
            "type": "string",
            "description": "The user type"
          },
          "application": {
            "type": "string",
            "description": "The application of the transfer"
          },
          "transferType": {
            "type": "string",
            "description": "The transfer type",
            "enum": [
              "Unspecified",
              "Internal",
              "Partner"
            ]
          },
          "transferSite": {
            "type": "string",
            "description": "The transfer site"
          },
          "transferProfile": {
            "type": "string",
            "description": "Transfer profile of the site(PeSIT related)."
          },
          "file": {
            "type": "string",
            "description": "The transferred file"
          },
          "localFilename": {
            "type": "string",
            "description": "The local name of the transferred file"
          },
          "serverName": {
            "type": "string",
            "description": "The name of the listener processing the transfer"
          },
          "size": {
            "type": "integer",
            "description": "The size of the transferred file",
            "format": "int64"
          },
          "protocol": {
            "type": "string",
            "description": "The protocol of the transfer"
          },
          "mode": {
            "type": "string",
            "description": "The transfer mode",
            "enum": [
              "BINARY",
              "ASCII",
              "EBCDIC",
              "EBCDIC NATIVE"
            ]
          },
          "remoteHost": {
            "type": "string",
            "description": "The remote host"
          },
          "remoteFolder": {
            "type": "string",
            "description": "The remote folder"
          },
          "remotePartner": {
            "type": "string",
            "description": "Remote partner that gets/sends the file."
          },
          "accountFolder": {
            "type": "string",
            "description": "The account folder"
          },
          "realFile": {
            "type": "string",
            "description": "The real file path"
          },
          "transferId": {
            "type": "string",
            "description": "The id of the transfer"
          },
          "sessionId": {
            "type": "string",
            "description": "The session ID of the transfer"
          },
          "archivedAs": {
            "type": "string",
            "description": "The name under which the transferred file is archived"
          },
          "successMessage": {
            "type": "string",
            "description": "The transfer success message"
          },
          "errorMessage": {
            "type": "string",
            "description": "The transfer error message"
          },
          "pesitAcknowledge": {
            "type": "string",
            "description": "The PeSIT acknowledge"
          },
          "pesitAcknowledgeDirection": {
            "type": "string",
            "description": "The PeSIT acknowledgement direction",
            "enum": [
              "Incoming",
              "Outgoing"
            ]
          },
          "icapDetails": {
            "type": "string",
            "description": "ICAP Details"
          },
          "operationIndex": {
            "type": "string",
            "description": "The transfer's operation index"
          },
          "protocolCommands": {
            "type": "string",
            "description": "The transfer protocol commands"
          },
          "coreId": {
            "type": "string",
            "description": "The core id of the transfer"
          },
          "cycleId": {
            "type": "string",
            "description": "The sentinel cycle id for the transfer"
          },
          "securityParameters": {
            "type": "string",
            "description": "Negotiated during handshake session security parameters."
          },
          "subtransmissionStatuses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubtransmissionStatus"
            }
          },
          "requestEntity": {
            "type": "string",
            "description": "Representation of the rest api call that initiated the transfer(if submitted through the ST RESTful API)."
          },
          "additionalInformation": {
            "type": "string",
            "description": "The additional information related to this transfer."
          },
          "xffHeader": {
            "type": "string",
            "description": "The X-Forwarded-For header value."
          },
          "transferData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransferData"
            }
          }
        }
      },
      "SubtransmissionStatus": {
        "type": "object",
        "properties": {
          "completion": {
            "type": "string",
            "description": "Operation status value"
          },
          "comment": {
            "type": "string",
            "description": "Subtransmission comment"
          },
          "result": {
            "type": "string",
            "description": "The result of the operation (usually a filename)"
          },
          "operationType": {
            "type": "string",
            "description": "The subtransmisstion operation type."
          }
        }
      },
      "TransferData": {
        "type": "object",
        "properties": {
          "data": {
            "type": "string",
            "description": "The transferred data"
          },
          "startTime": {
            "type": "string",
            "description": "The time when the transfer started"
          },
          "type": {
            "type": "string",
            "description": "Type of the data"
          },
          "transferId": {
            "type": "string",
            "description": "The id of the transfer"
          },
          "receipt": {
            "type": "boolean",
            "description": "Defines whether the data is a receipt or not. If it is true, then this data represents mdn.",
            "default": false
          }
        }
      },
      "AckMessage": {
        "type": "object",
        "properties": {
          "userMessage": {
            "type": "string",
            "description": "Ack/Nack message."
          }
        }
      },
      "ResubmissionStatus": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "The resubmission status result."
          },
          "status": {
            "type": "string",
            "description": "The overall status of the transfer.",
            "enum": [
              "OK",
              "ERROR"
            ]
          }
        }
      },
      "ReceiptVerificationResult": {
        "type": "object",
        "properties": {
          "fileIntegrityResult": {
            "type": "string",
            "description": "The file integrity result"
          },
          "signatureResult": {
            "type": "string",
            "description": "The signature result."
          }
        }
      },
      "MailTemplateResult": {
        "type": "object",
        "properties": {
          "resultSet": {
            "$ref": "#/components/schemas/ResultSet"
          },
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MailTemplate"
            }
          }
        }
      },
      "MailTemplate": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The unique name of the mail template."
          },
          "description": {
            "type": "string",
            "description": "The description of the mail template"
          }
        }
      },
      "Administrator": {
        "required": [
          "localAuthentication",
          "roleName"
        ],
        "type": "object",
        "properties": {
          "loginName": {
            "maxLength": 80,
            "type": "string",
            "description": "The name of the administrator"
          },
          "roleName": {
            "type": "string",
            "description": "The role name of the administrator"
          },
          "isLimited": {
            "type": "boolean",
            "description": "The role type of the administrator - limited (delegated) or master",
            "default": false
          },
          "localAuthentication": {
            "type": "boolean",
            "description": "Clarifies whether the administator is being authenticated by ST or external service.",
            "default": true
          },
          "certificateDN": {
            "type": "string",
            "description": "Specifies the DN of the certificate used by the administrator for authentication."
          },
          "dualAuthentication": {
            "type": "boolean",
            "description": "Clarifies whether the administator is being authenticated with password and certificate or with password only.",
            "default": false
          },
          "locked": {
            "type": "boolean",
            "description": "Clarifies whether the administator is enabled/active.",
            "default": false
          },
          "parent": {
            "type": "string",
            "description": "Specifies the name of the parent administrator of this administrator in an administrator hierarchy."
          },
          "fullCreationPath": {
            "type": "string",
            "description": "Specifies the path of descendands of this administrator in an administrator hierarchy."
          },
          "passwordCredentials": {
            "$ref": "#/components/schemas/AdministratorPasswordCredentials"
          },
          "administratorRights": {
            "$ref": "#/components/schemas/AdministratorRights"
          },
          "businessUnits": {
            "type": "array",
            "description": "Collection with the names of the business units assigned to a delegated administrator.",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "AdministratorPasswordCredentials": {
        "type": "object",
        "properties": {
          "password": {
            "type": "string",
            "description": "Administrator's password"
          },
          "passwordExpired": {
            "type": "boolean",
            "description": "Clarifies whether the administator's password is expired.",
            "default": false
          },
          "lastPasswordChangeTime": {
            "type": "string",
            "description": "Last time the administrator's password was changed"
          },
          "lastOwnPasswordChange": {
            "type": "string",
            "description": "Last time the administrator has changed their own password"
          },
          "loginFailureCount": {
            "type": "integer",
            "description": "The count of the login failures",
            "format": "int32"
          },
          "lastLoginTime": {
            "type": "string",
            "description": "Last login time of the administrator"
          },
          "lastFailureLoginTime": {
            "type": "string",
            "description": "Last failure login time of the administrator"
          }
        }
      },
      "AdministratorRights": {
        "type": "object",
        "properties": {
          "canReadOnly": {
            "type": "boolean",
            "description": "Defines if the administrator is read only",
            "default": false
          },
          "isMaker": {
            "type": "boolean",
            "description": "Defines if the administrator has Maker rights",
            "default": false
          },
          "isChecker": {
            "type": "boolean",
            "description": "Defines if the administrator has Checker rights",
            "default": false
          },
          "canCreateUsers": {
            "type": "boolean",
            "description": "Defines if the administrator can create users",
            "default": false
          },
          "canUpdateUsers": {
            "type": "boolean",
            "description": "Defines if the administrator can update users",
            "default": false
          },
          "canAccessHelpDesk": {
            "type": "boolean",
            "description": "Defines if the administrator can access help desk",
            "default": false
          },
          "canSeeFullAuditLog": {
            "type": "boolean",
            "description": "Defines if the administrator can access the Audit Log",
            "default": false
          },
          "canManageAdministrators": {
            "type": "boolean",
            "description": "Defines if the administrator can manage administrators",
            "default": false
          },
          "canManageApplications": {
            "type": "boolean",
            "description": "Defines if the administrator can manage applications",
            "default": false
          },
          "canManageSharedFolders": {
            "type": "boolean",
            "description": "Defines if the administrator can manage shared folders",
            "default": false
          },
          "canManageBusinessUnits": {
            "type": "boolean",
            "description": "Defines if the administrator can manage business units",
            "default": false
          },
          "canManageRouteTemplates": {
            "type": "boolean",
            "description": "Defines if the administrator can manage route templates",
            "default": false
          },
          "canManageExternalScriptStep": {
            "type": "boolean",
            "description": "Defines if the administrator can manage the external script step.",
            "default": false
          },
          "canManageLoginRestrictionPolicies": {
            "type": "boolean",
            "description": "Defines if the administrator can manage the login restriction policies.",
            "default": false
          },
          "canManageIcapSettings": {
            "type": "boolean",
            "description": "Defines if the administrator can manage the ICAP settings.",
            "default": false
          },
          "canManageExternalScriptRootExecution": {
            "type": "boolean",
            "description": "Defines if the administrator can manage external script root execution.",
            "default": false
          }
        },
        "description": "A set of permissions, defining what type of operations a certain Delegated Administrator is able to perform.\n**Note:** Only applicable for Delegated Administrators, hence it`s values are not to be taken into account for Master Administrators.\n"
      },
      "AuthenticationActionResult": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Authentication result message."
          }
        }
      },
      "PatchPasswordRequest": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/PatchPasswordDocument"
        }
      },
      "PatchPasswordDocument": {
        "required": [
          "op",
          "path",
          "value"
        ],
        "properties": {
          "op": {
            "type": "string",
            "description": "The operation to be performed",
            "enum": [
              "replace"
            ]
          },
          "path": {
            "type": "string",
            "description": "A JSON-Pointer",
            "enum": [
              "/passwordCredentials/password"
            ]
          },
          "value": {
            "type": "string",
            "description": "The value to be used within the operations."
          }
        }
      },
      "RouteStepsCharsets": {
        "type": "object",
        "properties": {
          "charsets": {
            "type": "array",
            "description": "Collection of all supported charsets in the ST server.",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "RouteStepMetadata": {
        "type": "object",
        "properties": {
          "stepType": {
            "type": "string",
            "description": "The step types.",
            "enum": [
              "PgpEncryption",
              "PgpDecryption",
              "Compress",
              "Decompress",
              "LineEnding",
              "ExternalScript",
              "EncodingConversion",
              "CharactersReplace",
              "LinePadding",
              "LineTruncating",
              "LineFolding",
              "Rename",
              "Publish",
              "SendToPartner"
            ]
          },
          "stepCategory": {
            "type": "string",
            "description": "The step category.",
            "enum": [
              "Transformation",
              "Routing"
            ]
          },
          "stepDisplayName": {
            "type": "string",
            "description": "The step name."
          },
          "endpointSchema": {
            "type": "string",
            "description": "The endpoint schema."
          },
          "uiPagePath": {
            "type": "string",
            "description": "The ui page path."
          },
          "stepPropertyBean": {
            "type": "string",
            "description": "The step property bean."
          },
          "stepValidatorClassName": {
            "type": "string",
            "description": "The step validator classname."
          },
          "routeBuilderClassName": {
            "type": "string",
            "description": "The route builder classname."
          },
          "stepPropertyTransformer": {
            "type": "string",
            "description": "The step property transformer."
          },
          "stepModule": {
            "type": "string",
            "description": "The step module."
          },
          "stepProducer": {
            "type": "string",
            "description": "The step producer."
          },
          "stepJarName": {
            "type": "string",
            "description": "The step jar name."
          }
        }
      },
      "RouteResult": {
        "type": "object",
        "properties": {
          "resultSet": {
            "$ref": "#/components/schemas/ResultSet"
          },
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Route"
            }
          }
        }
      },
      "Route": {
        "required": [
          "conditionType",
          "failureEmailNotification",
          "name",
          "successEmailNotification",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "maxLength": 32,
            "minLength": 0,
            "type": "string",
            "description": "Route Id"
          },
          "name": {
            "maxLength": 255,
            "minLength": 0,
            "pattern": "^(([^\\\\/\\\\;\\\\']*))$",
            "type": "string",
            "description": "Route name",
            "default": "string"
          },
          "description": {
            "maxLength": 2048,
            "minLength": 0,
            "type": "string",
            "description": "Route description"
          },
          "type": {
            "maxLength": 32,
            "minLength": 0,
            "type": "string",
            "description": "Route types: TEMPLATE - Route Package Template, SIMPLE - Route in a Route Package Template, COMPOSITE - Assign a route with TEMPLATE type to a virtual account and its subscriptions\n",
            "enum": [
              "TEMPLATE",
              "SIMPLE",
              "COMPOSITE"
            ]
          },
          "managedByCG": {
            "type": "boolean",
            "description": "This property indicates whether the route is managed by Central Governance.",
            "default": false
          },
          "routeTemplate": {
            "maxLength": 32,
            "minLength": 0,
            "type": "string",
            "description": "In COMPOSITE route this is the id of an existing template route visible by the account this route is created for"
          },
          "account": {
            "maxLength": 80,
            "minLength": 0,
            "pattern": "^(([^\\/\\;\\']*))$",
            "type": "string",
            "description": "The account where the route is subscribed",
            "default": "string"
          },
          "businessUnits": {
            "type": "array",
            "description": "Route business unit names appropriate for the Administrator who is managing this route",
            "items": {
              "type": "string"
            }
          },
          "conditionType": {
            "type": "string",
            "description": "For routes of type TEMPLATE or COMPOSITE, the property determines whether all SIMPLE routes that\nmatch their conditions will be executed or just the first one.\n\nFor routes of type SIMPLE, the property determines if the route gets executed always or based on the condition,\nspecified in the condition property using expression language.\n",
            "enum": [
              "MATCH_ALL",
              "MATCH_FIRST",
              "ALWAYS",
              "EL"
            ]
          },
          "condition": {
            "type": "string",
            "description": "An expression for route execution when conditionType is EL."
          },
          "failureEmailNotification": {
            "type": "boolean",
            "description": "Notify following e-mails on route failure.",
            "default": false
          },
          "failureEmailTemplate": {
            "type": "string",
            "description": "Notification template name on route failure"
          },
          "failureEmailName": {
            "maxLength": 2048,
            "minLength": 0,
            "type": "string",
            "description": "E-mail Notifications on route failure"
          },
          "successEmailNotification": {
            "type": "boolean",
            "description": "Notify following e-mails on route success.\n",
            "default": false
          },
          "successEmailTemplate": {
            "type": "string",
            "description": "Notification template name on route success"
          },
          "successEmailName": {
            "maxLength": 2048,
            "minLength": 0,
            "type": "string",
            "description": "E-mail Notifications on route success"
          },
          "triggeringEmailNotification": {
            "type": "boolean",
            "description": "Notify following e-mails on route triggering.",
            "default": false
          },
          "triggeringEmailTemplate": {
            "type": "string",
            "description": "Notification template name on route triggering"
          },
          "triggeringEmailName": {
            "maxLength": 2048,
            "minLength": 0,
            "type": "string",
            "description": "E-mail Notifications on route triggering"
          },
          "subscriptions": {
            "type": "array",
            "description": "Collection of subscription IDs for an account",
            "items": {
              "type": "string"
            }
          },
          "additionalAttributes": {
            "type": "object",
            "additionalProperties": {
              "maxLength": 4000,
              "minLength": 1,
              "type": "string"
            },
            "description": "Additional attributes which are defined with \"key\": \"value\" pairs. Keys must start with \"userVars.\" prefix, follow the pattern: [a-zA-Z0-9_.]+\nand have length between 10 and 255 characters (including the prefix). Non prefixed part of key should not start with \"userVars.\", since it is\na reserved word. Both key and value cannot be blank.\n"
          },
          "stepStatuses": {
            "type": "array",
            "description": "Step statuses.",
            "items": {
              "$ref": "#/components/schemas/RouteStepStatus"
            }
          },
          "steps": {
            "type": "array",
            "description": "Route's steps.",
            "items": {
              "discriminator": {
                "propertyName": "type",
                "mapping": {
                  "EncodingConversion": "route.yaml#/RouteStepEncodingConversion",
                  "Compress": "route.yaml#/RouteStepCompress",
                  "Decompress": "route.yaml#/RouteStepDecompress",
                  "LineFolding": "route.yaml#/RouteStepLineFolding",
                  "LineEnding": "route.yaml#/RouteStepLineEnding",
                  "LinePadding": "route.yaml#/RouteStepLinePadding",
                  "LineTruncating": "route.yaml#/RouteStepLineTruncating",
                  "PgpDecryption": "route.yaml#/RouteStepPgpDecryption",
                  "PgpEncryption": "route.yaml#/RouteStepPgpEncryption",
                  "Rename": "route.yaml#/RouteStepRename",
                  "CharactersReplace": "route.yaml#/RouteStepCharactersReplace",
                  "ExternalScript": "route.yaml#/RouteStepExternalScript",
                  "Publish": "route.yaml#/RouteStepPublish",
                  "SendToPartner": "route.yaml#/RouteStepSendToPartner",
                  "PullFromPartner": "route.yaml#/RouteStepPullFromPartner",
                  "ExecuteRoute": "route.yaml#/RouteStepExecuteRoute",
                  "Pluggable": "route.yaml#/PluggableRouteStep"
                }
              },
              "anyOf": [
                {
                  "$ref": "#/components/schemas/RouteStepEncodingConversion"
                },
                {
                  "$ref": "#/components/schemas/RouteStepCompress"
                },
                {
                  "$ref": "#/components/schemas/RouteStepDecompress"
                },
                {
                  "$ref": "#/components/schemas/RouteStepLineFolding"
                },
                {
                  "$ref": "#/components/schemas/RouteStepLineEnding"
                },
                {
                  "$ref": "#/components/schemas/RouteStepLinePadding"
                },
                {
                  "$ref": "#/components/schemas/RouteStepLineTruncating"
                },
                {
                  "$ref": "#/components/schemas/RouteStepPgpDecryption"
                },
                {
                  "$ref": "#/components/schemas/RouteStepPgpEncryption"
                },
                {
                  "$ref": "#/components/schemas/RouteStepRename"
                },
                {
                  "$ref": "#/components/schemas/RouteStepCharactersReplace"
                },
                {
                  "$ref": "#/components/schemas/RouteStepExternalScript"
                },
                {
                  "$ref": "#/components/schemas/RouteStepPublish"
                },
                {
                  "$ref": "#/components/schemas/RouteStepSendToPartner"
                },
                {
                  "$ref": "#/components/schemas/RouteStepPullFromPartner"
                },
                {
                  "$ref": "#/components/schemas/RouteStepExecuteRoute"
                },
                {
                  "$ref": "#/components/schemas/PluggableRouteStep"
                }
              ]
            }
          }
        }
      },
      "RouteStepStatus": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Step status id."
          },
          "stepId": {
            "maxLength": 32,
            "minLength": 0,
            "type": "string",
            "description": "Step Id."
          },
          "status": {
            "type": "string",
            "description": "Step status.",
            "enum": [
              "ENABLED",
              "DISABLED"
            ]
          }
        }
      },
      "RouteStepEncodingConversion": {
        "description": "A representation of a route step of type EncodingConversion",
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseRouteStep"
          },
          {
            "required": [
              "autostart",
              "inputCharset"
            ],
            "type": "object",
            "properties": {
              "autostart": {
                "type": "boolean",
                "description": "Step autostart.",
                "default": false
              },
              "type": {
                "type": "string",
                "default": "EncodingConversion"
              },
              "usePrecedingStepFiles": {
                "type": "boolean",
                "description": "If true, the route execution will continue even if the step execution fails.",
                "default": false
              },
              "fileFilterExpression": {
                "maxLength": 64,
                "minLength": 0,
                "type": "string",
                "description": "File name or file name expression. It is used with the file filter expression property."
              },
              "fileFilterExpressionType": {
                "type": "string",
                "description": "File filter expression type.",
                "enum": [
                  "GLOB",
                  "REGEXP",
                  "TEXT_FILES"
                ]
              },
              "inputCharset": {
                "maxLength": 32,
                "minLength": 0,
                "type": "string",
                "description": "Specify the source file encoding."
              },
              "outputCharset": {
                "maxLength": 32,
                "minLength": 0,
                "type": "string",
                "description": "Specify output file encoding. If not specified, source file encoding is used."
              },
              "postTransformationActionRenameAsExpression": {
                "type": "string",
                "description": "Post transformation action rename expression."
              }
            }
          }
        ]
      },
      "BaseRouteStep": {
        "required": [
          "status",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "maxLength": 32,
            "minLength": 0,
            "type": "string",
            "description": "Route step Id.",
            "readOnly": true
          },
          "type": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string",
            "description": "Route step type. ExecuteRoute step links the routes of type TEMPLATE and SIMPLE. The next steps are used with SIMPLE route type.",
            "enum": [
              "EncodingConversion",
              "Compress",
              "Decompress",
              "LineFolding",
              "LineEnding",
              "LinePadding",
              "LineTruncating",
              "PgpDecryption",
              "PgpEncryption",
              "Rename",
              "CharactersReplace",
              "ExternalScript",
              "Publish",
              "SendToPartner",
              "PullFromPartner",
              "ExecuteRoute",
              "Pluggable"
            ]
          },
          "status": {
            "maxLength": 32,
            "minLength": 0,
            "type": "string",
            "description": "Route step status.",
            "enum": [
              "ENABLED",
              "DISABLED"
            ]
          },
          "precedingStep": {
            "maxLength": 32,
            "minLength": 0,
            "type": "string",
            "description": "Preceding step id."
          },
          "conditionType": {
            "type": "string",
            "description": "Defines whether the step is executed always or based on a condition, specified in the condition property using expression language.",
            "enum": [
              "ALWAYS",
              "EL"
            ]
          },
          "condition": {
            "type": "string",
            "description": "An expression for step execution when conditionType is EL."
          },
          "actionOnStepSuccess": {
            "type": "string",
            "description": "Action on step success. Defines if the route will continue after the step success.",
            "enum": [
              "PROCEED",
              "STOP"
            ]
          },
          "actionOnStepFailure": {
            "type": "string",
            "description": "Action on step failure. If set to PROCEED, the route execution will continue even if the step execution fails.",
            "enum": [
              "FAIL",
              "PROCEED"
            ]
          }
        },
        "discriminator": {
          "propertyName": "type"
        }
      },
      "RouteStepCompress": {
        "description": "A representation of a route step of type Compress",
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseRouteStep"
          },
          {
            "required": [
              "autostart",
              "compressionLevel",
              "fileFilterExpression",
              "fileFilterExpressionType"
            ],
            "type": "object",
            "properties": {
              "autostart": {
                "type": "boolean",
                "description": "Step autostart.",
                "default": false
              },
              "type": {
                "type": "string",
                "default": "Compress"
              },
              "usePrecedingStepFiles": {
                "type": "boolean",
                "description": "If true, the route execution will continue even if the step execution fails.",
                "default": false
              },
              "fileFilterExpression": {
                "maxLength": 64,
                "minLength": 0,
                "type": "string",
                "description": "File name or file name expression. It is used with the file filter expression property."
              },
              "fileFilterExpressionType": {
                "type": "string",
                "description": "File filter expression type.",
                "enum": [
                  "GLOB",
                  "REGEXP",
                  "TEXT_FILES"
                ]
              },
              "singleArchiveEnabled": {
                "type": "boolean",
                "description": "Enable single file archiving.",
                "default": false
              },
              "compressionType": {
                "type": "string",
                "description": "Compression type."
              },
              "zipPassword": {
                "maxLength": 32,
                "minLength": 0,
                "type": "string",
                "description": "Zip file password. Used with compression type ZIP only."
              },
              "compressionLevel": {
                "type": "string",
                "description": "Compression level.",
                "enum": [
                  "STORE",
                  "FASTEST",
                  "FAST",
                  "NORMAL",
                  "GOOD",
                  "BETTER",
                  "BEST"
                ]
              },
              "singleArchiveName": {
                "maxLength": 64,
                "minLength": 0,
                "type": "string",
                "description": "Archive name or expression. Not used with compression type GZIP. Example: archive-${timestamp}.zip.\n"
              },
              "postTransformationActionRenameAsExpression": {
                "type": "string",
                "description": "Post transformation action rename expression for compress step."
              }
            }
          }
        ]
      },
      "RouteStepDecompress": {
        "description": "A representation of a route step of type Decompress",
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseRouteStep"
          },
          {
            "required": [
              "autostart",
              "fileFilterExpression",
              "fileFilterExpressionType"
            ],
            "type": "object",
            "properties": {
              "autostart": {
                "type": "boolean",
                "description": "Step autostart.",
                "default": false
              },
              "type": {
                "type": "string",
                "default": "Decompress"
              },
              "usePrecedingStepFiles": {
                "type": "boolean",
                "description": "If true, the route execution will continue even if the step execution fails.",
                "default": false
              },
              "fileFilterExpression": {
                "maxLength": 64,
                "minLength": 0,
                "type": "string",
                "description": "File name or file name expression. It is used with the file filter expression property."
              },
              "fileFilterExpressionType": {
                "type": "string",
                "description": "File filter expression type.",
                "enum": [
                  "GLOB",
                  "REGEXP",
                  "TEXT_FILES"
                ]
              },
              "filenameCollisionResolutionType": {
                "type": "string",
                "description": "Action on file name collision.",
                "enum": [
                  "FAIL",
                  "OVERWRITE",
                  "RENAME_OLD"
                ],
                "default": "OVERWRITE"
              },
              "zipPassword": {
                "maxLength": 32,
                "minLength": 0,
                "type": "string",
                "description": "Zip file password. Do not use the property if it is not needed in the step flow."
              },
              "postTransformationActionRenameAsExpression": {
                "type": "string",
                "description": "Post transformation action rename expression for decompress step."
              }
            }
          }
        ]
      },
      "RouteStepLineFolding": {
        "description": "A representation of a route step of type LineFolding",
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseRouteStep"
          },
          {
            "required": [
              "autostart",
              "fileFilterExpression",
              "fileFilterExpressionType",
              "fileFoldWidth",
              "inputCharset"
            ],
            "type": "object",
            "properties": {
              "autostart": {
                "type": "boolean",
                "description": "Step autostart.",
                "default": false
              },
              "type": {
                "type": "string",
                "default": "LineFolding"
              },
              "usePrecedingStepFiles": {
                "type": "boolean",
                "description": "If true, the route execution will continue even if the step execution fails.",
                "default": false
              },
              "fileFilterExpression": {
                "maxLength": 64,
                "minLength": 0,
                "type": "string",
                "description": "File name or file name expression. It is used with the file filter expression property."
              },
              "fileFilterExpressionType": {
                "type": "string",
                "description": "File filter expression type.",
                "enum": [
                  "GLOB",
                  "REGEXP",
                  "TEXT_FILES"
                ]
              },
              "fileFoldWidth": {
                "maximum": 2147483647,
                "minimum": 1,
                "type": "integer",
                "description": "Maximum lane width in the file over which point it will be folded. A positive integer value.",
                "format": "int32",
                "example": 1
              },
              "inputCharset": {
                "maxLength": 32,
                "minLength": 0,
                "type": "string",
                "description": "Specify the source file encoding. Example: UTF-8\n"
              },
              "outputCharset": {
                "maxLength": 32,
                "minLength": 0,
                "type": "string",
                "description": "Specify output file encoding. If not specified, source file encoding is used."
              },
              "postTransformationActionRenameAsExpression": {
                "type": "string",
                "description": "Post transformation action rename expression for line folding step."
              }
            }
          }
        ]
      },
      "RouteStepLineEnding": {
        "description": "A representation of a route step of type LineEnding",
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseRouteStep"
          },
          {
            "required": [
              "autostart",
              "fileFilterExpression",
              "fileFilterExpressionType",
              "inputCharset",
              "inputEolSequence",
              "outputEolSequence"
            ],
            "type": "object",
            "properties": {
              "autostart": {
                "type": "boolean",
                "description": "Step autostart.",
                "default": false
              },
              "type": {
                "type": "string",
                "default": "LineEnding"
              },
              "usePrecedingStepFiles": {
                "type": "boolean",
                "description": "If true, the route execution will continue even if the step execution fails.",
                "default": false
              },
              "fileFilterExpression": {
                "maxLength": 64,
                "minLength": 0,
                "type": "string",
                "description": "File name or file name expression. It is used with the file filter expression property."
              },
              "fileFilterExpressionType": {
                "type": "string",
                "description": "File filter expression type.",
                "enum": [
                  "GLOB",
                  "REGEXP",
                  "TEXT_FILES"
                ]
              },
              "inputEolSequence": {
                "maxLength": 32,
                "minLength": 0,
                "type": "string",
                "description": "Input EOL sequence. Example: \\r\\n\n"
              },
              "outputEolSequence": {
                "maxLength": 32,
                "minLength": 0,
                "type": "string",
                "description": "Output EOL sequence. Example: \\r\\n\n"
              },
              "inputCharset": {
                "maxLength": 32,
                "minLength": 0,
                "type": "string",
                "description": "Specify the source file encoding. Example: UTF-8 \\n\n"
              },
              "outputCharset": {
                "maxLength": 32,
                "minLength": 0,
                "type": "string",
                "description": "Specify output file encoding. If not specified, source file encoding is used."
              },
              "postTransformationActionRenameAsExpression": {
                "type": "string",
                "description": "Post transformation action rename expression for line ending step."
              }
            }
          }
        ]
      },
      "RouteStepLinePadding": {
        "description": "A representation of a route step of type LinePadding",
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseRouteStep"
          },
          {
            "required": [
              "autostart",
              "fileFilterExpression",
              "fileFilterExpressionType",
              "inputCharset",
              "linePaddingCharacter",
              "linePaddingLength"
            ],
            "type": "object",
            "properties": {
              "autostart": {
                "type": "boolean",
                "description": "Step autostart.",
                "default": false
              },
              "type": {
                "type": "string",
                "default": "LinePadding"
              },
              "usePrecedingStepFiles": {
                "type": "boolean",
                "description": "If true, the route execution will continue even if the step execution fails.",
                "default": false
              },
              "fileFilterExpression": {
                "maxLength": 64,
                "minLength": 0,
                "type": "string",
                "description": "File name or file name expression. It is used with the file filter expression property."
              },
              "fileFilterExpressionType": {
                "type": "string",
                "description": "File filter expression type.",
                "enum": [
                  "GLOB",
                  "REGEXP",
                  "TEXT_FILES"
                ]
              },
              "linePaddingCharacter": {
                "maxLength": 32,
                "minLength": 0,
                "pattern": "^\\\\\\\\\\\\\\\\u([0-9(a-f|A-F)]{4}){1}$",
                "type": "string",
                "description": "Specify line padding character as valid Unicode escape sequence. Example : \\u0043\n",
                "example": "\\\\u0043"
              },
              "linePaddingLength": {
                "type": "string",
                "description": "Line padding length."
              },
              "inputCharset": {
                "maxLength": 32,
                "minLength": 0,
                "type": "string",
                "description": "Specify the source file encoding. Example: UTF-8\n"
              },
              "outputCharset": {
                "maxLength": 32,
                "minLength": 0,
                "type": "string",
                "description": "Specify output file encoding. If not specified, source file encoding is used"
              },
              "postTransformationActionRenameAsExpression": {
                "type": "string",
                "description": "Post transformation action rename expression for line padding step."
              }
            }
          }
        ]
      },
      "RouteStepLineTruncating": {
        "description": "A representation of a route step of type LineTruncating",
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseRouteStep"
          },
          {
            "required": [
              "autostart",
              "fileFilterExpression",
              "fileFilterExpressionType",
              "inputCharset",
              "truncateLength"
            ],
            "type": "object",
            "properties": {
              "autostart": {
                "type": "boolean",
                "description": "Step autostart.",
                "default": false
              },
              "type": {
                "type": "string",
                "default": "LineTruncating"
              },
              "usePrecedingStepFiles": {
                "type": "boolean",
                "description": "If true, the route execution will continue even if the step execution fails.",
                "default": false
              },
              "fileFilterExpression": {
                "maxLength": 64,
                "minLength": 0,
                "type": "string",
                "description": "File name or file name expression. It is used with the file filter expression property."
              },
              "fileFilterExpressionType": {
                "type": "string",
                "description": "File filter expression type.",
                "enum": [
                  "GLOB",
                  "REGEXP",
                  "TEXT_FILES"
                ]
              },
              "inputCharset": {
                "maxLength": 32,
                "minLength": 0,
                "type": "string",
                "description": "Specify the source file encoding. Example: UTF-8\n"
              },
              "outputCharset": {
                "maxLength": 32,
                "minLength": 0,
                "type": "string",
                "description": "Specify output file encoding. If not specified, source file encoding is used."
              },
              "truncateLength": {
                "minimum": 1,
                "type": "integer",
                "description": "Line Truncate trims the file lines to have a limited maximum length. Use this setting to specify the lines maximum length in number of characters/symbols. This will cause extra characters to be discarded.",
                "format": "int32",
                "example": 1
              },
              "postTransformationActionRenameAsExpression": {
                "type": "string",
                "description": "Post transformation action rename expression for line truncating step."
              }
            }
          }
        ]
      },
      "RouteStepPgpDecryption": {
        "description": "A representation of a route step of type PgpDecryption. PGP private keys will be automatically determined on runtime. They will be searched only within the key store of the account subscribed to this route.",
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseRouteStep"
          },
          {
            "required": [
              "autostart",
              "fileFilterExpression",
              "fileFilterExpressionType"
            ],
            "type": "object",
            "properties": {
              "autostart": {
                "type": "boolean",
                "description": "Step autostart.",
                "default": false
              },
              "type": {
                "type": "string",
                "default": "PgpDecryption"
              },
              "usePrecedingStepFiles": {
                "type": "boolean",
                "description": "If true, the route execution will continue even if the step execution fails.",
                "default": false
              },
              "fileFilterExpression": {
                "maxLength": 64,
                "minLength": 0,
                "type": "string",
                "description": "File name or file name expression. It is used with the file filter expression property."
              },
              "fileFilterExpressionType": {
                "type": "string",
                "description": "File filter expression type.",
                "enum": [
                  "GLOB",
                  "REGEXP",
                  "TEXT_FILES"
                ]
              },
              "requireEncryption": {
                "type": "boolean",
                "description": "Require encryption.",
                "default": false
              },
              "requireTrustedSignature": {
                "type": "boolean",
                "description": "Require trusted signature.",
                "default": false
              },
              "postTransformationActionRenameAsExpression": {
                "type": "string",
                "description": "Post transformation action rename expression for step."
              }
            }
          }
        ]
      },
      "RouteStepPgpEncryption": {
        "description": "A representation of a route step of type PgpEncryption.",
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseRouteStep"
          },
          {
            "required": [
              "autostart",
              "compressionType",
              "fileFilterExpression",
              "fileFilterExpressionType",
              "useAsciiArmour"
            ],
            "type": "object",
            "properties": {
              "autostart": {
                "type": "boolean",
                "description": "Step autostart.",
                "default": false
              },
              "type": {
                "type": "string",
                "default": "PgpEncryption"
              },
              "fileFilterExpression": {
                "maxLength": 64,
                "minLength": 0,
                "type": "string",
                "description": "File name or file name expression. It is used with the file filter expression property."
              },
              "fileFilterExpressionType": {
                "type": "string",
                "description": "File filter expression type.",
                "enum": [
                  "GLOB",
                  "REGEXP",
                  "TEXT_FILES"
                ]
              },
              "usePrecedingStepFiles": {
                "type": "boolean",
                "description": "If true, the route execution will continue even if the step execution fails.",
                "default": false
              },
              "encryptKeyOwnerExpression": {
                "maxLength": 64,
                "minLength": 0,
                "type": "string",
                "description": "You can specify either an account name or use an EL expression to determine the recipient based on the environment information (such as filename). If an account name is unknown (e.g. expression based) its PGP certificates will be determined on runtime. PGP certificates can be expression based as well. All the encrypt key related properties (expressions, owners, types) should be set if an encrypt key is used. Encrypt or sign key usage is mandatory."
              },
              "encryptKeyExpression": {
                "maxLength": 64,
                "minLength": 0,
                "type": "string",
                "description": "PGP encryption name amongst PGP Public Keys (within the selected above account) or by entering an expression for this. Wild card symbols ( asterisk symbol and ?) can also be used when specifying the PGP key alias. If multiple keys match the pattern the first one will be picked up and used."
              },
              "encryptKeyOwnerExpressionType": {
                "type": "string",
                "description": "Account name or expression."
              },
              "encryptKeyExpressionType": {
                "type": "string",
                "description": "Account name or expression."
              },
              "signKeyOwnerExpression": {
                "maxLength": 64,
                "minLength": 0,
                "type": "string",
                "description": "You can specify either an account name or use an EL expression to determine the recipient based on the environment information (such as filename). If an account name is unknown (e.g. expression based) its PGP certificates will be determined on runtime. PGP certificates can be expression based as well. All the sign key related properties (expressions, owners, types) should be set if a sign key is used."
              },
              "signKeyExpression": {
                "maxLength": 64,
                "minLength": 0,
                "type": "string",
                "description": "PGP encryption name amongst PGP Public Keys (within the selected above account) or by entering an expression for this. Wild card symbols ( asterisk symbol and ?) can also be used when specifying the PGP key alias. If multiple keys match the pattern the first one will be picked up and used."
              },
              "signKeyOwnerExpressionType": {
                "type": "string",
                "description": "Account name or expression."
              },
              "signKeyExpressionType": {
                "type": "string",
                "description": "PGP Key alias or expression."
              },
              "useAsciiArmour": {
                "type": "boolean",
                "description": "Encode Using ASCII Armor",
                "default": false
              },
              "compressionType": {
                "type": "string",
                "description": "Numbers in string format used \"0\" - no compression, \"-1\" - use preferred, \"1\" - ZIP, \"2\" - ZLIB, \"3\" - BZIP2"
              },
              "compressionLevel": {
                "type": "string",
                "description": "The values are 2 for FAST, 5 for NORMAL, 7 for GOOD, 9 for BEST"
              },
              "postTransformationActionRenameAsExpression": {
                "type": "string",
                "description": "Post transformation action rename expression for step."
              }
            }
          }
        ]
      },
      "RouteStepRename": {
        "description": "A representation of a route step of type Rename",
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseRouteStep"
          },
          {
            "required": [
              "autostart",
              "fileFilterExpression",
              "fileFilterExpressionType",
              "outputFileName"
            ],
            "type": "object",
            "properties": {
              "autostart": {
                "type": "boolean",
                "description": "Step autostart.",
                "default": false
              },
              "type": {
                "type": "string",
                "default": "Rename"
              },
              "usePrecedingStepFiles": {
                "type": "boolean",
                "description": "If true, the route execution will continue even if the step execution fails",
                "default": false
              },
              "outputFileName": {
                "maxLength": 64,
                "minLength": 0,
                "type": "string",
                "description": "Output file name or expression. Example: ${basename(currentfulltarget)}.transformed\n"
              },
              "fileFilterExpression": {
                "maxLength": 64,
                "minLength": 0,
                "type": "string",
                "description": "File name or file name expression. It is used with the file filter expression property"
              },
              "fileFilterExpressionType": {
                "type": "string",
                "description": "File filter expression type.",
                "enum": [
                  "GLOB",
                  "REGEXP",
                  "TEXT_FILES"
                ]
              }
            }
          }
        ]
      },
      "RouteStepCharactersReplace": {
        "description": "A representation of a route step of type CharactersReplace",
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseRouteStep"
          },
          {
            "required": [
              "autostart",
              "fileFilterExpression",
              "fileFilterExpressionType",
              "findCharacterSequence",
              "inputCharset",
              "lineStrip",
              "replaceCharacterSequence"
            ],
            "type": "object",
            "properties": {
              "autostart": {
                "type": "boolean",
                "description": "Step autostart.",
                "default": false
              },
              "type": {
                "type": "string",
                "default": "CharactersReplace"
              },
              "usePrecedingStepFiles": {
                "type": "boolean",
                "description": "If true, the route execution will continue even if the step execution fails.",
                "default": false
              },
              "fileFilterExpression": {
                "maxLength": 64,
                "minLength": 0,
                "type": "string",
                "description": "File name or file name expression. It is used with the file filter expression property."
              },
              "fileFilterExpressionType": {
                "type": "string",
                "description": "File filter expression type.",
                "enum": [
                  "GLOB",
                  "REGEXP",
                  "TEXT_FILES"
                ]
              },
              "findCharacterSequence": {
                "maxLength": 32,
                "minLength": 0,
                "type": "string",
                "description": "Find character sequence, example: q123\n"
              },
              "lineStrip": {
                "maxLength": 32,
                "minLength": 0,
                "type": "string",
                "description": "Line strip enablement. Use value \"stripEnabled\" to enable line strip. Other value will disable the line strip."
              },
              "replaceCharacterSequence": {
                "maxLength": 32,
                "minLength": 0,
                "type": "string",
                "description": "Specify replace character sequence. Unicode notation (\\uXXXX) can be used. Multiple replace character sequences separated with a comma (,) can be specified. Comma must be Unicode encoded (\\002c) if used in the replace sequence.\n"
              },
              "inputCharset": {
                "maxLength": 32,
                "minLength": 0,
                "type": "string",
                "description": "Specify the source file encoding. Example: UTF-8\n"
              },
              "outputCharset": {
                "maxLength": 32,
                "minLength": 0,
                "type": "string",
                "description": "Specify output file encoding. If not specified, source file encoding is used."
              },
              "postTransformationActionRenameAsExpression": {
                "type": "string",
                "description": "Post transformation action rename expression for step."
              }
            }
          }
        ]
      },
      "RouteStepExternalScript": {
        "description": "A representation of a route step of type ExternalScript",
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseRouteStep"
          },
          {
            "required": [
              "autostart",
              "scriptPath"
            ],
            "type": "object",
            "properties": {
              "autostart": {
                "type": "boolean",
                "description": "Step autostart.",
                "default": false
              },
              "type": {
                "type": "string",
                "default": "ExternalScript"
              },
              "scriptPath": {
                "maxLength": 256,
                "minLength": 0,
                "type": "string",
                "description": "String or expression with an absolute path to external script. Example: For Unix environment: /usr /bin/env bash -c ${FILEDRIVEHOME}/bin/agents/example.sh For Windows environment: cmd /c ${FILEDRIVEHOME}\\bin\\agents\\example.bat\n"
              },
              "logOutput": {
                "type": "boolean",
                "description": "The script will genarate standard output to Server log.",
                "default": false
              },
              "rootExecution": {
                "type": "boolean",
                "description": "Root execution property for external script.",
                "default": false
              }
            }
          }
        ]
      },
      "RouteStepPublish": {
        "description": "A representation of a route step of type Publish",
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseRouteStep"
          },
          {
            "required": [
              "autostart",
              "fileFilterExpression",
              "fileFilterExpressionType",
              "filenameCollisionResolutionType",
              "targetAccountExpression",
              "targetAccountExpressionType",
              "targetFolderExpressionType"
            ],
            "type": "object",
            "properties": {
              "autostart": {
                "type": "boolean",
                "description": "Step autostart.",
                "default": false
              },
              "type": {
                "type": "string",
                "default": "Publish"
              },
              "usePrecedingStepFiles": {
                "type": "boolean",
                "description": "If true, the route execution will continue even if the step execution fails.",
                "default": false
              },
              "fileFilterExpression": {
                "maxLength": 64,
                "minLength": 0,
                "type": "string",
                "description": "File name or file name expression. It is used with the file filter expression property."
              },
              "fileFilterExpressionType": {
                "type": "string",
                "description": "File filter expression type.",
                "enum": [
                  "GLOB",
                  "REGEXP",
                  "TEXT_FILES"
                ]
              },
              "filenameCollisionResolutionType": {
                "type": "string",
                "description": "File name collision resolution type."
              },
              "targetAccountExpression": {
                "maxLength": 64,
                "minLength": 0,
                "type": "string",
                "description": "Target account name or expression."
              },
              "targetAccountExpressionType": {
                "type": "string",
                "description": "Target account name or expression will be used."
              },
              "targetFolderExpression": {
                "maxLength": 64,
                "minLength": 0,
                "type": "string",
                "description": "Folder in the account to publish the file to. Not existing folder will be automatically created. You can specify either a folder name or use an EL expression to determine the folder based on the environment information\n"
              },
              "targetFolderExpressionType": {
                "type": "string",
                "description": "Target folder simple name or expression will be used."
              },
              "publishFileAs": {
                "maxLength": 64,
                "minLength": 0,
                "type": "string",
                "description": "New file name or expression for a new file name."
              },
              "triggerSubscription": {
                "type": "boolean",
                "description": "When 'true', file published to a subscription folder triggers the subscription folder. Set to 'false' if you do not want any actions to be triggered as part of the publish operations (e.g. when publishing to the same subscription the file was picked up from)\n",
                "default": false
              },
              "postRoutingActionType": {
                "type": "string",
                "description": "Post routing action types"
              },
              "disableAutoCreateTargetFolder": {
                "type": "boolean",
                "description": "Disable auto create target folder for step.",
                "default": false
              },
              "postRoutingActionRenameExpression": {
                "type": "string",
                "description": "Post transformation action rename expression for step."
              }
            }
          }
        ]
      },
      "RouteStepSendToPartner": {
        "description": "A representation of a route step of type SendToPartner",
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseRouteStep"
          },
          {
            "required": [
              "archivePolicyOnFailure",
              "archivePolicyOnSuccess",
              "autostart",
              "maxNumberOfRetries",
              "maxParallelClients",
              "sleepBetweenRetries",
              "sleepIncrementBetweenRetries",
              "targetAccountExpression",
              "targetAccountExpressionType",
              "transferProfileExpression",
              "transferSiteExpression",
              "transferSiteExpressionType"
            ]
          },
          {
            "type": "object",
            "properties": {
              "autostart": {
                "type": "boolean",
                "description": "Step autostart.",
                "default": false
              },
              "type": {
                "type": "string",
                "default": "SendToPartner"
              },
              "usePrecedingStepFiles": {
                "type": "boolean",
                "description": "If true, the route execution will continue even if the step execution fails",
                "default": false
              },
              "fileFilterExpression": {
                "maxLength": 64,
                "minLength": 0,
                "type": "string",
                "description": "File name or file name expression. It is used with the file filter expression property."
              },
              "fileFilterExpressionType": {
                "type": "string",
                "description": "File filter expression type.",
                "enum": [
                  "GLOB",
                  "REGEXP",
                  "TEXT_FILES"
                ]
              },
              "targetAccountExpression": {
                "maxLength": 64,
                "minLength": 0,
                "type": "string",
                "description": "Target account name or expression."
              },
              "targetAccountExpressionType": {
                "type": "string",
                "description": "Account name or expression type."
              },
              "transferSiteExpression": {
                "type": "string",
                "description": "This value should be specified as concatenation of transfer sites or expressions with a separator \"#!#CVD#!#\". Examples - transfer_site_name#!#CVD#!#, transfer_site_name1#!#CVD#!#transfer_site_name2#!#CVD#!#, transfer_site_name_expression#!#CVD#!#"
              },
              "transferSiteExpressionType": {
                "type": "string",
                "description": "Specifies whether a list of site names or an expression will be used for the transferSiteExpression parameter.",
                "enum": [
                  "LIST",
                  "EXPRESSION_WILDCARD"
                ]
              },
              "uploadFolder": {
                "maxLength": 64,
                "minLength": 0,
                "type": "string",
                "description": "You can specify an upload folder that will overwrite the one configured in the transfer site settings (if allowed with the respective transfer site). Expression language can be used to specify the new upload folder."
              },
              "transferProfileExpression": {
                "maxLength": 64,
                "minLength": 0,
                "type": "string",
                "description": "Transfer profile property is used only if the transfer site is of type PeSIT. Otherwise it will be ignored. When the transfer profile is specified by using Expression Language, there are 3 possible cases: (1) EL expression does not match any account transfer profiles - then the default transfer profile is used. (2) EL expression matches more than one transfer profile - then the default transfer profile is used. (3) EL expression matches exactly one transfer profile - the matched transfer profile is used.\n"
              },
              "transferProfileExpressionType": {
                "type": "string",
                "description": "Profile name or expression."
              },
              "storeAndForwardMode": {
                "type": "string",
                "description": "Advanced PeSIT Setting. All the advanced PeSIT settings are included or all are ommitted. \"Preserve\" Store and Forward mode will preserve the current Store and Forward transfer (if any). \"Start new\" will initiate a new Store and Forward transfer and the current transfer (if any) will be acknowledged.\n"
              },
              "virtualFilename": {
                "maxLength": 64,
                "minLength": 0,
                "type": "string",
                "description": "Advanced PeSIT Setting. Use this field to override the virtual file name (PI12) predefined in the transfer profile. To preserve it use ${pesit.pi.fileName}. This configuration parameter corresponds to the idf parameter in Axway Transfer CFT.\n"
              },
              "dataEncoding": {
                "type": "string",
                "description": "Advanced PeSIT Setting. Data encoding."
              },
              "recordFormat": {
                "maxLength": 64,
                "minLength": 0,
                "type": "string",
                "description": "Advanced PeSIT Setting. \"Variable\", \"Fixed\". Use this field to override the record format (PI31) predefined in the transfer profile. To preserve it use ${pesit.pi.recordFormat}. This configuration parameter corresponds to the frecfm parameter in Axway Transfer CFT.\n"
              },
              "recordLength": {
                "type": "string",
                "description": "Use this field to override the record length (PI32) predefined in the transfer profile. To preserve it use ${pesit.pi.recordLength}. This configuration parameter corresponds to the frecl parameter in Axway Transfer CFT.\n"
              },
              "fileLabel": {
                "maxLength": 64,
                "minLength": 0,
                "type": "string",
                "description": "Advanced PeSIT Setting. Use this field to override the file label (PI37) predefined in the transfer profile. To preserve it use ${pesit.pi.fileLabel}. This configuration parameter corresponds to the nfname parameter in Axway Transfer CFT.\n"
              },
              "originator": {
                "maxLength": 64,
                "minLength": 0,
                "type": "string",
                "description": "Advanced PeSIT Setting. Use this field to override the original sender (PI61) of the transfer. To preserve the original value use ${pesit.pi.originalSenderID}.\n"
              },
              "finalDestination": {
                "maxLength": 64,
                "minLength": 0,
                "type": "string",
                "description": "Advanced PeSIT Setting. Use this field to override the final destination (PI62) of the transfer. To preserve the original value use ${pesit.pi.finalDestinationID}. To make a Store and Forward PeSIT transfer specify the final destination and choose the intermediate partner (ipart parameter in Axway Transfer CFT) in the transfer site list.\n"
              },
              "userMessage": {
                "maxLength": 64,
                "minLength": 0,
                "type": "string",
                "description": "Advanced PeSIT Setting. The Last PeSIT specific setting. Use this field to override the user message (PI99) predefined in the PeSIT transfer site. To preserve use ${pesit.pi.serviceParam}. This configuration parameter corresponds to the parm parameter in Axway Transfer CFT.\n"
              },
              "triggerFileName": {
                "maxLength": 64,
                "minLength": 0,
                "type": "string",
                "description": "Name of the trigger file to be sent to the transfer site after successful routing of file(s). EL expressions are supported."
              },
              "triggerTargetAccountExpression": {
                "maxLength": 64,
                "minLength": 0,
                "type": "string",
                "description": "An account name, login name or use an expression to determine the recipient based on the environment information."
              },
              "triggerTransferSiteExpression": {
                "type": "string",
                "description": "Transfer sites to send trigger files to. Expression language is supported. This value must be a concatenation of trigger transfer sites or expressions  with a separator \"#!#CVD#!#\". Examples - transfer_site_name#!#CVD#!#, transfer_site_name1#!#CVD#!#transfer_site_name2#!#CVD#!#, transfer_site_name_expression#!#CVD#!#"
              },
              "triggerTransferSiteExpressionType": {
                "type": "string",
                "description": "Transfer site expression type for the trigger output file."
              },
              "routeFileAs": {
                "maxLength": 64,
                "minLength": 0,
                "type": "string",
                "description": "Name or expression like ${basename(currentfulltarget)}.sent or ${basename(transfer.target)}.?.${timestamp}?${extension(transfer.target)}\n"
              },
              "triggerFileContent": {
                "type": "string",
                "description": "The content of the trigger file. Expression language is supported. This value should be specified as concatenation of lines of the trigger file with a separator \"#!#CVD#!#\". Examples - line#!#CVD#!#, line1#!#CVD#!#line2#!#CVD#!#, line_expression#!#CVD#!#, null value or &#35;!#CVD#!# for empty (zero byte) trigger file."
              },
              "postRoutingActionType": {
                "type": "string",
                "description": "Post routing action types: NONE, DELETE, RENAME. Default is no action (NONE).\n"
              },
              "sleepIncrementBetweenRetries": {
                "type": "integer",
                "description": "Time (in milliseconds) with which the sleep interval between retries will be increased after each retry.",
                "format": "int32"
              },
              "sleepBetweenRetries": {
                "type": "integer",
                "description": "Time interval (in milliseconds) which will be awaited between retries.",
                "format": "int32"
              },
              "maxParallelClients": {
                "type": "integer",
                "description": "Maximum number of transfers that will be executed in parallel by the step.",
                "format": "int32"
              },
              "maxNumberOfRetries": {
                "type": "integer",
                "description": "Number of times each transfer will be retried if it fails. The retries are executed synchronously and the step will not finish execution until all files are sent successfully or the retry count configured in this property is reached.",
                "format": "int32"
              },
              "triggerFileForEach": {
                "type": "boolean",
                "description": "Trigger file output for each transferred file.",
                "default": false
              },
              "triggerTransferProfileExpression": {
                "maxLength": 64,
                "minLength": 0,
                "type": "string",
                "description": "Transfer profile property is used only if the transfer site is of type PeSIT. Otherwise it will be ignored."
              },
              "triggerUploadFolder": {
                "maxLength": 64,
                "minLength": 0,
                "type": "string",
                "description": "You can specify an upload folder that will overwrite the one configured in the transfer site settings(if allowed in the transfer site). Expression language can be used to specify the new upload folder."
              },
              "archivePolicyOnFailure": {
                "type": "string",
                "description": "Backup the files in the configured archive folder if the step execution fails. By default will archive the files based on the account configuration.",
                "enum": [
                  "DEFAULT",
                  "ENABLED",
                  "DISABLED"
                ]
              },
              "archivePolicyOnSuccess": {
                "type": "string",
                "description": "Backup the files in the configured archive folder if the step execution succeeds. By default will archive the files based on the account configuration.",
                "enum": [
                  "DEFAULT",
                  "ENABLED",
                  "DISABLED"
                ]
              },
              "postRoutingActionRenameExpression": {
                "type": "string",
                "description": "Post transformation action rename expression for step."
              },
              "triggerTargetAccountExpressionType": {
                "type": "string",
                "description": "Target account expression type on trigger.",
                "enum": [
                  "NAME",
                  "EXPRESSION"
                ]
              },
              "triggerTransferProfileExpressionType": {
                "type": "string",
                "description": "Transfer profile expression type on trigger."
              }
            }
          }
        ]
      },
      "RouteStepPullFromPartner": {
        "description": "A representation of a route step of type PullFromPartner",
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseRouteStep"
          },
          {
            "required": [
              "actionOnStepFailure",
              "localFolderPathExpression",
              "localFolderPathExpressionType",
              "targetAccountExpression",
              "targetAccountExpressionType",
              "transferSiteExpression",
              "transferSiteExpressionType"
            ]
          },
          {
            "type": "object",
            "properties": {
              "autostart": {
                "type": "boolean",
                "description": "Step autostart.",
                "default": false
              },
              "type": {
                "type": "string",
                "default": "PullFromPartner"
              },
              "targetAccountExpression": {
                "maxLength": 64,
                "minLength": 0,
                "type": "string",
                "description": "Target account name or expression."
              },
              "targetAccountExpressionType": {
                "type": "string",
                "description": "Account name or expression type."
              },
              "transferSiteExpression": {
                "type": "string",
                "description": "This value should be specified as concatenation of transfer sites or expressions with a separator \"#!#CVD#!#\". Examples - transfer_site_name#!#CVD#!#, transfer_site_name1#!#CVD#!#transfer_site_name2#!#CVD#!#, transfer_site_name_expression#!#CVD#!#"
              },
              "transferSiteExpressionType": {
                "type": "string",
                "description": "Specifies whether a list of site names or an expression will be used for the transferSiteExpression parameter.",
                "enum": [
                  "LIST",
                  "EXPRESSION_WILDCARD"
                ]
              },
              "remoteFolderPathExpression": {
                "maxLength": 512,
                "minLength": 0,
                "type": "string",
                "description": "Path or expression translating to the path from where the file(s) would be downloaded from.\n"
              },
              "remoteFolderPathExpressionType": {
                "type": "string",
                "description": "Path or expression.",
                "enum": [
                  "SIMPLE",
                  "EXPRESSION"
                ]
              },
              "remoteFileNameExpression": {
                "maxLength": 512,
                "minLength": 0,
                "type": "string",
                "description": "Name or expression translating to a name or a pattern that wold be used to filter the file(s) in the remote folder.\n"
              },
              "remoteFileNameExpressionType": {
                "type": "string",
                "description": "Name or expression.",
                "enum": [
                  "GLOB",
                  "REGEXP",
                  "TEXT_FILES"
                ]
              },
              "localFolderPathExpression": {
                "maxLength": 512,
                "minLength": 0,
                "type": "string",
                "description": "Path or expression translating to the path where the downloaded file(s) would be stored.\n"
              },
              "localFolderPathExpressionType": {
                "type": "string",
                "description": "Path or expression.",
                "enum": [
                  "SIMPLE",
                  "EXPRESSION"
                ]
              },
              "localFileNameExpression": {
                "maxLength": 512,
                "minLength": 0,
                "type": "string",
                "description": "Value or expression that would be used when naming downloaded the files.\n"
              },
              "localFileNameExpressionType": {
                "type": "string",
                "description": "Name or expression.",
                "enum": [
                  "SIMPLE",
                  "EXPRESSION"
                ]
              },
              "actionOnStepFailure": {
                "type": "string",
                "description": "Action on step failure. If set to PROCEED, the route execution will continue even if the step execution fails.",
                "enum": [
                  "FAIL",
                  "PROCEED"
                ]
              }
            }
          }
        ]
      },
      "RouteStepExecuteRoute": {
        "description": "A representation of a route step of type ExecuteRoute",
        "allOf": [
          {
            "$ref": "#/components/schemas/ExecuteRouteStep"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "ExecuteRoute"
              }
            }
          }
        ]
      },
      "ExecuteRouteStep": {
        "required": [
          "status",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "maxLength": 32,
            "minLength": 0,
            "type": "string",
            "description": "Route step Id.",
            "readOnly": true
          },
          "type": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string",
            "description": "Route step type. ExecuteRoute step links the routes of type TEMPLATE and SIMPLE. The next steps are used with SIMPLE route type.",
            "enum": [
              "EncodingConversion",
              "Compress",
              "Decompress",
              "LineFolding",
              "LineEnding",
              "LinePadding",
              "LineTruncating",
              "PgpDecryption",
              "PgpEncryption",
              "Rename",
              "CharactersReplace",
              "ExternalScript",
              "Publish",
              "SendToPartner",
              "PullFromPartner",
              "ExecuteRoute",
              "Pluggable"
            ]
          },
          "status": {
            "maxLength": 32,
            "minLength": 0,
            "type": "string",
            "description": "Route step status.",
            "enum": [
              "ENABLED",
              "DISABLED"
            ]
          },
          "precedingStep": {
            "maxLength": 32,
            "minLength": 0,
            "type": "string",
            "description": "Preceding step id."
          },
          "executeRoute": {
            "maxLength": 32,
            "minLength": 0,
            "type": "string",
            "description": "SIMPLE route id."
          }
        },
        "discriminator": {
          "propertyName": "type"
        }
      },
      "PluggableRouteStep": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseRouteStep"
          },
          {
            "required": [
              "autostart"
            ],
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "Pluggable"
              },
              "autostart": {
                "type": "boolean",
                "description": "Step autostart.",
                "default": false
              },
              "customProperties": {
                "$ref": "#/components/schemas/PluggableRouteStep_customProperties"
              }
            }
          }
        ]
      },
      "Session": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the session"
          },
          "userName": {
            "type": "string",
            "description": "The user name"
          },
          "host": {
            "type": "string",
            "description": "The host of the client that's connected to the daemon"
          },
          "protocol": {
            "type": "string",
            "description": "The protocol",
            "enum": [
              "FTP",
              "HTTP"
            ]
          },
          "userClass": {
            "type": "string",
            "description": "The user class. By default the user class can be 'VirtClass' or 'RealClass'"
          },
          "currentTransferBandwith": {
            "type": "string",
            "description": "The current transfer bandwith"
          },
          "command": {
            "type": "string",
            "description": "The command currently being executed. Like STOR, RETR, IDLE."
          },
          "sessionCreationTime": {
            "type": "string",
            "description": "The creation time of the session."
          },
          "nodeIp": {
            "type": "string",
            "description": "The IP of the node."
          },
          "serverName": {
            "type": "string",
            "description": "The name of the server from which this sessions is initiated."
          }
        }
      },
      "SessionBandwidthStatisticsByLoginName": {
        "type": "object",
        "properties": {
          "loginName": {
            "type": "string",
            "description": "The login name"
          },
          "bandwidthUsageStats": {
            "$ref": "#/components/schemas/SessionsBandwidth"
          },
          "sessions": {
            "$ref": "#/components/schemas/SessionsCount"
          },
          "maxAllowedBandwidth": {
            "$ref": "#/components/schemas/SessionsBandwidth"
          }
        }
      },
      "SessionsBandwidth": {
        "type": "object",
        "properties": {
          "inbound": {
            "type": "integer",
            "format": "int32"
          },
          "outbound": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "SessionsCount": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "description": "Total sessions count",
            "format": "int32"
          },
          "http": {
            "type": "integer",
            "description": "HTTP sessions count",
            "format": "int32"
          },
          "ftp": {
            "type": "integer",
            "description": "FTP sessions count",
            "format": "int32"
          },
          "ssh": {
            "type": "integer",
            "description": "SSH sessions count",
            "format": "int32"
          }
        }
      },
      "ServerUsageSnapshotByUserClass": {
        "type": "object",
        "properties": {
          "userClass": {
            "type": "string",
            "description": "The user class. By default the user class can be 'VirtClass' or 'RealClass'"
          },
          "globalLoggedInCounters": {
            "$ref": "#/components/schemas/SessionsCount"
          },
          "maxAllowed": {
            "type": "string",
            "description": "The max allowed field",
            "enum": [
              "unlimited",
              "some number"
            ]
          },
          "instantaneousFTPBandwidth": {
            "type": "string",
            "description": "The instantaneous FTP bandwidth. For example '0 bytes/sec'."
          },
          "localLoggedInCounters": {
            "$ref": "#/components/schemas/SessionsCount"
          },
          "bandwidthUsageStats": {
            "$ref": "#/components/schemas/SessionsBandwidth"
          }
        }
      },
      "SiteResult": {
        "type": "object",
        "properties": {
          "resultSet": {
            "$ref": "#/components/schemas/ResultSet"
          },
          "result": {
            "type": "array",
            "items": {
              "discriminator": {
                "propertyName": "type",
                "mapping": {
                  "http": "site.yaml#/HTTPSite",
                  "ftp": "site.yaml#/FTPSite",
                  "ssh": "site.yaml#/SSHSite",
                  "pesit": "site.yaml#/PeSITSite",
                  "AS2": "site.yaml#/AS2Site",
                  "folder": "site.yaml#/FolderMonitorSite",
                  "adhoc": "site.yaml#/AdhocSite",
                  "cd": "site.yaml#/ConnectDirectSite",
                  "synchrony transfer": "site.yaml#/SynchronySite",
                  "custom": "site.yaml#/CustomSite"
                }
              },
              "anyOf": [
                {
                  "$ref": "#/components/schemas/HTTPSite"
                },
                {
                  "$ref": "#/components/schemas/AdhocSite"
                },
                {
                  "$ref": "#/components/schemas/AS2Site"
                },
                {
                  "$ref": "#/components/schemas/ConnectDirectSite"
                },
                {
                  "$ref": "#/components/schemas/FTPSite"
                },
                {
                  "$ref": "#/components/schemas/SSHSite"
                },
                {
                  "$ref": "#/components/schemas/PeSITSite"
                },
                {
                  "$ref": "#/components/schemas/FolderMonitorSite"
                },
                {
                  "$ref": "#/components/schemas/SynchronySite"
                },
                {
                  "$ref": "#/components/schemas/CustomSite"
                }
              ]
            }
          }
        }
      },
      "HTTPSite": {
        "description": "A representation of an HTTP(S) site.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Site"
          },
          {
            "required": [
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "protocol": {
                "type": "string",
                "default": "http"
              },
              "type": {
                "type": "string",
                "default": "http"
              },
              "host": {
                "type": "string",
                "description": "Specify the remote site server host.",
                "default": ""
              },
              "port": {
                "type": "string",
                "description": "Specify the remote site server port.",
                "default": ""
              },
              "useUri": {
                "description": "Specify whether to define partner URL or not. If it's 'false', 'host' and 'port' should be specified. Otherwise 'url' should be specified.",
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "boolean"
                  }
                ]
              },
              "uri": {
                "type": "string",
                "description": "Specify the partner URL.",
                "default": ""
              },
              "dmz": {
                "type": "string",
                "description": "Specify the remote site network zone.",
                "enum": [
                  "none",
                  "any",
                  "Default"
                ]
              },
              "downloadFolderAdvancedExpressionEnabled": {
                "type": "boolean",
                "description": "When it is 'true' the download folder is evaluated using expression language.",
                "default": false
              },
              "downloadFolder": {
                "type": "string",
                "description": "Specify the download folder."
              },
              "downloadPatternAdvancedExpressionEnabled": {
                "type": "boolean",
                "description": "When it is 'true' the download pattern is evaluated using expression language.",
                "default": false
              },
              "downloadPattern": {
                "type": "string",
                "description": "Specify the download pattern."
              },
              "uploadFolderOverridable": {
                "description": "Defines if the upload folder can be modified by the Send To Partner routing step.",
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "boolean"
                  }
                ]
              },
              "uploadFolder": {
                "type": "string",
                "description": "Specify the upload folder."
              },
              "transferMode": {
                "type": "string",
                "description": "Specify the transfer mode. It can be A (Ascii), I (Binary). When it is not define the transfer mode is Auto detected.",
                "enum": [
                  "AUTO_DETECT",
                  "BINARY",
                  "ASCII"
                ]
              },
              "isSecure": {
                "description": "Specify if HTTPS is used or not.",
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "boolean"
                  }
                ]
              },
              "verifyCert": {
                "description": "Verify certificate for this site.",
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "boolean"
                  }
                ]
              },
              "fipsMode": {
                "description": "Specify if the FIPS Transfer Mode is enabled or disabled. This property can be set if HTTPS (issecure) is used.",
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "boolean"
                  }
                ]
              },
              "userName": {
                "type": "string",
                "description": "Specify the site login username."
              },
              "usePassword": {
                "description": "Specify if the login password should be set.",
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "boolean"
                  }
                ]
              },
              "usePasswordExpr": {
                "type": "boolean",
                "description": "Specify whether to have password expressions or not.",
                "default": false
              },
              "password": {
                "type": "string",
                "description": "Specify the site login password encrypted in 'AES128'. This property should be set if 'usePassword' is 'true'.",
                "default": ""
              },
              "clientCertificate": {
                "type": "string",
                "description": "The client certificate ID used for mutual authentication.",
                "default": ""
              },
              "requestMode": {
                "type": "string",
                "description": "The value of the requestMode property",
                "enum": [
                  "GET",
                  "POST"
                ]
              },
              "cipherSuites": {
                "type": "string",
                "description": "Cipher suites for http site."
              },
              "protocols": {
                "type": "string",
                "description": "Enabled SSL protocols for http site."
              },
              "postTransmissionActions": {
                "$ref": "#/components/schemas/BasePostTransmissionActions"
              },
              "alternativeAddresses": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SiteAlternativeAddress"
                }
              }
            }
          }
        ]
      },
      "Site": {
        "required": [
          "account",
          "name",
          "protocol"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the site."
          },
          "name": {
            "type": "string",
            "description": "The type of the site. Acts as a discriminator."
          },
          "protocol": {
            "type": "string",
            "description": "Protocol of the site."
          },
          "type": {
            "type": "string",
            "description": "Type of the site.",
            "enum": [
              "http",
              "ftp",
              "ssh",
              "pesit",
              "as2",
              "folder",
              "adhoc",
              "cd",
              "synchrony transfer",
              "custom"
            ]
          },
          "transferType": {
            "type": "string",
            "description": "The transfer type of the site. It can be unspecified (N), internal (I), partner(E)",
            "enum": [
              "N",
              "I",
              "E"
            ],
            "default": "N"
          },
          "maxConcurrentConnection": {
            "type": "integer",
            "description": "The max concurrent connection of the site",
            "format": "int32",
            "default": 0
          },
          "default": {
            "type": "boolean",
            "description": "Defines whether it is a default site. Only site from type PeSIT can be marked as 'Default'",
            "default": false
          },
          "accessLevel": {
            "type": "string",
            "description": "The access level for this site.",
            "enum": [
              "PRIVATE",
              "PUBLIC",
              "BUSINESS_UNIT"
            ]
          },
          "account": {
            "type": "string",
            "description": "The account for which the site is created"
          },
          "additionalAttributes": {
            "type": "object",
            "additionalProperties": {
              "maxLength": 4000,
              "minLength": 1,
              "type": "string"
            },
            "description": "Additional attributes which are defined with \"key\": \"value\" pairs. Keys must start with \"userVars.\" prefix, follow the pattern: [a-zA-Z0-9_.]+\nand have length between 10 and 255 characters (including the prefix). Non prefixed part of key should not start with \"userVars.\", since it is\na reserved word. Both key and value cannot be blank.\n"
          }
        },
        "discriminator": {
          "propertyName": "type"
        }
      },
      "BasePostTransmissionActions": {
        "type": "object",
        "properties": {
          "deleteOnTempFailOut": {
            "description": "Defines whether to delete the destination file on temporary failure after the transmission.",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "boolean"
              }
            ]
          },
          "deleteOnSuccessIn": {
            "description": "Defines whether to delete the source file on success after the transmission.",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "boolean"
              }
            ]
          },
          "deleteOnPermFailOut": {
            "description": "Defines whether to delete the destination file on failure after the transmission.",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "boolean"
              }
            ]
          },
          "deleteOnPermFailIn": {
            "description": "Defines whether to delete the source file on failure after the transmission.",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "boolean"
              }
            ]
          },
          "doAsOut": {
            "type": "string",
            "description": "Specify a value to send the file with a different name. An expression language can be used to specify a file name e.g. ${stenv['target']}_${random()}."
          },
          "doAsIn": {
            "type": "string",
            "description": "Specify a value to receive the file with a different name. An expression language can be used to specify a file name e.g. ${stenv['target']}_${random()}."
          }
        }
      },
      "SiteAlternativeAddress": {
        "required": [
          "host",
          "position"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the site alternative address"
          },
          "host": {
            "type": "string",
            "description": "The host/url of the alternative address."
          },
          "port": {
            "type": "string",
            "description": "The port of the alternative address."
          },
          "position": {
            "type": "integer",
            "description": "The position when alternate addresses.",
            "format": "int32"
          }
        }
      },
      "AdhocSite": {
        "description": "A representation of an Adhoc site.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Site"
          },
          {
            "required": [
              "to.email.addresses",
              "type"
            ],
            "type": "object",
            "properties": {
              "protocol": {
                "type": "string",
                "default": "adhoc"
              },
              "type": {
                "type": "string",
                "default": "adhoc"
              },
              "securityLevel": {
                "type": "string",
                "description": "Specify the delivery method of the site.",
                "enum": [
                  "ANONYMOUS_LINK",
                  "CHALLENGED_LINK",
                  "EXISTING_ACCOUNT",
                  "ENROLL_UNLICENSED",
                  "ENROLL_LICENSED"
                ]
              },
              "challenge": {
                "type": "string",
                "description": "Specify secret question. This property should be defined only when 'securityLevel' is 'CHALLENGED_LINK'"
              },
              "response": {
                "type": "string",
                "description": "Specify the answer to the secret question. This property should be defined only when 'securityLevel' is 'CHALLENGED_LINK'"
              },
              "confirmResponse": {
                "type": "string",
                "description": "Confirm the answer to the secret question. This property should be defined only when 'securityLevel' is 'CHALLENGED_LINK'"
              },
              "notificationTemplate": {
                "type": "string",
                "description": "Specify the notification mail template of the site."
              },
              "expiration": {
                "type": "string",
                "description": "Specify the site expiration interval in minutes.",
                "enum": [
                  "1440 (1 day)",
                  "10080 (7 days)",
                  "43200 (30 days)",
                  "86400 (60 days)",
                  "Never"
                ]
              },
              "fromEmailAddress": {
                "type": "string",
                "description": "Specify the From email address. If not specified, the e-mail of the user account will be used.",
                "default": ""
              },
              "toEmailAddresses": {
                "type": "string",
                "description": "Specify the TO email addresses. Separate email addresses by semicolon (;).",
                "default": ""
              },
              "ccEmailAddresses": {
                "type": "string",
                "description": "Specify the CC email addresses. Separate email addresses by semicolon (;).",
                "default": ""
              },
              "bccEmailAddresses": {
                "type": "string",
                "description": "Specify the BCC email addresses. Separate email addresses by semicolon (;).",
                "default": ""
              },
              "body": {
                "type": "string",
                "description": "Specify the message to be sent.",
                "default": ""
              },
              "sendAs": {
                "type": "string",
                "description": "Specify a value to send the file with a different name. An expression language can be used to specify a file name e.g. ${stenv['target']}_${random()}."
              },
              "sendFileAsAttachment": {
                "type": "boolean",
                "description": "Specify whether to send the file also as an email attachment.",
                "default": false
              },
              "subject": {
                "type": "string",
                "description": "Subject property for adhoc site."
              },
              "alternativeAddresses": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SiteAlternativeAddress"
                }
              }
            }
          }
        ]
      },
      "AS2Site": {
        "description": "A representation of an AS2 site.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Site"
          },
          {
            "required": [
              "as2_url",
              "receiverAs2Id",
              "receiver_email",
              "senderAs2Id",
              "senderEmail",
              "type"
            ],
            "type": "object",
            "properties": {
              "protocol": {
                "type": "string",
                "default": "as2"
              },
              "type": {
                "type": "string",
                "default": "as2"
              },
              "senderAs2Id": {
                "type": "string",
                "description": "Specify the server site AS2 name. Each AS2 transfer site for a user must have a unique Server AS2 Name(senderAs2Id) or Remote Site AS2 Name (receiverAs2Id)."
              },
              "senderEmail": {
                "type": "string",
                "description": "Specify the server site email."
              },
              "receiverAs2Id": {
                "type": "string",
                "description": "Specify the remote site AS2 name. Each AS2 transfer site for a user must have a unique Server AS2 Name(senderAs2Id) or Remote Site AS2 Name (receiverAs2Id)."
              },
              "as2Url": {
                "type": "string",
                "description": "Specify the remote site URL."
              },
              "receiverEmail": {
                "type": "string",
                "description": "Specify the remote site email."
              },
              "dmz": {
                "type": "string",
                "description": "Specify the remote site network zone. It can be 'any', 'none', 'Default' or custom network zone.",
                "enum": [
                  "none",
                  "any",
                  "Default"
                ]
              },
              "fipsMode": {
                "type": "boolean",
                "description": "Specify if the FIPS transfer mode is enabled.",
                "default": false
              },
              "cipherSuites": {
                "type": "string",
                "description": "Cipher suites for as2 site."
              },
              "protocols": {
                "type": "string",
                "description": "Enabled SSL protocols for as2 site."
              },
              "subject": {
                "type": "string",
                "description": "Specify the message subject.",
                "default": ""
              },
              "remoteEncryptionCertificate": {
                "type": "string",
                "description": "encrypt X509Certificate alias in the keystore for this partner"
              },
              "remoteSigningCertificate": {
                "type": "string",
                "description": "signs X509Certificate alias in the keystore for this partner."
              },
              "serverEncryptionCertificate": {
                "type": "string",
                "description": "encrypt X509Certificate alias in the keystore for this server"
              },
              "serverSigningCertificate": {
                "type": "string",
                "description": "signs X509Certificate alias in the keystore for this server."
              },
              "alternativeAddresses": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SiteAlternativeAddress"
                }
              },
              "transferSettings": {
                "$ref": "#/components/schemas/TransferSettingsAS2"
              }
            }
          }
        ]
      },
      "TransferSettingsAS2": {
        "type": "object",
        "properties": {
          "doAsOut": {
            "type": "string",
            "description": "Specify a value to send the file with a different name. An expression language can be used to specify a file name e.g. '${stenv['target']}_${random()}'."
          },
          "doAsIn": {
            "type": "string",
            "description": "Specify a value to receive the file with a different name. An expression language can be used to specify a file name e.g. '${stenv['target']}_${random()}'."
          },
          "clientCertificate": {
            "type": "string",
            "description": "The client certificate ID used for mutual authentication."
          },
          "senderUserName": {
            "type": "string",
            "description": "Specify the site sender username.",
            "default": ""
          },
          "senderPassword": {
            "type": "string",
            "description": "Specify the site sender password encrypted in 'AES128'.",
            "default": ""
          },
          "mimeType": {
            "type": "string",
            "description": "Specify the message MIME Type."
          },
          "subject": {
            "type": "string",
            "description": "Specify the email subject."
          },
          "requireSign": {
            "type": "boolean",
            "description": "Specify if Signature is required.",
            "default": false
          },
          "requireEncrypt": {
            "type": "boolean",
            "description": "Specify if Encryption is required.",
            "default": false
          },
          "requireSsl": {
            "type": "boolean",
            "description": "Specify if SSL Connection is required.",
            "default": false
          },
          "requireBA": {
            "type": "boolean",
            "description": "Specify if Basic Authentication is required.",
            "default": false
          },
          "receiverUserName": {
            "type": "string",
            "description": "Specify the site receiver username. This property should be set if 'requireBA' is 'true'.",
            "default": ""
          },
          "receiverPassword": {
            "type": "string",
            "description": "Specify the site receiver password encrypted in 'AES128'. This property should be set if 'requireBA' is 'true'.",
            "default": ""
          },
          "enableChunked": {
            "type": "boolean",
            "description": "Specify if file chunking is enabled (large files are sent in multiple parts).",
            "default": false
          },
          "as2MdnReturnUrl": {
            "type": "string",
            "description": "Specify if the receipt request should be asynchronous or synchronous. If this property is specified, than the requests are asynchronous, otherwise synchronous. It can be 'HTTP' or 'HTTPS'."
          },
          "as2MdnUrl": {
            "type": "boolean",
            "description": "Specify if site should request receipt for all transfers. Anything but empty or null value will trigger STAS2Sender to put MDN headers in message."
          },
          "as2MdnOptions": {
            "type": "string",
            "description": "Specify mdn options e.g 'signed-receipt-protocol=optional, pkcs7-signature; signed-receipt-micalg=optional, sha1'."
          },
          "encrypt": {
            "type": "string",
            "description": "Specify encryption. It can be '3des', 'rc2' (RC2/40), 'rc2/64', 'rc2/128'. NOTE: RC2/40, RC2/64 and RC2/128 are not FIPS compilant.\n"
          },
          "sign": {
            "type": "string",
            "description": "Specify signing e.g. 'sha1'."
          },
          "compress": {
            "type": "boolean",
            "description": "Specify if the message should be compressed.",
            "default": false
          },
          "transferTimeout": {
            "type": "integer",
            "description": "Specify the transfer timeout in seconds.",
            "format": "int32",
            "default": 600
          }
        }
      },
      "ConnectDirectSite": {
        "description": "A representation of an Connect:Direct site.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Site"
          },
          {
            "required": [
              "localServerName",
              "localServerPort",
              "recScript",
              "sendScript",
              "type"
            ],
            "type": "object",
            "properties": {
              "protocol": {
                "type": "string",
                "default": "cd"
              },
              "type": {
                "type": "string",
                "default": "cd"
              },
              "transferMode": {
                "type": "string",
                "description": "Specify the transfer mode.",
                "enum": [
                  "AUTO_DETECT",
                  "BINARY",
                  "ASCII"
                ]
              },
              "localServerName": {
                "type": "string",
                "description": "Specify the local server name."
              },
              "localServerPort": {
                "type": "string",
                "description": "Specify the local server port."
              },
              "userName": {
                "type": "string",
                "description": "Specify the site login username."
              },
              "usePassword": {
                "type": "boolean",
                "description": "Specify if the login password should be set. With Connect:Direct, this field is NOT required only when either (or both) field \"siteTemplate\" or field \"useCertificate\" is set.",
                "default": false
              },
              "usePasswordExpr": {
                "type": "boolean",
                "description": "Specify whether to have password expressions or not.",
                "default": false
              },
              "password": {
                "type": "string",
                "description": "Specify the site login password encrypted in 'AES128'. This property should be set if 'usePassword' is 'true'."
              },
              "useCertificate": {
                "type": "boolean",
                "description": "Specify if the login certificate should bet set. With Connect:Direct, this field is NOT required only when either (or both) field \"siteTemplate\" or field \"usePassword\" is set.",
                "default": false
              },
              "certificateId": {
                "type": "string",
                "description": "Speficy the site login certificate's id. This property should be set if 'useCertificate' is 'true'."
              },
              "submitScriptWithinFile": {
                "type": "boolean",
                "description": "Specify if the script contains unicode characters and has to be submitted within a file.",
                "default": false
              },
              "sendScript": {
                "type": "string",
                "description": "Specify the send script."
              },
              "recScript": {
                "type": "string",
                "description": "Specify the receive script."
              },
              "siteTemplate": {
                "type": "string",
                "description": "The site template of the site"
              }
            }
          }
        ]
      },
      "FTPSite": {
        "description": "A representation of an FTP(S) site.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Site"
          },
          {
            "required": [
              "host",
              "port",
              "type"
            ],
            "type": "object",
            "properties": {
              "protocol": {
                "type": "string",
                "default": "ftp"
              },
              "type": {
                "type": "string",
                "default": "ftp"
              },
              "host": {
                "type": "string",
                "description": "Specify the remote site server host."
              },
              "port": {
                "type": "string",
                "description": "Specify the remote site server port."
              },
              "dmz": {
                "type": "string",
                "description": "Specify the remote site network zone. It can be 'any', 'none', 'Default' or custom network zone.",
                "enum": [
                  "none",
                  "any",
                  "Default"
                ]
              },
              "activeMode": {
                "description": "Define whether the Active Connection Mode is enabled.",
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "boolean"
                  }
                ]
              },
              "downloadFolderAdvancedExpressionEnabled": {
                "type": "boolean",
                "description": "When it is 'true' the download folder is evaluated using expression language.",
                "default": false
              },
              "downloadFolder": {
                "type": "string",
                "description": "Specify the download folder."
              },
              "downloadPatternAdvancedExpressionEnabled": {
                "type": "boolean",
                "description": "When it is 'true' the download pattern is evaluated using expression language.",
                "default": false
              },
              "downloadPattern": {
                "type": "string",
                "description": "Specify the download pattern."
              },
              "uploadFolderOverridable": {
                "description": "Defines if the upload folder can be modified by the Send To Partner routing step.",
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "boolean"
                  }
                ]
              },
              "uploadFolder": {
                "type": "string",
                "description": "Specify the upload folder."
              },
              "uploadCommand": {
                "type": "string",
                "description": "Specify the FTP upload command that will be used when server initiated transfer is executed.",
                "enum": [
                  "STOR",
                  "APPE"
                ]
              },
              "preferredMethod": {
                "type": "string",
                "description": "Specify the preferred FTP command when entering FTP passive mode.",
                "enum": [
                  "default",
                  "PASV",
                  "EPSV"
                ]
              },
              "transferMode": {
                "type": "string",
                "description": "Specify the transfer mode.",
                "enum": [
                  "AUTO_DETECT",
                  "BINARY",
                  "ASCII"
                ]
              },
              "matchAnyLineTerminators": {
                "description": "Tanscode any line terminators in ASCII mode.",
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "boolean"
                  }
                ]
              },
              "hostnameVerification": {
                "type": "string",
                "description": "Verify if the remote host taking part of a data connection is the same as the host to which the control connection is attached.",
                "enum": [
                  "DEFAULT",
                  "ENABLED",
                  "DISABLED"
                ]
              },
              "isSecure": {
                "description": "Specify if FTPS is used or not.",
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "boolean"
                  }
                ]
              },
              "verifyCert": {
                "description": "Verify certificate for this site. 'true' indicates that remote server's certificate should be verified. 'false' indicates that remote server's certificate should not be verified.",
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "boolean"
                  }
                ]
              },
              "ccc": {
                "description": "Clear command channel. 'true' indicates if Clear Command Channel option should be used when connecting to site, 'false' if not to be used.",
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "boolean"
                  }
                ]
              },
              "tlsShutdownCcc": {
                "description": "TLC Shutdown on CCC. 'true' means that the client should shutdown TLS session on 'Clear Command Channel' and 'false' that it should not shutdown the TLS session on 'Clear Command Channel'.",
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "boolean"
                  }
                ]
              },
              "fipsMode": {
                "description": "Specify if the FIPS Transfer Mode is enabled or disabled. This property can be set if FTPS (issecure) is used. disabled.",
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "boolean"
                  }
                ]
              },
              "siteCommand": {
                "type": "string",
                "description": "Specify the SITE commands."
              },
              "userName": {
                "type": "string",
                "description": "Specify the site login username."
              },
              "usePassword": {
                "description": "Specify if the login password should be set.",
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "boolean"
                  }
                ]
              },
              "password": {
                "type": "string",
                "description": "Specify the site login password encrypted in 'AES128'. This property should be set if 'usePassword' is 'true'."
              },
              "usePasswordExpr": {
                "type": "boolean",
                "description": "Specify whether to have password expressions or not.",
                "default": false
              },
              "clientCertificate": {
                "type": "string",
                "description": "The client certificate ID used for mutual authentication."
              },
              "cipherSuites": {
                "type": "string",
                "description": "Cipher suites for ftp site."
              },
              "protocols": {
                "type": "string",
                "description": "Enabled SSL protocols for ftp site."
              },
              "alternativeAddresses": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SiteAlternativeAddress"
                }
              },
              "postTransmissionActions": {
                "$ref": "#/components/schemas/PostTransmissionActionsFTP"
              }
            }
          }
        ]
      },
      "PostTransmissionActionsFTP": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BasePostTransmissionActions"
          }
        ]
      },
      "SSHSite": {
        "description": "A representation of an SSH site.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Site"
          },
          {
            "required": [
              "host",
              "port",
              "type",
              "userName"
            ],
            "type": "object",
            "properties": {
              "protocol": {
                "type": "string",
                "default": "ssh"
              },
              "type": {
                "type": "string",
                "default": "ssh"
              },
              "host": {
                "type": "string",
                "description": "Specify the remote site server host.",
                "default": ""
              },
              "port": {
                "type": "string",
                "description": "Specify the remote site server port.",
                "default": ""
              },
              "dmz": {
                "type": "string",
                "description": "Specify the remote site network zone.",
                "enum": [
                  "none",
                  "any",
                  "Default"
                ]
              },
              "downloadFolderAdvancedExpressionEnabled": {
                "type": "boolean",
                "description": "When it is 'true' the download folder is evaluated using expression language.",
                "default": false
              },
              "downloadFolder": {
                "type": "string",
                "description": "Specify the download folder."
              },
              "downloadPatternAdvancedExpressionEnabled": {
                "type": "boolean",
                "description": "When it is 'true' the download pattern is evaluated using expression language.",
                "default": false
              },
              "downloadPatternType": {
                "type": "string",
                "description": "Specify the download pattern type. Pattern matching expression supports 'glob' and 'regex' syntaxes.When the pattern type is \"File Globbing\" then the String representation of the filename is matched using a limited pattern language that resembles regular expressions but with a simpler syntax."
              },
              "downloadPattern": {
                "type": "string",
                "description": "Specify the download pattern.",
                "default": ""
              },
              "uploadFolderOverridable": {
                "description": "Defines if the upload folder can be modified by the Send To Partner routing step.",
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "boolean"
                  }
                ]
              },
              "uploadFolder": {
                "type": "string",
                "description": "Specify the upload folder."
              },
              "uploadPermissions": {
                "type": "string",
                "description": "Defines the upload permissions.",
                "default": "0644"
              },
              "updatePermissionsWithChmodCommand": {
                "type": "string",
                "description": "Determines whether to use chmod or umask command to change file permissions. This setting overrides the global setting configured via the Ssh.UpdateFilePermissionsWithChmodCommand option. The possible values are - null(Default) - The global setting is applied; True - The file permissions, specified in the SSH transfer site, are set after transfer ends with chmod; False - The file handler is opened with specified permissions. The file permissions are set with umask. There is no need to edit the Upload Permissions field - correct format is automatically set.",
                "default": ""
              },
              "transferMode": {
                "type": "string",
                "description": "Specify the transfer mode.",
                "enum": [
                  "AUTO_DETECT",
                  "BINARY",
                  "ASCII"
                ]
              },
              "verifyFinger": {
                "description": "Defines whther to verify fingerprint for this site or not.",
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "boolean"
                  }
                ]
              },
              "fingerPrint": {
                "type": "string",
                "description": "Specify the fingerprint."
              },
              "fipsMode": {
                "description": "Specify if the FIPS Transfer Mode is enabled or disabled. This property can be set if FTPS (issecure) is used.",
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "boolean"
                  }
                ]
              },
              "userName": {
                "type": "string",
                "description": "Specify the site login username.",
                "default": ""
              },
              "usePassword": {
                "description": "Specify if the login password should be set.",
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "boolean"
                  }
                ]
              },
              "usePasswordExpr": {
                "type": "boolean",
                "description": "Specify whether to have password expressions or not.",
                "default": false
              },
              "password": {
                "type": "string",
                "description": "Specify the site login password encrypted in 'AES128'. This property should be set if 'usePassword' is 'true'.",
                "default": ""
              },
              "socketTimeout": {
                "description": "Specify the maximum number of seconds the server waits to read a block of data from the partner server, or write a block of data to the partner server. If not specified, its value is '300' - 300 seconds. This option corresponds to the SO_RCVTIMEO and SO_SNDTIMEO Socket options.",
                "format": "int32",
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "integer"
                  }
                ]
              },
              "connectionIdleTimeout": {
                "description": "Specify the maximum length of time that a connection can stay active when no traffic is sent through the connection. If not specified, its value is '300' - 300 seconds.",
                "format": "int32",
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "integer"
                  }
                ]
              },
              "socketBufferSize": {
                "description": "Specify the size of the receive buffer in bytes used from the socket opened during the transfer. It is used by the platform's networking code as a hint for the size to set the underlying network I/O buffers. Increasing the receive buffer size can increase the performance of network I/O for high-volume connection, while decreasing it can help reduce the backlog of incoming data. This value is also used to set the TCP receive window that is advertized to the remote peer. This option corresponds to the SO_RCVBUF. The value should be a positive integer.",
                "format": "int32",
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "integer"
                  }
                ]
              },
              "socketSendBufferSize": {
                "description": "Specify the size of the send buffer in bytes used from the socket opened during the transfer. It is used by the platform's networking code as a hint for the size to set the underlying network I/O buffers. This option corresponds to the SO_SNDBUF. The value should be a positive integer.",
                "format": "int32",
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "integer"
                  }
                ]
              },
              "bufferSize": {
                "description": "Specify the size of the buffer in bytes used for reading from the local file system when performing the transfer. This setting is used to optimize the writing of files by allowing large chunk of data to be read in one operation from a local file. The value should be a positive integer. This setting should be set to the highest value possible.",
                "format": "int32",
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "integer"
                  }
                ]
              },
              "blockSize": {
                "description": "Specify the SFTP block size value used for the transfer. The value should be a positive integer greater or equal to 512. The defaults value is 32768. It is not recommended to increase the value, more than the default one as the remote server may not be able to support higher block sizes.",
                "format": "int32",
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "integer"
                  }
                ]
              },
              "tcpNoDelay": {
                "description": "Enable TCP_NODELAY (disable/enable Nagle's algorithm) for the transfer.",
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "boolean"
                  }
                ]
              },
              "clientCertificate": {
                "type": "string",
                "description": "The client certificate ID used for mutual authentication.",
                "default": ""
              },
              "cipherSuites": {
                "type": "string",
                "description": "Cipher suites for ssh site."
              },
              "protocols": {
                "type": "string",
                "description": "Enabled SSL protocols for ssh site."
              },
              "allowedMacs": {
                "type": "string",
                "description": "Allowed macs for ssh site."
              },
              "keyExchangeAlgorithms": {
                "type": "string",
                "description": "Key exchange algorithms for ssh site."
              },
              "publicKeys": {
                "type": "string",
                "description": "Public keys for ssh site."
              },
              "alternativeAddresses": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SiteAlternativeAddress"
                }
              },
              "postTransmissionActions": {
                "$ref": "#/components/schemas/PostTransmissionActionsSSH"
              }
            }
          }
        ]
      },
      "PostTransmissionActionsSSH": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PostTransmissionActionsFTP"
          }
        ]
      },
      "PeSITSite": {
        "description": "A representation of an PeSIT site.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Site"
          },
          {
            "required": [
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "protocol": {
                "type": "string",
                "default": "pesit"
              },
              "type": {
                "type": "string",
                "default": "pesit"
              },
              "pesitId": {
                "type": "string",
                "description": "Specify the PeSIT ID which will be used for defining the PeSIT partnership."
              },
              "host": {
                "type": "string",
                "description": "Specify the remote partner host.",
                "default": ""
              },
              "port": {
                "type": "string",
                "description": "Specify the remote partner port.",
                "default": ""
              },
              "dmz": {
                "type": "string",
                "description": "Specify the remote partner network zone. It can be 'any', 'none', 'Default' or custom network zone.",
                "enum": [
                  "none",
                  "any",
                  "Default"
                ]
              },
              "configurePreconnection": {
                "description": "Specify if Pre-Connection should be set.",
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "boolean"
                  }
                ]
              },
              "preconnectionPartnerId": {
                "type": "string",
                "description": "Specify the partner id used for Pre-Connection.",
                "default": "none"
              },
              "usePreconnectionPartnerPassword": {
                "description": "Specify if the Pre-Connection partner password should be set.",
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "boolean"
                  }
                ]
              },
              "usePreconnectionPartnerPasswordExpr": {
                "type": "boolean",
                "description": "Specify whether to have Pre-Connection partner password expressions or not.",
                "default": false
              },
              "preconnectionPartnerPassword": {
                "type": "string",
                "description": "Specify the partner password encrypted in 'AES128'. It is used for Pre-Connection.",
                "default": "none"
              },
              "preconnectionServerId": {
                "type": "string",
                "description": "Specify the server id used for Pre-Connection.",
                "default": "none"
              },
              "usePreconnectionServerPassword": {
                "description": "Specify if the Pre-Connection server password should be set.",
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "boolean"
                  }
                ]
              },
              "usePreconnectionServerPasswordExpr": {
                "type": "boolean",
                "description": "Specify whether to have Pre-Connection server password expressions or not.",
                "default": false
              },
              "preconnectionServerPassword": {
                "type": "string",
                "description": "Specify the server password encrypted in 'AES128'. It is used for preconnection.",
                "default": "none"
              },
              "useServerPassword": {
                "description": "Specify if the server password should be set.",
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "boolean"
                  }
                ]
              },
              "useServerPasswordExpr": {
                "type": "boolean",
                "description": "Specify whether to have server password expressions or not.",
                "default": false
              },
              "serverPassword": {
                "type": "string",
                "description": "Specify the server password encrypted in 'AES128'. This property should be set if 'useServerPassword' is 'true'.",
                "default": ""
              },
              "usePartnerPassword": {
                "description": "Specify if the partner password should be set.",
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "boolean"
                  }
                ]
              },
              "usePartnerPasswordExpr": {
                "type": "boolean",
                "description": "Specify whether to have partner password expressions or not.",
                "default": false
              },
              "partnerPassword": {
                "type": "string",
                "description": "Specify the partner password encrypted in 'AES128'. This property should be set if 'usePartnerPassword' is 'true'.",
                "default": ""
              },
              "compression": {
                "type": "string",
                "description": "Specify the transfer compression. It can be 0 (None), 1 (Horizontal), 2 (Vertical) or 3 (Both).",
                "enum": [
                  "none",
                  "vertical",
                  "horizontal",
                  "both"
                ]
              },
              "resyncAllowed": {
                "description": "Specify if the resync is allowed.",
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "boolean"
                  }
                ]
              },
              "checkpointInterval": {
                "description": "Specify the checkpoint interval.",
                "format": "int32",
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "integer"
                  }
                ]
              },
              "checkpointWindow": {
                "description": "Specify the checkpoint window.",
                "format": "int32",
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "integer"
                  }
                ]
              },
              "connectionTimeout": {
                "description": "Overwrites the value specified in Pesit.Client.Inactivity.Timeout configuration option. It is used to determine how much time (in seconds) ST will wait for acknowledgment command for transfer end, when pushing file to a server, when ST acts as a PeSIT client.",
                "format": "int32",
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "integer"
                  }
                ]
              },
              "bufferSize": {
                "description": "Specify the PeSIT buffer size. This option is used when SecureTransport is acting as a PeSIT client. Specifies the maximum size of a PeSIT data element (PI 25). Should be greater than 800 bytes and less than 65535.",
                "format": "int32",
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "integer"
                  }
                ]
              },
              "sendMessage": {
                "type": "string",
                "description": "Specify a user send message. An expression language can be used e.g. ${pesit.serverID}."
              },
              "receiveMessage": {
                "type": "string",
                "description": "Specify a user receive message."
              },
              "storeAndForwardMode": {
                "type": "string",
                "description": "Advanced PeSIT Setting. All the advanced PeSIT settings are included or all are ommitted. \"Preserve\" Store and Forward mode will preserve the current Store and Forward transfer (if any). \"Start new\" will initiate a new Store and Forward transfer and the current transfer (if any) will be acknowledged.\n",
                "enum": [
                  "START_NEW",
                  "PRESERVE"
                ]
              },
              "originator": {
                "maxLength": 64,
                "minLength": 0,
                "type": "string",
                "description": "Advanced PeSIT Setting. Use this field to override the original sender (PI61) of the transfer. To preserve the original value use ${pesit.pi.originalSenderID}.\n"
              },
              "finalDestination": {
                "maxLength": 64,
                "minLength": 0,
                "type": "string",
                "description": "Advanced PeSIT Setting. Use this field to override the final destination (PI62) of the transfer. To preserve the original value use ${pesit.pi.finalDestinationID}. To make a Store and Forward PeSIT transfer specify the final destination and choose the intermediate partner (ipart parameter in Axway Transfer CFT) in the transfer site list.\n"
              },
              "ptcpConnections": {
                "description": "Specify the number of parallel TCP connections.",
                "format": "int32",
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "integer"
                  }
                ]
              },
              "ptcpPacketSize": {
                "description": "Specify the TCP packet size",
                "format": "int32",
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "integer"
                  }
                ]
              },
              "socketSendReceiveBuffersize": {
                "description": "This option is used when SecureTransport is acting as a PeSIT client. Specifies the TCP Socket maximum send and receive buffer size in bytes. This setting corresponds to SO_SNDBUF and SO_RCVBUF socket parameters.",
                "format": "int32",
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "integer"
                  }
                ]
              },
              "ptcpConnectRetryCount": {
                "description": "This option is used when SecureTransport is acting as a PeSIT client. It specifies the maximum times the SecureTransport will attempt to re-establish a connection with the remote server in case of \"Unknown session\" error.",
                "format": "int32",
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "integer"
                  }
                ]
              },
              "isSecure": {
                "description": "Specify if TLS/SSL is used or not.",
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "boolean"
                  }
                ]
              },
              "verifyCert": {
                "description": "This option is used when SecureTransport is acting as a PeSIT client. Verify whether the server certificate of the partner is chained to a trusted root. This property can be set if TLS/SSL (issecure) is used.",
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "boolean"
                  }
                ]
              },
              "fipsMode": {
                "description": "Specify if the FIPS Transfer Mode is enabled or disabled. This property can be set if TLS/SSL (issecure) is used.",
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "boolean"
                  }
                ]
              },
              "cftCompatibleSslMode": {
                "description": "Enable Legasy transfer CFT compatible SSL mode. This property can be set if TLS/SSL (issecure) is used and the 'Clear Command Channel' is enabled.",
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "boolean"
                  }
                ]
              },
              "loginCertificate": {
                "type": "string",
                "description": "The client certificate ID used for mutual authentication.",
                "default": ""
              },
              "partnerCertificate": {
                "type": "string",
                "description": "The partner certificate ID used for mutual authentication.",
                "default": ""
              },
              "cipherSuites": {
                "type": "string",
                "description": "Cipher suites for ssh site."
              },
              "protocols": {
                "type": "string",
                "description": "Enabled SSL protocols for ssh site."
              },
              "alternativeAddresses": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SiteAlternativeAddress"
                }
              }
            }
          }
        ]
      },
      "FolderMonitorSite": {
        "description": "A representation of an Folder Monitor site.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Site"
          },
          {
            "required": [
              "downloadFolder",
              "downloadPattern",
              "downloadPatternType",
              "type",
              "uploadFolder"
            ],
            "type": "object",
            "properties": {
              "protocol": {
                "type": "string",
                "default": "folder"
              },
              "type": {
                "type": "string",
                "default": "folder"
              },
              "downloadFolderAdvancedExpressionEnabled": {
                "type": "boolean",
                "description": "When it is 'true' the download folder is evaluated using expression language.",
                "default": false
              },
              "downloadFolder": {
                "type": "string",
                "description": "Specify the download folder. When 'download.folder.advanced.expression.enabled' is checked the download folder is evaluated using expression language."
              },
              "downloadPatternAdvancedExpressionEnabled": {
                "type": "boolean",
                "description": "When it is 'true' the download pattern is evaluated using expression language.",
                "default": false
              },
              "downloadPatternType": {
                "type": "string",
                "description": "Specify the download pattern type. Pattern matching expression supports 'glob' and 'regex' syntaxes.When the pattern type is \"File Globbing\" then the String representation of the filename is matched using a limited pattern language that resembles regular expressions but with a simpler syntax."
              },
              "downloadPattern": {
                "type": "string",
                "description": "Specify the download pattern."
              },
              "downloadPatternCaseSensitive": {
                "description": "Defines whether the download pattern is case sensitive.",
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "boolean"
                  }
                ]
              },
              "downloadSubfolderMaxDepth": {
                "description": "Specify the maximum depth of the subfolders to monitor.",
                "format": "int32",
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "integer"
                  }
                ]
              },
              "downloadSubfolderPatternType": {
                "type": "string",
                "description": "Specify the dowlnload pattern type. Pattern matching expression supports 'glob' and 'regex' syntaxes. When the pattern type is \"File Globbing\" then the String representation of the filename is matched using a limited pattern language that resembles regular expressions but with a simpler syntax."
              },
              "downloadSubfolderPattern": {
                "type": "string",
                "description": "Specify the pattern used to match folder names to determine whether to apply the download pattern to the folder."
              },
              "downloadSubfolderPatternCaseSensitive": {
                "description": "Defines whether the subfolder download pattern is case sensitive.",
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "boolean"
                  }
                ]
              },
              "uploadFolder": {
                "type": "string",
                "description": "Specify the upload folder."
              },
              "uploadFolderExpressionSupport": {
                "description": "When it is 'true' the upload folder is evaluated using expression language.",
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "boolean"
                  }
                ]
              },
              "uploadFolderAutocreate": {
                "description": "Defines if the Upload Folder will be automatically created if it doesn't exist.The automatically created folder will be owned by the user running the SecureTransport TM Server process. Privileges are calculated according to the OS umask (not the Users.DefaultUmask Server Configuration parameter).",
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "boolean"
                  }
                ]
              },
              "uploadFolderOverridable": {
                "description": "Defines if the upload folder can be modified by the Send To Partner routing step.",
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "boolean"
                  }
                ]
              },
              "postTransmissionActions": {
                "$ref": "#/components/schemas/PostTransmissionActionsFM"
              }
            }
          }
        ]
      },
      "PostTransmissionActionsFM": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PostTransmissionActionsFTP"
          }
        ]
      },
      "SynchronySite": {
        "description": "A representation of an synchrony site.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Site"
          },
          {
            "required": [
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "protocol": {
                "type": "string",
                "default": "synchrony transfer"
              },
              "type": {
                "type": "string",
                "default": "synchrony transfer"
              },
              "host": {
                "type": "string",
                "description": "Specify the remote partner host.",
                "default": ""
              },
              "port": {
                "type": "string",
                "description": "Specify the remote partner port.",
                "default": ""
              },
              "username": {
                "type": "string",
                "description": "Specify the site login username."
              },
              "usePasswordExpr": {
                "type": "boolean",
                "description": "Specify whether to have password expressions or not.",
                "default": false
              },
              "partner": {
                "type": "string",
                "description": "Partner property for synchrony site."
              },
              "transferProfile": {
                "type": "string",
                "description": "Transfer profile entity for synchrony site."
              },
              "password": {
                "type": "string",
                "description": "Specify the site login password."
              },
              "siteTemplate": {
                "type": "string",
                "description": "The site template of the site"
              },
              "additionalProperties": {
                "$ref": "#/components/schemas/AdditionalPropertiesSynchrony"
              }
            }
          }
        ]
      },
      "AdditionalPropertiesSynchrony": {
        "type": "object",
        "properties": {
          "appcycid": {
            "type": "string"
          },
          "appobjid": {
            "type": "string"
          },
          "direction": {
            "type": "string"
          },
          "fName": {
            "type": "string"
          },
          "freeMsg": {
            "type": "string"
          },
          "ida": {
            "type": "string"
          },
          "ipart": {
            "type": "string"
          },
          "maxDate": {
            "type": "string"
          },
          "maxTime": {
            "type": "string"
          },
          "minDate": {
            "type": "string"
          },
          "minTime": {
            "type": "string"
          },
          "nfName": {
            "type": "string"
          },
          "nIdf": {
            "type": "string"
          },
          "pri": {
            "type": "string"
          },
          "rappl": {
            "type": "string"
          },
          "rUser": {
            "type": "string"
          },
          "sappl": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "sUser": {
            "type": "string"
          },
          "trk": {
            "type": "string"
          }
        }
      },
      "CustomSite": {
        "description": "A representation of custom site.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Site"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "custom"
              },
              "clientCertificate": {
                "type": "string",
                "description": "The client certificate ID used for mutual authentication."
              },
              "customProperties": {
                "$ref": "#/components/schemas/PluggableRouteStep_customProperties"
              }
            }
          }
        ]
      },
      "Connection": {
        "required": [
          "host",
          "id",
          "name",
          "port",
          "protocol"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Site id"
          },
          "name": {
            "type": "string",
            "description": "Site name"
          },
          "host": {
            "type": "string",
            "description": "Site host"
          },
          "port": {
            "type": "string",
            "description": "Site port"
          },
          "protocol": {
            "type": "string",
            "description": "Site protocol"
          },
          "account": {
            "type": "string",
            "description": "Account name"
          },
          "username": {
            "type": "string",
            "description": "The username of the site used for authentication."
          },
          "password": {
            "type": "string",
            "description": "The password of the site used for authentication."
          },
          "usePassword": {
            "type": "string",
            "description": "Indicates for using the password."
          },
          "clientLocalCertificate": {
            "type": "string",
            "description": "The client local certificate of the site."
          },
          "fingerprint": {
            "type": "string",
            "description": "Site fingerprint"
          },
          "publicKeys": {
            "type": "string",
            "description": "The public key used in test connection."
          },
          "dmz": {
            "type": "string",
            "description": "The network zone of the site."
          },
          "socketTimeout": {
            "type": "string",
            "description": "The maximum number of seconds the server waits to read a block of data from the partner server, or write a block of data to the partner server."
          },
          "verifyFinger": {
            "type": "string",
            "description": "Indicates if fingerprint verification of the site is enabled."
          },
          "tcpNoDelay": {
            "type": "string",
            "description": "Disable/Enable Nagle's algorithm) for the transfer."
          },
          "allowedMacs": {
            "type": "string",
            "description": "The allowed message authentication code algorithms used to confirm that the message came from the stated sender."
          },
          "socketBufferSize": {
            "type": "string",
            "description": "The size of the receive buffer in bytes used from the socket opened during the transfer."
          },
          "socketSendBufferSize": {
            "type": "string",
            "description": "The size of the send buffer in bytes used from the socket opened during the transfer."
          },
          "cipherSuites": {
            "type": "string",
            "description": "The set of cryptographic algorithms used."
          },
          "keyExchangeAlgorithms": {
            "type": "string",
            "description": "The set of key exchange algorithms used for connection."
          },
          "fipsMode": {
            "type": "string",
            "description": "Specifies whether FIPS 140-2 standard is used."
          },
          "downloadFolder": {
            "type": "string",
            "description": "The remote download folder."
          },
          "downloadFolderAdvancedExpressionEnabled": {
            "type": "string",
            "description": "Specifies whether Expression Language support is enabled for download folder."
          },
          "downloadPatternAdvancedExpressionEnabled": {
            "type": "string",
            "description": "Specifies whether Expression Language support is enabled for download pattern."
          },
          "downloadPatternType": {
            "type": "string",
            "description": "The download pattern type."
          },
          "downloadPattern": {
            "type": "string",
            "description": "The download pattern."
          },
          "uploadFolder": {
            "type": "string",
            "description": "The remote upload folder."
          },
          "activeMode": {
            "type": "string",
            "description": "Define whether the Active Connection Mode is enabled"
          },
          "isSecure": {
            "type": "string",
            "description": "Specify if secure protocol is used or not."
          },
          "transferMode": {
            "type": "string",
            "description": "Specify the transfer mode.",
            "enum": [
              "AUTO_DETECT",
              "BINARY",
              "ASCII"
            ]
          },
          "ccc": {
            "type": "string",
            "description": "Clear command channel. 'true' indicates if Clear Command Channel option should be used when connecting to site, 'false' if not to be used.\n"
          },
          "tlsShutdownCcc": {
            "type": "string",
            "description": "TLC Shutdown on CCC. 'true' means that the client should shutdown TLS session on 'Clear Command Channel' and 'false' that it should not shutdown the TLS session on 'Clear Command Channel'.\n"
          },
          "siteCommand": {
            "type": "string",
            "description": "Specify the SITE commands."
          },
          "matchAnyLineTerminators": {
            "type": "string",
            "description": "Transcode any line terminators in ASCII mode."
          },
          "disableFtpHostnameVerification": {
            "type": "string",
            "description": "Verify if the remote host taking part of a data connection is the same as the host to which the control connection is attached."
          },
          "uploadFolderOverridable": {
            "type": "string",
            "description": "Defines if the upload folder can be modified by the Send To Partner routing step."
          },
          "verifyCert": {
            "type": "string",
            "description": "Verify certificate for this site."
          },
          "preferredMethod": {
            "type": "string",
            "description": "Specify the preferred FTP command when entering FTP passive mode.",
            "enum": [
              "default",
              "PASV",
              "EPSV"
            ]
          },
          "protocols": {
            "type": "string",
            "description": "Enabled SSL protocols for site."
          },
          "useUri": {
            "type": "string",
            "description": "Specify whether to define partner URL or not. If it's 'false', 'host' and 'port' should be specified. Otherwise 'url' should be specified.   \n"
          },
          "uri": {
            "type": "string",
            "description": "Specify the partner URL."
          },
          "requestMode": {
            "type": "string",
            "description": "The value of the requestMode property",
            "enum": [
              "GET",
              "POST"
            ]
          },
          "customProperties": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Custom properties which are defined with \"key\": \"value\" pairs.\n"
          }
        }
      },
      "ConnectionDetailsResult": {
        "type": "object",
        "properties": {
          "connectionStatus": {
            "type": "string",
            "description": "Indicates whether the connection is successful"
          },
          "authenticationStatus": {
            "type": "string",
            "description": "Indicates whether the authentication is successful"
          },
          "fingerprintVerificationStatus": {
            "type": "string",
            "description": "If fingerprint verification is enabled in test connection"
          },
          "fingerprint": {
            "type": "string",
            "description": "Fingerprint value used in test connection"
          },
          "cipher": {
            "type": "string",
            "description": "Cipher suite name used in test connection"
          },
          "certificateAlias": {
            "type": "string",
            "description": "Certificate alias used in test connection"
          },
          "sendBufferSize": {
            "type": "string",
            "description": "Send buffer size (SO_SNDBUF) used in test connection"
          },
          "receiveBufferSize": {
            "type": "string",
            "description": "Receive buffer size (SO_RCVBUF) used in test connection"
          },
          "sessionId": {
            "type": "string",
            "description": "Session id associate with test connection"
          },
          "errorDetails": {
            "type": "string",
            "description": "Detailed error message in case of error in test connection"
          },
          "hmac": {
            "type": "string",
            "description": "Hash-based message authentication codes. These are used to ensure that the received message text is intact and unmodified."
          },
          "keyAlgorithm": {
            "type": "string",
            "description": "Key Algorithm used in test connection"
          },
          "publicKey": {
            "type": "string",
            "description": "Public key used in test connection"
          }
        }
      },
      "ListRemoteFolderResult": {
        "type": "object",
        "properties": {
          "connectionStatus": {
            "type": "string",
            "description": "Indicates whether the remote side connection is successful"
          },
          "remoteFolder": {
            "type": "string",
            "description": "Remote folder used in list folder operation."
          },
          "sessionId": {
            "type": "string",
            "description": "Session id associate with remote list folder operation."
          },
          "errorDetails": {
            "type": "string",
            "description": "Detailed error message in case of error in list folder operation."
          },
          "resultSet": {
            "$ref": "#/components/schemas/ResultSet"
          },
          "result": {
            "type": "array",
            "description": "Remote files result after list.",
            "items": {
              "$ref": "#/components/schemas/ResultFile"
            }
          }
        }
      },
      "ResultFile": {
        "type": "object",
        "properties": {
          "fileName": {
            "type": "string",
            "description": "The remote file name."
          },
          "fileSize": {
            "type": "string",
            "description": "The remote file size."
          },
          "filePermissions": {
            "type": "string",
            "description": "The remote file permissions."
          },
          "lastModifiedTime": {
            "type": "string",
            "description": "The remote file last modified time."
          }
        }
      },
      "SiteTemplateResult": {
        "type": "object",
        "properties": {
          "resultSet": {
            "$ref": "#/components/schemas/ResultSet"
          },
          "result": {
            "type": "array",
            "items": {
              "discriminator": {
                "propertyName": "type",
                "mapping": {
                  "cd": "#/ConnectDirectSiteTemplate",
                  "synchrony transfer": "#/SynchronySiteTemplate",
                  "custom": "#/CustomSiteTemplate"
                }
              },
              "anyOf": [
                {
                  "$ref": "#/components/schemas/ConnectDirectSiteTemplate"
                },
                {
                  "$ref": "#/components/schemas/SynchronySiteTemplate"
                },
                {
                  "$ref": "#/components/schemas/CustomSiteTemplate"
                }
              ]
            }
          }
        }
      },
      "ConnectDirectSiteTemplate": {
        "allOf": [
          {
            "required": [
              "localServerName",
              "localServerPort",
              "recScript",
              "sendScript",
              "userName"
            ]
          },
          {
            "$ref": "#/components/schemas/BaseSiteTemplate"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "cd"
              },
              "protocol": {
                "type": "string",
                "default": "cd"
              },
              "localServerName": {
                "type": "string",
                "description": "The name of the site template."
              },
              "localServerPort": {
                "type": "string",
                "description": "The port of the local Connect:Direct server."
              },
              "submitScriptWithinFile": {
                "type": "boolean",
                "description": "Specify if the script contains unicode characters and has to be submitted within a file.",
                "default": false
              },
              "recScript": {
                "type": "string",
                "description": "Receive script of the Connect:Direct site template."
              },
              "sendScript": {
                "type": "string",
                "description": "Send script of the Connect:Direct site template."
              },
              "userName": {
                "type": "string",
                "description": "The username for the site template."
              },
              "usePassword": {
                "type": "boolean",
                "description": "Whether to use password for login. The field is NOT required only when field \"useCertificate\" is set.",
                "default": false
              },
              "usePasswordExpr": {
                "type": "boolean",
                "description": "Whether to use password expressions.",
                "default": false
              },
              "password": {
                "type": "string",
                "description": "Password for login."
              },
              "useCertificate": {
                "type": "boolean",
                "description": "Specify if the login certificate should bet set. The field is NOT required only when field \"usePassword\" is set.",
                "default": false
              },
              "certificatePlaceholder": {
                "type": "string",
                "description": "Speficy the site login certificate placeholder. This property should be set if 'useCertificate' is 'true'."
              },
              "transferMode": {
                "type": "string",
                "description": "The transfer mode of the site template.",
                "enum": [
                  "Auto detect",
                  "Binary",
                  "Ascii"
                ]
              }
            }
          }
        ]
      },
      "BaseSiteTemplate": {
        "required": [
          "name",
          "protocol",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the site template."
          },
          "name": {
            "type": "string",
            "description": "The name of the site template."
          },
          "type": {
            "type": "string",
            "description": "The type of the site template. Acts as a discriminator."
          },
          "protocol": {
            "type": "string",
            "description": "The protocol of the site template. It could be 'cd', 'synchrony transfer' or any 'custom' one.",
            "enum": [
              "cd",
              "synchrony",
              "custom"
            ]
          },
          "additionalAttributes": {
            "type": "object",
            "additionalProperties": {
              "maxLength": 4000,
              "minLength": 1,
              "type": "string"
            },
            "description": "Additional attributes which are defined with \"key\": \"value\" pairs. Keys must start with \"userVars.\" prefix, follow the pattern: [a-zA-Z0-9_.]+\nand have length between 10 and 255 characters (including the prefix). Non prefixed part of key should not start with \"userVars.\", since it is\na reserved word. Both key and value cannot be blank.\n"
          }
        },
        "discriminator": {
          "propertyName": "type"
        }
      },
      "SynchronySiteTemplate": {
        "allOf": [
          {
            "required": [
              "host",
              "partner",
              "password",
              "port",
              "transferProfile",
              "usePasswordExpr",
              "userName"
            ]
          },
          {
            "$ref": "#/components/schemas/BaseSiteTemplate"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "synchrony transfer"
              },
              "protocol": {
                "type": "string",
                "default": "synchrony transfer"
              },
              "host": {
                "type": "string",
                "description": "The host of the synchrony site template."
              },
              "port": {
                "type": "string",
                "description": "The port of the synchrony site template."
              },
              "userName": {
                "type": "string",
                "description": "The username of the synchrony site template."
              },
              "partner": {
                "type": "string",
                "description": "The partner parameter of the synchrony site template."
              },
              "transferProfile": {
                "type": "string",
                "description": "The transfer profile parameter of the synchrony site template."
              },
              "usePasswordExpr": {
                "type": "boolean",
                "description": "Whether to use password expressions."
              },
              "password": {
                "type": "string",
                "description": "Password for login."
              },
              "additionalProperties": {
                "$ref": "#/components/schemas/AdditionalProperties"
              }
            }
          }
        ]
      },
      "AdditionalProperties": {
        "type": "object",
        "properties": {
          "appcycid": {
            "type": "string"
          },
          "appobjid": {
            "type": "string"
          },
          "direction": {
            "type": "string"
          },
          "fName": {
            "type": "string"
          },
          "freeMsg": {
            "type": "string"
          },
          "ida": {
            "type": "string"
          },
          "ipart": {
            "type": "string"
          },
          "maxDate": {
            "type": "string"
          },
          "maxTime": {
            "type": "string"
          },
          "minDate": {
            "type": "string"
          },
          "minTime": {
            "type": "string"
          },
          "nfName": {
            "type": "string"
          },
          "nIdf": {
            "type": "string"
          },
          "pri": {
            "type": "string"
          },
          "rappl": {
            "type": "string"
          },
          "rUser": {
            "type": "string"
          },
          "sappl": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "sUser": {
            "type": "string"
          },
          "trk": {
            "type": "string"
          }
        }
      },
      "CustomSiteTemplate": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseSiteTemplate"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "custom"
              },
              "protocol": {
                "type": "string",
                "default": "custom"
              },
              "customProperties": {
                "$ref": "#/components/schemas/PluggableRouteStep_customProperties"
              }
            }
          }
        ]
      },
      "ConnectDirectSiteTemplate_1": {
        "allOf": [
          {
            "required": [
              "localServerName",
              "localServerPort",
              "recScript",
              "sendScript",
              "userName"
            ]
          },
          {
            "$ref": "#/components/schemas/BaseSiteTemplate"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "cd"
              },
              "protocol": {
                "type": "string",
                "default": "cd"
              },
              "localServerName": {
                "type": "string",
                "description": "The name of the site template."
              },
              "localServerPort": {
                "type": "string",
                "description": "The port of the local Connect:Direct server."
              },
              "submitScriptWithinFile": {
                "type": "boolean",
                "description": "Specify if the script contains unicode characters and has to be submitted within a file.",
                "default": false
              },
              "recScript": {
                "type": "string",
                "description": "Receive script of the Connect:Direct site template."
              },
              "sendScript": {
                "type": "string",
                "description": "Send script of the Connect:Direct site template."
              },
              "userName": {
                "type": "string",
                "description": "The username for the site template."
              },
              "usePassword": {
                "type": "boolean",
                "description": "Whether to use password for login. The field is NOT required only when field \"useCertificate\" is set.",
                "default": false
              },
              "usePasswordExpr": {
                "type": "boolean",
                "description": "Whether to use password expressions.",
                "default": false
              },
              "password": {
                "type": "string",
                "description": "Password for login."
              },
              "useCertificate": {
                "type": "boolean",
                "description": "Specify if the login certificate should bet set. The field is NOT required only when field \"usePassword\" is set.",
                "default": false
              },
              "certificatePlaceholder": {
                "type": "string",
                "description": "Speficy the site login certificate placeholder. This property should be set if 'useCertificate' is 'true'."
              },
              "transferMode": {
                "type": "string",
                "description": "The transfer mode of the site template.",
                "enum": [
                  "Auto detect",
                  "Binary",
                  "Ascii"
                ]
              }
            }
          }
        ]
      },
      "SynchronySiteTemplate_1": {
        "allOf": [
          {
            "required": [
              "host",
              "partner",
              "password",
              "port",
              "transferProfile",
              "usePasswordExpr",
              "userName"
            ]
          },
          {
            "$ref": "#/components/schemas/BaseSiteTemplate"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "synchrony transfer"
              },
              "protocol": {
                "type": "string",
                "default": "synchrony transfer"
              },
              "host": {
                "type": "string",
                "description": "The host of the synchrony site template."
              },
              "port": {
                "type": "string",
                "description": "The port of the synchrony site template."
              },
              "userName": {
                "type": "string",
                "description": "The username of the synchrony site template."
              },
              "partner": {
                "type": "string",
                "description": "The partner parameter of the synchrony site template."
              },
              "transferProfile": {
                "type": "string",
                "description": "The transfer profile parameter of the synchrony site template."
              },
              "usePasswordExpr": {
                "type": "boolean",
                "description": "Whether to use password expressions."
              },
              "password": {
                "type": "string",
                "description": "Password for login."
              },
              "additionalProperties": {
                "$ref": "#/components/schemas/AdditionalProperties"
              }
            }
          }
        ]
      },
      "CustomSiteTemplate_1": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseSiteTemplate"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "custom"
              },
              "protocol": {
                "type": "string",
                "default": "custom"
              },
              "customProperties": {
                "$ref": "#/components/schemas/PluggableRouteStep_customProperties"
              }
            }
          }
        ]
      },
      "TransferProfileResult": {
        "type": "object",
        "properties": {
          "resultSet": {
            "$ref": "#/components/schemas/ResultSet"
          },
          "result": {
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/TransferProfileOld"
                },
                {
                  "$ref": "#/components/schemas/TransferProfile"
                },
                {
                  "$ref": "#/components/schemas/TransferProfileWithAsciiAndEbcdic"
                },
                {
                  "$ref": "#/components/schemas/TransferProfileWithEbcdicPredefinedAndPredefined"
                }
              ]
            }
          }
        }
      },
      "TransferProfileOld": {
        "required": [
          "account",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the transfer profile."
          },
          "name": {
            "type": "string",
            "description": "The name of the transfer profile."
          },
          "account": {
            "type": "string",
            "description": "The account for which the transfer profile is created."
          },
          "default": {
            "type": "boolean",
            "description": "Defines whether this transfer profile is default or not.",
            "default": false
          },
          "sendMapping": {
            "maxLength": 250,
            "type": "string",
            "description": "Determines the files to send. It is either a file name (for Client Initiated Transfers only), a wildcard pattern or an EL expression."
          },
          "receiveMapping": {
            "maxLength": 250,
            "pattern": "^([^\\*\\?])$",
            "type": "string",
            "description": "Determines the name of the received file. It is either a file name or an expression language pattern. The expression must not contain '*' or '?'.",
            "default": "string"
          },
          "fileLabelOption": {
            "type": "string",
            "description": "Determines whether the file name and the path, relative to the account's home folder, are sent. Corresponds to PI 37.",
            "enum": [
              "DONT_SEND",
              "SEND_FILENAME",
              "SEND_FILENAME_AND_PATH"
            ]
          },
          "multiSelect": {
            "type": "boolean",
            "description": "Determines the files to retrieve - all files that match the specified pattern (true) or just the first one (false).",
            "default": false
          },
          "transferMode": {
            "type": "string",
            "description": "The transfer mode used when advancedSettings.enabled is false.",
            "enum": [
              "BINARY",
              "ASCII",
              "EBCDIC",
              "EBCDIC_NATIVE"
            ]
          },
          "recordFormat": {
            "type": "string",
            "description": "Sets the record format of the transferred file. Can be used only when advancedSettings.enabled is false.",
            "enum": [
              "Variable",
              "Fixed"
            ],
            "default": "Variable"
          },
          "recordLength": {
            "maximum": 32767,
            "minimum": 1,
            "type": "integer",
            "description": "Sets the record length of the transferred file. It must be a positive integer. Can be used only when advancedSettings.enabled is false.",
            "format": "int32",
            "default": 2048
          },
          "sendingAcknowledgmentEnabled": {
            "type": "boolean",
            "description": "If set to true, SecureTransport automatically acknowledges the transfer after its processing completes successfully.",
            "default": false
          },
          "paddingStripEnabled": {
            "type": "boolean",
            "description": "Enables/disables padding character removal. Can be used only when advancedSettings.enabled is false.",
            "default": false
          },
          "additionalAttributes": {
            "type": "object",
            "additionalProperties": {
              "maxLength": 4000,
              "minLength": 1,
              "type": "string"
            },
            "description": "Additional attributes which are defined with \"key\": \"value\" pairs. Keys must start with \"userVars.\" prefix, follow the pattern: [a-zA-Z0-9_.]+\nand have length between 10 and 255 characters (including the prefix). Non prefixed part of key should not start with \"userVars.\", since it is\na reserved word. Both key and value cannot be blank.\n"
          }
        }
      },
      "TransferProfile": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TransferProfileOld"
          },
          {
            "type": "object",
            "properties": {
              "advancedSettings": {
                "$ref": "#/components/schemas/AdvancedSettings"
              }
            }
          }
        ]
      },
      "AdvancedSettings": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "Determines whether advancedSettings are enabled.",
            "default": false
          },
          "callerTranscoding": {
            "$ref": "#/components/schemas/CallerTranscoding"
          },
          "receiverTranscoding": {
            "$ref": "#/components/schemas/ReceiverTranscoding"
          }
        }
      },
      "CallerTranscoding": {
        "type": "object",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "binary": "#/components/schemas/CallerBinaryPesitTranscoding",
            "ascii": "#/components/schemas/CallerAsciiNonePesitTranscoding",
            "ascii_predefined": "#/components/schemas/CallerAsciiPredefinedPesitTranscoding",
            "ebcdic": "#/components/schemas/CallerEbcdicNonePesitTranscoding",
            "ebcdic_predefined": "#/components/schemas/CallerEbcdicPredefinedPesitTranscoding"
          }
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/CallerBinaryPesitTranscoding"
          },
          {
            "$ref": "#/components/schemas/CallerAsciiNonePesitTranscoding"
          },
          {
            "$ref": "#/components/schemas/CallerAsciiPredefinedPesitTranscoding"
          },
          {
            "$ref": "#/components/schemas/CallerEbcdicNonePesitTranscoding"
          },
          {
            "$ref": "#/components/schemas/CallerEbcdicPredefinedPesitTranscoding"
          }
        ]
      },
      "CallerBinaryPesitTranscoding": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseCallerPesitTranscoding"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "description": "Determines whether transcoding to be applied. Acts as a discriminator and is case sensitive",
                "default": "binary"
              },
              "localDataCode": {
                "type": "string",
                "description": "Read-only field populated based on \"type\". The data coding of the file on the local file system.",
                "default": "BINARY"
              },
              "networkDataCode": {
                "type": "string",
                "description": "Read-only field populated based on \"type\". Defines the value of PI 16 - the data coding of the network file.",
                "default": "BINARY"
              },
              "outputRecordFormat": {
                "type": "string",
                "description": "Read-only field populated based on \"type\". The record format of the transfer profile. Corresponds to PI 31 code.",
                "enum": [
                  "VARIABLE",
                  "FIXED"
                ],
                "default": "VARIABLE"
              },
              "outputRecordLength": {
                "maximum": 32767,
                "minimum": 1,
                "type": "integer",
                "description": "Read-only field populated based on \"type\". The record length of the sending side of the transfer profile. It should be positive number. Corresponds to PI 32 code.",
                "format": "int32",
                "default": 2048
              }
            }
          }
        ]
      },
      "BaseCallerPesitTranscoding": {
        "properties": {
          "type": {
            "type": "string",
            "description": "Determines whether transcoding to be applied. Acts as a discriminator and is case sensitive",
            "enum": [
              "binary",
              "ascii",
              "ascii_predefined",
              "ascii_custom_table",
              "ebcdic",
              "ebcdic_predefined",
              "ebcdic_custom_table"
            ]
          }
        }
      },
      "CallerAsciiNonePesitTranscoding": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseCallerPesitTranscoding"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "description": "Determines whether transcoding to be applied. Acts as a discriminator and is case sensitive",
                "default": "ascii"
              },
              "localDataCode": {
                "type": "string",
                "description": "Read-only field populated based on \"type\". The data coding of the file on the local file system.",
                "default": "ASCII"
              },
              "networkDataCode": {
                "type": "string",
                "description": "Read-only field populated based on \"type\". Defines the value of PI 16 - the data coding of the network file.",
                "default": "ASCII"
              },
              "outputRecordFormat": {
                "type": "string",
                "description": "The record format of the transfer profile. Corresponds to PI 31 code.",
                "enum": [
                  "VARIABLE",
                  "FIXED"
                ],
                "default": "VARIABLE"
              },
              "outputRecordLength": {
                "maximum": 32767,
                "minimum": 1,
                "type": "integer",
                "description": "The record length of the sending side of the transfer profile. It should be positive number. Corresponds to PI 32 code.",
                "format": "int32",
                "default": 2048
              },
              "paddingCharacter": {
                "type": "string",
                "description": "The padding character can be UNICODE or ASCII and specified by its hexadecimal value."
              }
            }
          }
        ]
      },
      "CallerAsciiPredefinedPesitTranscoding": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseCallerPesitTranscoding"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "description": "Determines whether transcoding to be applied. Acts as a discriminator and is case sensitive",
                "default": "ascii_predefined"
              },
              "localDataCode": {
                "type": "string",
                "description": "Read-only field populated based on \"type\". The data coding of the file on the local file system.",
                "default": "ASCII"
              },
              "transcoding": {
                "type": "string",
                "description": "Read-only field displayed only when predefined \"type\" is used.",
                "default": "PREDEFINED"
              },
              "networkDataCode": {
                "type": "string",
                "description": "Defines the value of PI 16 - the data coding of the network file.",
                "enum": [
                  "ASCII",
                  "EBCDIC"
                ]
              },
              "sourceEncodingScheme": {
                "type": "string",
                "description": "The encoding scheme of the source file. Can be one of the system supported charsets.",
                "default": "UTF-8"
              },
              "outputEncodingScheme": {
                "type": "string",
                "description": "The encoding scheme of the output file. Can be one of the system supported charsets.",
                "default": "UTF-8"
              },
              "outputRecordFormat": {
                "type": "string",
                "description": "The record format of the transfer profile. Corresponds to PI 31 code.",
                "enum": [
                  "VARIABLE",
                  "FIXED"
                ],
                "default": "VARIABLE"
              },
              "outputRecordLength": {
                "maximum": 32767,
                "minimum": 1,
                "type": "integer",
                "description": "The record length of the sending side of the transfer profile. It should be positive number. Corresponds to PI 32 code.",
                "format": "int32",
                "default": 2048
              },
              "paddingCharacter": {
                "type": "string",
                "description": "The padding character can be UNICODE or ASCII and specified by its hexadecimal value."
              }
            }
          }
        ]
      },
      "CallerEbcdicNonePesitTranscoding": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseCallerPesitTranscoding"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "description": "Determines whether transcoding to be applied. Acts as a discriminator and is case sensitive",
                "default": "ebcdic"
              },
              "localDataCode": {
                "type": "string",
                "description": "Read-only field populated based on \"type\". The data coding of the file on the local file system.",
                "default": "EBCDIC"
              },
              "networkDataCode": {
                "type": "string",
                "description": "Read-only field populated based on \"type\". Defines the value of PI 16 - the data coding of the network file.",
                "default": "EBCDIC"
              },
              "outputRecordFormat": {
                "type": "string",
                "description": "The record format of the transfer profile. Corresponds to PI 31 code.",
                "enum": [
                  "VARIABLE",
                  "FIXED"
                ],
                "default": "VARIABLE"
              },
              "outputRecordLength": {
                "maximum": 32767,
                "minimum": 1,
                "type": "integer",
                "description": "The record length of the sending side of the transfer profile. It should be positive number. Corresponds to PI 32 code.",
                "format": "int32",
                "default": 2048
              },
              "paddingCharacter": {
                "type": "string",
                "description": "The padding character can be UNICODE or ASCII and specified by its hexadecimal value."
              }
            }
          }
        ]
      },
      "CallerEbcdicPredefinedPesitTranscoding": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseCallerPesitTranscoding"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "description": "Determines whether transcoding to be applied. Acts as a discriminator and is case sensitive",
                "default": "ebcdic_predefined"
              },
              "localDataCode": {
                "type": "string",
                "description": "Read-only field populated based on \"type\". The data coding of the file on the local file system.",
                "default": "EBCDIC"
              },
              "transcoding": {
                "type": "string",
                "description": "Read-only field displayed only when predefined \"type\" is used.",
                "default": "PREDEFINED"
              },
              "networkDataCode": {
                "type": "string",
                "description": "Defines the value of PI 16 - the data coding of the network file.",
                "enum": [
                  "EBCDIC",
                  "ASCII"
                ]
              },
              "sourceEncodingScheme": {
                "type": "string",
                "description": "The encoding scheme of the source file. Can be one of the system supported charsets.",
                "default": "IBM1047"
              },
              "outputEncodingScheme": {
                "type": "string",
                "description": "The encoding scheme of the output file. Can be one of the system supported charsets.",
                "default": "IBM1047"
              },
              "outputRecordFormat": {
                "type": "string",
                "description": "The record format of the transfer profile. Corresponds to PI 31 code.",
                "enum": [
                  "VARIABLE",
                  "FIXED"
                ],
                "default": "VARIABLE"
              },
              "outputRecordLength": {
                "maximum": 32767,
                "minimum": 1,
                "type": "integer",
                "description": "The record length of the sending side of the transfer profile. It should be positive number. Corresponds to PI 32 code.",
                "format": "int32",
                "default": 2048
              },
              "paddingCharacter": {
                "type": "string",
                "description": "The padding character can be UNICODE or ASCII and specified by its hexadecimal value."
              }
            }
          }
        ]
      },
      "ReceiverTranscoding": {
        "type": "object",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "binary": "#/components/schemas/ReceiverBinaryPesitTranscoding",
            "ascii": "#/components/schemas/ReceiverAsciiPesitTranscoding",
            "ebcdic": "#/components/schemas/ReceiverEbcdicPesitTranscoding",
            "predefined": "#/components/schemas/ReceiverPredefinedPesitTranscoding"
          }
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/ReceiverBinaryPesitTranscoding"
          },
          {
            "$ref": "#/components/schemas/ReceiverAsciiPesitTranscoding"
          },
          {
            "$ref": "#/components/schemas/ReceiverEbcdicPesitTranscoding"
          },
          {
            "$ref": "#/components/schemas/ReceiverPredefinedPesitTranscoding"
          }
        ]
      },
      "ReceiverBinaryPesitTranscoding": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseReceiverPesitTranscoding"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "description": "Determines whether and what transcoding to be applied. Acts as a discriminator and is case sensitive.",
                "default": "binary"
              },
              "localDataCode": {
                "type": "string",
                "description": "Read-only field populated based on \"type\". The data coding of the file on the local file system.",
                "default": "BINARY"
              }
            }
          }
        ]
      },
      "BaseReceiverPesitTranscoding": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Determines whether and what transcoding to be applied. Acts as a discriminator and is case sensitive.",
            "enum": [
              "binary",
              "ascii",
              "ebcdic",
              "predefined",
              "custom_tablee"
            ]
          }
        }
      },
      "ReceiverAsciiPesitTranscoding": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseReceiverPesitTranscoding"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "description": "Determines whether and what transcoding to be applied. Acts as a discriminator and is case sensitive.",
                "default": "ascii"
              },
              "localDataCode": {
                "type": "string",
                "description": "Read-only field populated based on \"type\". The data coding of the file on the local file system.",
                "default": "ASCII"
              },
              "outputRecordFormat": {
                "type": "string",
                "description": "The record format of the transfer profile.",
                "enum": [
                  "VARIABLE",
                  "FIXED"
                ],
                "default": "VARIABLE"
              },
              "outputRecordLength": {
                "maximum": 32767,
                "minimum": 1,
                "type": "integer",
                "description": "The record length of the receiving side of the transfer profile. It should be positive number.",
                "format": "int32",
                "default": 2048
              },
              "paddingCharacter": {
                "type": "string",
                "description": "The padding character can be UNICODE or ASCII and specified by its hexadecimal value."
              },
              "lineEndingFormat": {
                "type": "string",
                "description": "Line ending of the receiving side of the transfer profile.",
                "enum": [
                  "DEFAULT",
                  "WINDOWS",
                  "UNIX"
                ],
                "default": "DEFAULT"
              }
            }
          }
        ]
      },
      "ReceiverEbcdicPesitTranscoding": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseReceiverPesitTranscoding"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "description": "Determines whether and what transcoding to be applied. Acts as a discriminator and is case sensitive.",
                "default": "ebcdic"
              },
              "localDataCode": {
                "type": "string",
                "description": "Read-only field populated based on \"type\". The data coding of the file on the local file system.",
                "default": "EBCDIC"
              },
              "outputRecordFormat": {
                "type": "string",
                "description": "The record format of the transfer profile.",
                "enum": [
                  "VARIABLE",
                  "FIXED"
                ],
                "default": "VARIABLE"
              },
              "outputRecordLength": {
                "maximum": 32767,
                "minimum": 1,
                "type": "integer",
                "description": "The record length of the receiving side of the transfer profile. It should be positive number.",
                "format": "int32",
                "default": 2048
              },
              "paddingCharacter": {
                "type": "string",
                "description": "The padding character can be UNICODE or ASCII and specified by its hexadecimal value."
              },
              "lineEndingFormat": {
                "type": "string",
                "description": "Line ending of the receiving side of the transfer profile.",
                "enum": [
                  "DEFAULT",
                  "WINDOWS",
                  "UNIX"
                ],
                "default": "DEFAULT"
              }
            }
          }
        ]
      },
      "ReceiverPredefinedPesitTranscoding": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseReceiverPesitTranscoding"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "description": "Determines whether and what transcoding to be applied. Acts as a discriminator and is case sensitive.",
                "default": "predefined"
              },
              "transcoding": {
                "type": "string",
                "description": "Read-only field displayed only when predefined \"type\" is used.",
                "default": "PREDEFINED"
              },
              "sourceEncodingScheme": {
                "type": "string",
                "description": "The encoding scheme of the source file. Can be one of the system supported charsets.",
                "default": "UTF-8"
              },
              "outputEncodingScheme": {
                "type": "string",
                "description": "The encoding scheme of the output file. Can be one of the system supported charsets.",
                "default": "UTF-8"
              },
              "outputRecordFormat": {
                "type": "string",
                "description": "The record format of the transfer profile.",
                "enum": [
                  "VARIABLE",
                  "FIXED"
                ],
                "default": "VARIABLE"
              },
              "outputRecordLength": {
                "maximum": 32767,
                "minimum": 1,
                "type": "integer",
                "description": "The record length of the receiving side of the transfer profile. It should be positive number.",
                "format": "int32",
                "default": 2048
              },
              "paddingCharacter": {
                "type": "string",
                "description": "The padding character can be UNICODE or ASCII and specified by its hexadecimal value."
              },
              "lineEndingFormat": {
                "type": "string",
                "description": "Line ending of the receiving side of the transfer profile.",
                "enum": [
                  "DEFAULT",
                  "WINDOWS",
                  "UNIX"
                ],
                "default": "DEFAULT"
              }
            }
          }
        ]
      },
      "TransferProfileWithAsciiAndEbcdic": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TransferProfileOld"
          },
          {
            "type": "object",
            "properties": {
              "advancedSettings": {
                "$ref": "#/components/schemas/AdvancedSettingsAsciiAndEbcdic"
              }
            }
          }
        ]
      },
      "AdvancedSettingsAsciiAndEbcdic": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "Determines whether advancedSettings are enabled.",
            "default": true
          },
          "callerTranscoding": {
            "$ref": "#/components/schemas/CallerAsciiNonePesitTranscoding"
          },
          "receiverTranscoding": {
            "$ref": "#/components/schemas/ReceiverEbcdicPesitTranscoding"
          }
        }
      },
      "TransferProfileWithEbcdicPredefinedAndPredefined": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TransferProfileOld"
          },
          {
            "type": "object",
            "properties": {
              "advancedSettings": {
                "$ref": "#/components/schemas/AdvancedSettingsEbcdicPredefinedAndPredefined"
              }
            }
          }
        ]
      },
      "AdvancedSettingsEbcdicPredefinedAndPredefined": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "Determines whether advancedSettings are enabled.",
            "default": true
          },
          "callerTranscoding": {
            "$ref": "#/components/schemas/CallerEbcdicPredefinedPesitTranscoding"
          },
          "receiverTranscoding": {
            "$ref": "#/components/schemas/ReceiverPredefinedPesitTranscoding"
          }
        }
      },
      "AdminTransferPull": {
        "required": [
          "accountName",
          "destinationDirectory",
          "site"
        ],
        "type": "object",
        "properties": {
          "accountName": {
            "type": "string",
            "description": "The account name"
          },
          "site": {
            "type": "string",
            "description": "The site name"
          },
          "destinationDirectory": {
            "type": "string",
            "description": "The destination directory"
          },
          "transferProfile": {
            "type": "string",
            "description": "The transfer profile name. Note: **This attribute is required in PeSIT protocol transfers only**.\n"
          },
          "operationIndex": {
            "type": "string"
          },
          "sentinelCycleId": {
            "type": "string"
          },
          "sentinelTrackingObject": {
            "type": "string"
          },
          "maxParallelSitPulls": {
            "type": "integer"
          },
          "customProperties": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Custom properties which are defined with \"key\": \"value\" pairs.\n"
          }
        }
      },
      "TransferResult": {
        "required": [
          "message"
        ],
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "The transfer result message"
          },
          "link": {
            "type": "string",
            "description": "The transfer log link."
          }
        }
      },
      "SubscriptionResult": {
        "type": "object",
        "properties": {
          "resultSet": {
            "$ref": "#/components/schemas/ResultSet"
          },
          "result": {
            "type": "array",
            "items": {
              "discriminator": {
                "propertyName": "type",
                "mapping": {
                  "AdvancedRouting": "subscription.yaml#/AdvancedRoutingSubscription",
                  "Basic": "subscription.yaml#/BasicSubscription",
                  "HumanSystem": "subscription.yaml#/HumanSystemSubscription",
                  "MBFT": "subscription.yaml#/MBFTSubscription",
                  "SharedFolder": "subscription.yaml#/SharedFolderSubscription",
                  "SiteMailbox": "subscription.yaml#/SiteMailboxSubscription",
                  "StandardRouter": "subscription.yaml#/StandardRouterSubscription",
                  "SynchronyTransfer": "subscription.yaml#/SynchronyTransferSubscription"
                }
              },
              "anyOf": [
                {
                  "$ref": "#/components/schemas/AdvancedRoutingSubscription"
                },
                {
                  "$ref": "#/components/schemas/BasicSubscription"
                },
                {
                  "$ref": "#/components/schemas/HumanSystemSubscription"
                },
                {
                  "$ref": "#/components/schemas/MBFTSubscription"
                },
                {
                  "$ref": "#/components/schemas/SharedFolderSubscription"
                },
                {
                  "$ref": "#/components/schemas/SiteMailboxSubscription"
                },
                {
                  "$ref": "#/components/schemas/StandardRouterSubscription"
                },
                {
                  "$ref": "#/components/schemas/SynchronyTransferSubscription"
                }
              ]
            }
          }
        }
      },
      "AdvancedRoutingSubscription": {
        "description": "A representation of an Advanced Routing subscription.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Subscription"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "AdvancedRouting"
              },
              "postClientDownloads": {
                "$ref": "#/components/schemas/PostClientDownloads"
              },
              "postProcessingActions": {
                "$ref": "#/components/schemas/PostProcessingActions"
              },
              "postTransmissionActions": {
                "$ref": "#/components/schemas/PostTransmissionActionsAdvancedRouting"
              }
            }
          }
        ]
      },
      "Subscription": {
        "required": [
          "account",
          "application",
          "folder",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the subscription"
          },
          "type": {
            "type": "string",
            "description": "The type of the application. Acts as a discriminator.\n",
            "enum": [
              "AdvancedRouting",
              "Basic",
              "HumanSystem",
              "MBFT",
              "SharedFolder",
              "SiteMailbox",
              "StandardRouter",
              "SynchronyTransfer"
            ]
          },
          "folder": {
            "type": "string",
            "description": "The folder of the subscription"
          },
          "account": {
            "type": "string",
            "description": "The account of the subscription"
          },
          "application": {
            "type": "string",
            "description": "The application of the subscription"
          },
          "maxParallelSitPulls": {
            "type": "integer",
            "description": "Custom attribute under which we store the option for maximum sit pulls to be executed simultaneously. Negative value or 0 - no limit, positive value 4 - limits simultaneously"
          },
          "flowAttrsMergeMode": {
            "type": "string",
            "description": "The flow merge mode",
            "enum": [
              "preserve",
              "overwrite",
              "append"
            ]
          },
          "folderMonitorScheduleCheck": {
            "type": "string",
            "description": "Whether a folder monitor subscription is scheduled."
          },
          "flowName": {
            "type": "string",
            "description": "Name of the CG flow"
          },
          "scheduledFolderMonitor": {
            "type": "string",
            "description": "Specify if this subscription is targeted for a scheduled folder monitor."
          },
          "subscriptionEncryptMode": {
            "type": "string",
            "description": "Encryption that will be used for subscription folder. Accepting one of default, enabled, disabled."
          },
          "fileRetentionPeriod": {
            "type": "integer",
            "description": "Specify the retention period of the pulled files. Must be non-negative integer between 0 and 36500.",
            "default": 0
          },
          "flowAttributes": {
            "type": "object",
            "additionalProperties": {
              "maxLength": 4000,
              "minLength": 1,
              "type": "string"
            },
            "description": "Flow attributes which are defined with \"key\": \"value\" pairs. Keys must start with \"userVars.\" prefix, follow the pattern: [a-zA-Z0-9_.]+\nand have length between 10 and 255 characters (including the prefix). Non prefixed part of key should not start with \"userVars.\", since it is\na reserved word. Both key and value cannot be blank.\n"
          },
          "schedules": {
            "type": "array",
            "description": "Subscription's schedules.",
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/OnceSchedule"
                },
                {
                  "$ref": "#/components/schemas/HourlySchedule"
                },
                {
                  "$ref": "#/components/schemas/DailySchedule"
                },
                {
                  "$ref": "#/components/schemas/WeeklySchedule"
                },
                {
                  "$ref": "#/components/schemas/MonthlySchedule"
                },
                {
                  "$ref": "#/components/schemas/YearlySchedule"
                },
                {
                  "$ref": "#/components/schemas/CronExpressionSchedule"
                }
              ]
            }
          },
          "transferConfigurations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransferConfiguration"
            }
          }
        },
        "discriminator": {
          "propertyName": "type"
        }
      },
      "TransferConfiguration": {
        "required": [
          "direction",
          "tag"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the transfer configuration"
          },
          "tag": {
            "type": "string",
            "description": "The tag of the transfer configuration",
            "enum": [
              "PARTNER-IN",
              "PARTNER-OUT"
            ]
          },
          "outbound": {
            "type": "boolean",
            "description": "The direction of the transfer configuration. It should be false (from account to application) or true (from application to account)",
            "default": false
          },
          "site": {
            "type": "string",
            "description": "The transfer site"
          },
          "transferProfile": {
            "type": "string",
            "description": "The transfer profile of the transfer configuration"
          },
          "dataTransformations": {
            "type": "array",
            "description": "The data transformations of the transfer configuration.",
            "items": {
              "$ref": "#/components/schemas/DataTransformation"
            }
          }
        }
      },
      "DataTransformation": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the data transformation"
          },
          "type": {
            "type": "string",
            "description": "The type of the data transformation."
          },
          "asciiArmor": {
            "type": "boolean",
            "description": "Specify if SecureTransport uses ASCII armor encoding. ASCII armor refers to using binary-to-text encoding for plain text data."
          },
          "compressionAlgorithm": {
            "type": "integer",
            "description": "Specify what type of compression is used. Possible values are -1 (Preffered), 0 (No compression), 1 (ZIP), 2 (ZLIB) or 3 (BZIP2). Preferred compression methods and order of preference are determined by examining the recipient's PGP key. If the data compression method you choose is not among the recipient's preferred methods, it is possible that the recipient will not be able to access the data.",
            "format": "int32"
          },
          "compressionLevel": {
            "type": "integer",
            "description": "Specify the compression level. Possible values are 2 (Fast), 5 (Normal), 7 (Good) or 9 (Best)."
          },
          "encryptEnabled": {
            "type": "boolean",
            "description": "Specify if the file should be encrypted using PGP key.",
            "default": false
          },
          "localSignCertificate": {
            "type": "string",
            "description": "Which PGP key should be used for signing."
          },
          "originalNameExpression": {
            "type": "string",
            "description": "Specify if the original encrypted file is saved to a different name, location, or both. You can use a file name expression."
          },
          "originalNameExpressionEnabled": {
            "type": "boolean",
            "description": "Specify if the original encrypted file is saved.",
            "default": false
          },
          "partnerEncryptCertificate": {
            "type": "string",
            "description": "Which PGP key should be used for encryption."
          },
          "requireEncryption": {
            "type": "boolean",
            "description": "Specify if the file is required to be encrypted or the transfer will fail."
          },
          "requireSignature": {
            "type": "boolean",
            "description": "Specify if the file is required to contain a trusted signature or the transfer will fail."
          },
          "signingEnabled": {
            "type": "boolean",
            "description": "Specify if the file should be signed using PGP key.",
            "default": false
          },
          "transformedNameExpression": {
            "type": "string",
            "description": "Specify if the decrypted file is saved to a different name, location or both. You can use a file name expression."
          },
          "transformedNameExpressionEnabled": {
            "type": "boolean",
            "description": "Specify if the file should be decrypted.",
            "default": false
          }
        }
      },
      "PostClientDownloads": {
        "type": "object",
        "properties": {
          "postClientDownloadActionType": {
            "type": "string",
            "description": "Specify if Post Client Download Actions will be applied to each file successfully downloaded from the subscription folder. It can be 'DELETE' or no property at all."
          },
          "postClientDownloadActionTypeFailure": {
            "type": "string",
            "description": "Advanced Routing setting for post client download action type option on failure."
          },
          "postClientDownloadTypeOnPermfailDoDelete": {
            "type": "boolean",
            "description": "Defines whether to delete the file in case of a permanent failure of a post client download.",
            "default": false
          },
          "postClientDownloadTypeOnSuccessDoAdvancedRouting": {
            "type": "boolean",
            "description": "Defines whether to trigger advanced routing in case of a successful post client download.",
            "default": false
          },
          "postClientDownloadTypeOnSuccessDoAdvancedRoutingProcessFile": {
            "type": "boolean",
            "description": "Defines whether to trigger advanced routing with file copy in case of a successful post client download.",
            "default": false
          },
          "postClientDownloadTypeOnFailDoAdvancedRouting": {
            "type": "boolean",
            "description": "Defines whether to trigger advanced routing in case of a failed post client download.",
            "default": false
          },
          "postClientDownloadTypeOnFailDoAdvancedRoutingProcessFailedFile": {
            "type": "boolean",
            "description": "Defines whether to trigger advanced routing with file copy in case of a failed post client download.",
            "default": false
          }
        }
      },
      "PostProcessingActions": {
        "type": "object",
        "properties": {
          "ppaOnFailInDoDelete": {
            "type": "boolean",
            "description": "Defines whether to delete the file on failure after the transmission. This action is applied to files arrived to this folder and processed by a route package.",
            "default": false
          },
          "ppaOnFailInDoMove": {
            "type": "string",
            "description": "Specify a value to rename the file after transmission or move it to a different folder on failure. An expression language can be used to specify a file name/folder. This action is applied to files arrived to this folder and processed by a route package."
          },
          "ppaOnSuccessInDoDelete": {
            "type": "boolean",
            "description": "Defines whether to delete the file on success after the transmission. This action is applied to files arrived to this folder and processed by a route package.",
            "default": false
          },
          "ppaOnSuccessInDoMove": {
            "type": "string",
            "description": "Specify a value to rename the file after transmission or move it to a different folder on success. An expression language can be used to specify a file name/folder. This action is applied to files arrived to this folder and processed by a route package."
          }
        }
      },
      "PostTransmissionActionsAdvancedRouting": {
        "type": "object",
        "properties": {
          "moveOverwrite": {
            "type": "boolean",
            "description": "Delete the target file and repeat the rename operation.",
            "default": false
          },
          "ptaOnTempfailInDoDelete": {
            "type": "boolean",
            "description": "Defines whether to delete the file on failure after the transmission.",
            "default": false
          },
          "ptaOnTempfailInDoMove": {
            "type": "string",
            "description": "Specify a value to rename the file after transmission or move it to a different folder on temporary failure. An expression language can be used to specify a file name/folder."
          },
          "ptaOnPermfailInDoDelete": {
            "type": "boolean",
            "description": "Defines whether to delete the file on failure after the transmission.",
            "default": false
          },
          "ptaOnPermfailInDoMove": {
            "type": "string",
            "description": "Specify a value to rename the file after transmission or move it to a different folder on failure. An expression language can be used to specify a file name/folder."
          },
          "ptaOnPermfailDoAdvancedRouting": {
            "type": "boolean",
            "description": "Defines whether to trigger advanced routing in case of a PTA permanent failure.",
            "default": false
          },
          "ptaOnPermfailInDoAdvancedRoutingFailedFile": {
            "type": "boolean",
            "description": "Defines whether to trigger advanced routing with file copy in case of a PTA permanent failure.",
            "default": false
          },
          "ptaOnPermfailInDoAdvancedRoutingWildcardPull": {
            "type": "boolean",
            "description": "Defines whether to trigger wildcard pull with advanced routing in case of a PTA permanent failure.",
            "default": false
          },
          "ptaOnTempfailInDoAdvancedRouting": {
            "type": "boolean",
            "description": "Defines whether to trigger advanced routing in case of a PTA temporary failure.",
            "default": false
          },
          "ptaOnTempfailInDoAdvancedRoutingProcessFailedFile": {
            "type": "boolean",
            "description": "Defines whether to trigger advanced routing with file copy in case of a PTA permanent failure.",
            "default": false
          },
          "ptaOnTempfailInDoAdvancedRoutingWildcardPull": {
            "type": "boolean",
            "description": "Defines whether to trigger wildcard pull with advanced routing in case of a PTA temporary failure.",
            "default": false
          },
          "ptaOnSuccessDoInAdvancedRoutingWildcardPull": {
            "type": "boolean",
            "description": "Defines whether to trigger wildcard pull with advanced routing in case of a PTA success.",
            "default": false
          },
          "ptaOnSuccessInDoDelete": {
            "type": "boolean",
            "description": "Defines whether to delete the source file on success after the transmission.",
            "default": false
          },
          "ptaOnSuccessInDoMove": {
            "type": "string",
            "description": "Specify a value to rename the file after transmission or move it to a different folder on success. An expression language can be used to specify a file name/folder."
          },
          "ptaOnSuccessInDoMoveOverwrite": {
            "type": "boolean",
            "description": "When the \"Allow Overwrite Existing File\" option is enabled and the rename operation fails because the target file exists, ST will delete the target file and repeat the rename operation.",
            "default": false
          },
          "ptaOnPermfailOutDoDelete": {
            "type": "boolean",
            "description": "Defines whether to delete the file on failure after the transmission.",
            "default": false
          },
          "ptaOnPermfailOutDoMove": {
            "type": "string",
            "description": "Specify a value to rename the file after transmission or move it to a different folder on permanent failure. An expression language can be used to specify a file name/folder."
          },
          "ptaOnSuccessOutDoDelete": {
            "type": "boolean",
            "description": "Defines whether to delete the file on success after the transmission.",
            "default": false
          },
          "ptaOnSuccessOutDoMove": {
            "type": "string",
            "description": "Specify a value to rename the file after transmission or move it to a different folder on success. An expression language can be used to specify a file name/folder."
          },
          "ptaOnSuccessOutDoMoveOverwrite": {
            "type": "boolean",
            "description": "When the \"Allow Overwrite Existing File\" option is enabled and the rename operation fails because the target file exists, ST will delete the target file and repeat the rename operation.",
            "default": false
          },
          "ptaOnTempfailOutDoDelete": {
            "type": "boolean",
            "description": "Defines whether to delete the file on failure after the transmission.",
            "default": false
          },
          "ptaOnTempfailOutDoMove": {
            "type": "string",
            "description": "Specify a value to rename the file after transmission or move it to a different folder on failure. An expression language can be used to specify a file name/folder."
          },
          "triggerOnConditionEnabled": {
            "type": "boolean",
            "description": "If checked, processing of files in the subscription folder will be triggered upon a specific condition.",
            "default": false
          },
          "triggerOnConditionExpression": {
            "type": "string",
            "description": "Specify the condition on which to trigger file processing. An expression language can be used."
          },
          "triggerOnSuccessfulWildcardPull": {
            "type": "boolean",
            "description": "Setting for trigger on successful wildcard pull.",
            "default": false
          },
          "submitFilterType": {
            "type": "string",
            "description": "Specify the submit filter type. It could be 'FILENAME_PATTERN' or 'TRIGGER_FILE_CONTENT'.\nIf 'FILENAME_PATTERN' is selected and 'submitFilenamePatternExpression' is with value '*' all files will be submitted for processing in the subscription folder.\n\nIf 'FILENAME_PATTERN' is selected and 'submitFilenamePatternExpression' is with some filename pattern, only files matching specific filename pattern will be submitted for processing.\n\nIf 'TRIGGER_FILE_CONTENT' is selected, data file names will be read from trigger file content. Each file name should be on new line. The whitespace characters before and after the file names are discarded. Also lines containing only whitespace characters are not considered as files.Trigger file format:file1.txt, file2.txt, file3.png\n"
          },
          "submitFilenamePatternExpression": {
            "type": "string",
            "description": "Specify the file name pattern. An expression language can be used."
          },
          "triggerFileOption": {
            "type": "string",
            "description": "Specify the trigger file option. Possible values: 'fail', 'continue' or 'retry'. This property controls the behaviour of AR processing in case not all files listed in the trigger file are available.\n'fail' - AR processing should fail if any of the listed files is missing. This is the default behaviour.\n'continue' - AR processing should skip the missing files and continue with the existing ones.\n'retry' - if any of the files listed in the trigger file are not available, AR processing will be retried. The retry behaviour could be further configured with the 'triggerFileRetriesNumber' and 'triggerFileRetryDelay' properties.\n"
          },
          "triggerFileRetriesNumber": {
            "type": "integer",
            "description": "Specify the trigger file maximum retries number. \n\nThis option is available when 'triggerFileOption' option is set to 'retry'.    \n"
          },
          "triggerFileRetryDelay": {
            "type": "integer",
            "description": "Specify the interval in seconds, when next trigger file retry will be executed.\n\nThis option is available when 'triggerFileOption' option is set to 'retry'.\n"
          }
        }
      },
      "BasicSubscription": {
        "description": "A representation of an Basic subscription.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Subscription"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "Basic"
              },
              "templateAdvancedExpression": {
                "type": "boolean",
                "description": "Specify if advanced expressions section be displayed in Admin UI Subscriptions page.",
                "default": false
              },
              "postTransmissionActions": {
                "$ref": "#/components/schemas/PostTransmissionActionsALL"
              }
            }
          }
        ]
      },
      "PostTransmissionActionsALL": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PostTransmissionActionsIN"
          },
          {
            "$ref": "#/components/schemas/PostTransmissionActionsOUT"
          },
          {
            "type": "object"
          }
        ]
      },
      "PostTransmissionActionsIN": {
        "type": "object",
        "properties": {
          "ptaOnTempfailInDoDelete": {
            "type": "boolean",
            "description": "Defines whether to delete the file on failure after the transmission.",
            "default": false
          },
          "ptaOnTempfailInDoMove": {
            "type": "string",
            "description": "Specify a value to rename the file after transmission or move it to a different folder on temporary failure. An expression language can be used to specify a file name/folder."
          },
          "ptaOnPermfailInDoDelete": {
            "type": "boolean",
            "description": "Defines whether to delete the file on failure after the transmission.",
            "default": false
          },
          "ptaOnPermfailInDoMove": {
            "type": "string",
            "description": "Specify a value to rename the file after transmission or move it to a different folder on failure. An expression language can be used to specify a file name/folder."
          },
          "ptaOnSuccessInDoMove": {
            "type": "string",
            "description": "Specify a value to rename the file after transmission or move it to a different folder on success. An expression language can be used to specify a file name/folder."
          },
          "ptaOnSuccessInDoDelete": {
            "type": "boolean",
            "description": "Defines whether to delete the source file on success after the transmission.",
            "default": false
          }
        }
      },
      "PostTransmissionActionsOUT": {
        "type": "object",
        "properties": {
          "ptaOnPermfailOutDoDelete": {
            "type": "boolean",
            "description": "Defines whether to delete the file on failure after the transmission.",
            "default": false
          },
          "ptaOnPermfailOutDoMove": {
            "type": "string",
            "description": "Specify a value to rename the file after transmission or move it to a different folder on failure. An expression language can be used to specify a file name/folder."
          },
          "ptaOnSuccessOutDoDelete": {
            "type": "boolean",
            "description": "Defines whether to delete the file on success after the transmission.",
            "default": false
          },
          "ptaOnSuccessOutDoMove": {
            "type": "string",
            "description": "Specify a value to rename the file after transmission or move it to a different folder on success. An expression language can be used to specify a file name/folder."
          }
        },
        "description": "A representation of post transmission actions."
      },
      "HumanSystemSubscription": {
        "description": "A representation of an Human To System subscription.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Subscription"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "HumanSystem"
              },
              "rules": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PackageRoutingRule"
                }
              }
            }
          }
        ]
      },
      "PackageRoutingRule": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "default": false
          },
          "recipientPattern": {
            "type": "string"
          },
          "fileFilterPattern": {
            "type": "string"
          },
          "targetFolder": {
            "type": "string"
          }
        },
        "description": "A representation of Package Routing Rule."
      },
      "MBFTSubscription": {
        "description": "A representation of a File Transfer via File Services subscription.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Subscription"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "MBFT"
              }
            }
          }
        ]
      },
      "SharedFolderSubscription": {
        "description": "A representation of an Shared Folder application subscription.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Subscription"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "SharedFolder"
              },
              "templateAdvancedExpression": {
                "type": "boolean",
                "description": "Specify if advanced expressions section be displayed in Admin UI Subscriptions page.",
                "default": false
              },
              "postTransmissionActions": {
                "$ref": "#/components/schemas/PostTransmissionActionsIN"
              }
            }
          }
        ]
      },
      "SiteMailboxSubscription": {
        "description": "A representation of an Site Mailbox subscription.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Subscription"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "SiteMailbox"
              },
              "templateAdvancedExpression": {
                "type": "boolean",
                "description": "Specify if advanced expressions section be displayed in Admin UI Subscriptions page.",
                "default": false
              },
              "postTransmissionActions": {
                "$ref": "#/components/schemas/PostTransmissionActionsALL"
              }
            }
          }
        ]
      },
      "StandardRouterSubscription": {
        "description": "A representation of an Standard Router subscription.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Subscription"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "StandardRouter"
              },
              "subscriberID": {
                "type": "string",
                "description": "The subscriber ID."
              },
              "postTransmissionActions": {
                "$ref": "#/components/schemas/PostTransmissionActionsALL"
              }
            }
          }
        ]
      },
      "SynchronyTransferSubscription": {
        "description": "A representation of an Axway Transfer CFT subscription.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Subscription"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "SynchronyTransfer"
              }
            }
          }
        ]
      },
      "PullHistoryDetailsResult": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Message for the performed operation of the clearance of pulled files history."
          },
          "isSuccessful": {
            "type": "boolean",
            "description": "Whether or not the operation was successful.",
            "default": false
          }
        }
      },
      "Accepted": {
        "description": "Accepted - the request has been successfully submitted for asynchronous processing."
      },
      "VersionInformation": {
        "type": "object",
        "properties": {
          "serverType": {
            "type": "string",
            "description": "The type of the ST server",
            "enum": [
              "ST-Core-Server",
              "ST-Edge"
            ]
          },
          "version": {
            "type": "string",
            "description": "The ST version"
          },
          "build": {
            "type": "string",
            "description": "The ST build number"
          },
          "os": {
            "type": "string",
            "description": "The server operating system"
          },
          "dockerMode": {
            "type": "string",
            "description": "Whether the installation is in dockerMode"
          },
          "updateLevel": {
            "type": "string",
            "description": "The ST update level"
          },
          "updateHistory": {
            "type": "array",
            "description": "The full ST update history",
            "items": {
              "type": "string"
            }
          },
          "spiVersions": {
            "type": "array",
            "description": "The supported SPI versions",
            "items": {
              "$ref": "#/components/schemas/VersionInformation_spiVersions"
            }
          },
          "root": {
            "type": "boolean",
            "description": "Whether the user running SecureTransport is root or not",
            "default": false
          },
          "other": {
            "type": "array",
            "description": "Other ST information.",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "GlobalAddressBookSourceResult": {
        "type": "object",
        "properties": {
          "resultSet": {
            "$ref": "#/components/schemas/ResultSet"
          },
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AddressBookSource"
            }
          }
        }
      },
      "AddressBookSource": {
        "required": [
          "enabled",
          "id",
          "name",
          "parentGroup",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "LOCAL",
              "LDAP",
              "CUSTOM"
            ]
          },
          "parentGroup": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean",
            "default": false
          },
          "customProperties": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "description": "Address book source object."
      },
      "UserClassResult": {
        "type": "object",
        "properties": {
          "resultSet": {
            "$ref": "#/components/schemas/ResultSet"
          },
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserClass"
            }
          }
        }
      },
      "UserClass": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the user class.",
            "readOnly": true
          },
          "className": {
            "maxLength": 32,
            "type": "string",
            "description": "User class name."
          },
          "userType": {
            "type": "string",
            "description": "User class type.",
            "enum": [
              "*",
              "real",
              "virtual"
            ]
          },
          "order": {
            "type": "integer",
            "description": "The order in which user class is saved in database"
          },
          "enabled": {
            "type": "boolean",
            "description": "Is user class currently enabled.",
            "default": false
          },
          "userName": {
            "maxLength": 255,
            "type": "string",
            "description": "User class username."
          },
          "group": {
            "maxLength": 255,
            "type": "string",
            "description": "Group of user class"
          },
          "address": {
            "maxLength": 255,
            "type": "string",
            "description": "User class host."
          },
          "expression": {
            "maxLength": 1024,
            "type": "string",
            "description": "User class expression."
          }
        }
      },
      "AdministratorResult": {
        "type": "object",
        "properties": {
          "resultSet": {
            "$ref": "#/components/schemas/ResultSet"
          },
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Administrator"
            }
          }
        }
      },
      "AdministrativeRoleResult": {
        "type": "object",
        "properties": {
          "resultSet": {
            "$ref": "#/components/schemas/ResultSet"
          },
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AdministrativeRole"
            }
          }
        }
      },
      "AdministrativeRole": {
        "required": [
          "menus",
          "roleName"
        ],
        "type": "object",
        "properties": {
          "roleName": {
            "type": "string",
            "description": "Name of the administrative role."
          },
          "isLimited": {
            "type": "boolean",
            "description": "Type of the administrative role - master administrator or limited (delegated).",
            "default": false
          },
          "isBounceAllowed": {
            "type": "boolean",
            "description": "Is bounce function allowed for administrative role.",
            "default": false
          },
          "menus": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "enum": [
              "SSH Settings",
              "Login Restrictions",
              "Business Units",
              "PeSIT Settings",
              "FTP Commands",
              "Axway Sentinel/DI",
              "Server Log",
              "ICAP Settings",
              "Cluster Management",
              "Holiday Schedule",
              "Administrators",
              "User Accounts",
              "Database Settings",
              "Command Logging",
              "Restrictions",
              "Site Templates",
              "Server Access Control",
              "FTP Settings",
              "File Tracking",
              "Mail Templates",
              "Application",
              "Miscellaneous",
              "Service Accounts",
              "Audit Log",
              "Address Books",
              "System",
              "Certificates",
              "Secure Socket Layer",
              "Admin Access Control",
              "Server Control",
              "Virtual Groups",
              "Unlicensed Users",
              "Login Settings",
              "Manage Roles",
              "Admin Settings",
              "LDAP Domains",
              "Account Templates",
              "Import/Export",
              "File Archiving",
              "Access Rules",
              "SiteMinder Settings",
              "AS2 Settings",
              "Transfer Logging",
              "User Classes",
              "Change Password",
              "TM Settings",
              "Active Users",
              "Server Configuration",
              "Network Zones",
              "Server Usage Monitor",
              "Home Folders",
              "Support Tool",
              "User Type Ranges",
              "AdHoc Settings",
              "Server License",
              "Route Packages"
            ]
          }
        }
      },
      "ServerConfigurations": {
        "type": "object",
        "properties": {
          "resultSet": {
            "$ref": "#/components/schemas/ResultSet"
          },
          "result": {
            "type": "array",
            "items": {
              "discriminator": {
                "propertyName": "protocol",
                "mapping": {
                  "ftp": "#/FtpServerConfiguration",
                  "http": "#/HttpServerConfiguration",
                  "ssh": "#/SshServerConfiguration",
                  "as2": "#/As2ServerConfiguration",
                  "pesit": "#/PesitServerConfiguration"
                }
              },
              "anyOf": [
                {
                  "$ref": "#/components/schemas/FtpServerConfiguration"
                },
                {
                  "$ref": "#/components/schemas/HttpServerConfiguration"
                },
                {
                  "$ref": "#/components/schemas/SshServerConfiguration"
                },
                {
                  "$ref": "#/components/schemas/As2ServerConfiguration"
                },
                {
                  "$ref": "#/components/schemas/PesitServerConfiguration"
                }
              ]
            }
          }
        }
      },
      "FtpServerConfiguration": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerConfiguration"
          },
          {
            "type": "object",
            "properties": {
              "protocol": {
                "type": "string",
                "default": "ftp"
              },
              "host": {
                "type": "string",
                "description": "FTP server bind host."
              },
              "ciphers": {
                "type": "string",
                "description": "Comma-separated list of FTP enabled ciphers."
              },
              "enabledSslProtocols": {
                "type": "string",
                "description": "The suite of protocols available for the FTP server. The option is ignored if FIPS mode is turned on for the FTP server (SSLv2 and SSLv3 are disabled). Possible values are : TLSv1, TLSv1.1, TLSv1.2, TLSv1.3, SSLv3, SSLv2Hello. Comma-separated list.\n",
                "default": "TLSv1.2, TLSv1.3"
              },
              "sslKeyAlgorithm": {
                "type": "string",
                "description": "FTP server SSL key algorithm."
              },
              "sslProtocol": {
                "type": "string",
                "description": "FTP server SSL protocol."
              },
              "sslTrustAlgorithm": {
                "type": "string",
                "description": "FTP SSL trust algorithm."
              },
              "port": {
                "maximum": 65535,
                "minimum": 1,
                "type": "integer",
                "description": "FTP server bind port."
              },
              "certificateAlias": {
                "type": "string",
                "description": "Server certificate alias for FTP server, used for FTPS connections."
              },
              "clientCertificateResolution": {
                "type": "string",
                "description": "Controls the status of FTPS client certificate authentication.",
                "enum": [
                  "none",
                  "optional",
                  "required"
                ],
                "default": "none"
              },
              "isFipsEnabled": {
                "type": "boolean",
                "description": "FTPS FIPS transfer mode.",
                "default": false
              },
              "isFtpEnabled": {
                "type": "boolean",
                "description": "Controls whether FTP is enabled.",
                "default": false
              },
              "isFtpsEnabled": {
                "type": "boolean",
                "description": "Controls whether FTPS is enabled.",
                "default": false
              },
              "passivePortBase": {
                "type": "integer",
                "description": "Passive mode base port, 0 means 'let system choose port'."
              },
              "passivePortNumber": {
                "type": "integer",
                "description": "Passive mode port range, 0 means 'there are no port range restrictions'."
              }
            }
          }
        ]
      },
      "ServerConfiguration": {
        "required": [
          "protocol",
          "serverName"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The server's unique identifier."
          },
          "protocol": {
            "type": "string",
            "description": "The server's protocol. Acts as a discriminator.",
            "enum": [
              "http",
              "ftp",
              "ssh",
              "as2",
              "pesit"
            ]
          },
          "serverName": {
            "type": "string",
            "description": "The server name"
          },
          "isActive": {
            "type": "boolean",
            "description": "Current state of the server.",
            "default": false
          }
        },
        "discriminator": {
          "propertyName": "protocol"
        }
      },
      "HttpServerConfiguration": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerConfiguration"
          },
          {
            "type": "object",
            "properties": {
              "protocol": {
                "type": "string",
                "default": "http"
              },
              "httpPort": {
                "maximum": 65535,
                "minimum": 1,
                "type": "integer",
                "description": "HTTP server bind port."
              },
              "httpsPort": {
                "maximum": 65535,
                "minimum": 1,
                "type": "integer",
                "description": "HTTP server bind port."
              },
              "isHttpEnabled": {
                "type": "boolean",
                "description": "HTTP status.",
                "default": false
              },
              "isHttpsEnabled": {
                "type": "boolean",
                "description": "HTTPS status.",
                "default": false
              },
              "httpHost": {
                "type": "string",
                "description": "HTTP host"
              },
              "httpsHost": {
                "type": "string",
                "description": "HTTPS host"
              },
              "loginFormat": {
                "type": "string",
                "description": "How will the client get challenged for authentication. HTML - present an HTML login form, no BA; BA - use HTTP BA; ERR - no challenge: must use config/auth agents; PREAUTH - config/auth agents + HTML login page in case of failed login.\n",
                "enum": [
                  "HTML",
                  "BA",
                  "ERR",
                  "PREAUTH"
                ],
                "default": "HTML"
              },
              "clientCertificateResolution": {
                "type": "string",
                "description": "Controls the status of HTTPS client certificate authentication.",
                "enum": [
                  "none",
                  "optional",
                  "required"
                ]
              },
              "certificateAlias": {
                "type": "string",
                "description": "Server certificate alias for HTTP server, used for HTTPS connections."
              },
              "isFipsEnabled": {
                "type": "boolean",
                "description": "HTTPS FIPS transfer mode.",
                "default": false
              },
              "sslProtocol": {
                "type": "string",
                "description": "HTTP SSL protocol."
              },
              "enabledSslProtocols": {
                "type": "string",
                "description": "Comma-separated list of enabled HTTP SSL protocols.",
                "default": "TLSv1.2, TLSv1.3"
              },
              "ciphers": {
                "type": "string",
                "description": "Comma-separated list of HTTP enabled ciphers."
              },
              "allowedAuthenticationParameters": {
                "type": "string",
                "description": "HTTP allowed authentication parameters represented as a semicolon separated list."
              },
              "allowedAuthenticationParametersMaxSize": {
                "minimum": 0,
                "type": "integer",
                "description": "HTTP allowed authentication parameters maximum size in bytes."
              },
              "isHstsEnabled": {
                "type": "boolean",
                "description": "Enable or disable HSTS for HTTP Server. On change, the HTTP server must be restart.",
                "default": true
              },
              "contentSecurityPolicy": {
                "type": "string",
                "description": "Specifies the value of the Content-Security-Policy header for the HTTP server."
              },
              "xssProtection": {
                "type": "string",
                "description": "Specifies the value of the X-XSS-Protection header for the HTTP server. Accepted values are: 0 | 1 | 1; mode=block |1; report=<reporting url>\n",
                "default": "1; mode=block"
              },
              "contentTypeOptions": {
                "type": "string",
                "description": "Specifies the value of the X-Content-Type-Options header for the HTTP server. Accepted value: nosniff\n",
                "default": "nosniff"
              },
              "referrerPolicy": {
                "type": "string",
                "description": "Specifies the value of the Referrer-Policy header for the HTTP server. Accepted values are: no-referrer|no-referrer-when-downgrade|origin|origin-when-cross-origin |same-origin|strict-origin|strict-origin-when-cross-origin|unsafe-url\n",
                "enum": [
                  "no-referrer",
                  "no-referrer-when-downgrade",
                  "origin",
                  "origin-when-cross-origin",
                  "same-origin",
                  "strict-origin",
                  "strict-origin-when-cross-origin",
                  "unsafe-url"
                ]
              },
              "expectCt": {
                "type": "string",
                "description": "Specifies the value of the Expect-CT header for the HTTP server. Accepted value is: max-age=<age>; enforce; report-uri=<uri>. The enforce and report-uri directives are optional.\n"
              },
              "httpSecuritySameSite": {
                "type": "string",
                "description": "Specifies value for the SameSite cookie attribute for http. Valid values: None, Lax, Strict. Default value when not set: Strict.\n",
                "default": "Strict"
              },
              "redirectHostname": {
                "type": "string",
                "description": "When set, all subsequent to first requests to the ST Web client will be bound to that hostname. This should be used in the case where a DNS switch occurs to avoid requests getting split across different nodes.\n"
              }
            }
          }
        ]
      },
      "SshServerConfiguration": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerConfiguration"
          },
          {
            "type": "object",
            "properties": {
              "protocol": {
                "type": "string",
                "default": "ssh"
              },
              "clientCertificateResolution": {
                "type": "string",
                "description": "Controls the status of users client certificate SSH authentication.",
                "enum": [
                  "none",
                  "optional",
                  "required"
                ]
              },
              "clientPasswordAuth": {
                "type": "string",
                "description": "Controls if password authentication is enabled as a user authentication method on the SSH server.",
                "enum": [
                  "default",
                  "disabled"
                ]
              },
              "certificateAlias": {
                "type": "string",
                "description": "SSH Key Alias."
              },
              "port": {
                "maximum": 65535,
                "minimum": 1,
                "type": "integer",
                "description": "SSH server bind port."
              },
              "host": {
                "type": "string",
                "description": "SSH server bind host."
              },
              "isScpEnabled": {
                "type": "boolean",
                "description": "Secure Copy (SCP) status.",
                "default": false
              },
              "isSftpEnabled": {
                "type": "boolean",
                "description": "Secure File Transfer Protocol (SFTP) status.",
                "default": false
              },
              "isFipsEnabled": {
                "type": "boolean",
                "description": "SSH FIPS transfer mode."
              },
              "ciphers": {
                "type": "string",
                "description": "Comma-separated list of SSH enabled ciphers. This option is not honored when FIPS mode is enabled. The first one will be set as preferred Cipher algorithm.\n",
                "default": "aes256-cbc,aes192-cbc,aes128-cbc,aes128-ctr,aes192-ctr,aes256-ctr"
              },
              "keyExchangeAlgorithms": {
                "type": "string",
                "description": "Comma-separated list of supported Key Exchange algorithms for the current SSH server. This option is not honored when FIPS mode is enabled.\n",
                "default": "diffie-hellman-group14-sha1,diffie-hellman-group-exchange-sha256"
              },
              "minDiffieHellmanGroupExchangeKeySize": {
                "type": "integer",
                "description": "Define the minimum key size for Diffie-Hellman exchange algorithms group supported by the current SSH server. This value is honored if Diffie-Hellman key exchange algorithm is defined as supported in keyExchangeAlgorithms parameter value.\n",
                "default": 2048
              },
              "publicKeys": {
                "type": "string",
                "description": "Comma-separated list of supported public keys for client certificate authentication to current SSH server. This option is not honored when FIPS mode is enabled. The first entry will be set as preferred public key for authentication to SSH daemon.\n",
                "readOnly": true,
                "default": "ssh-rsa,ssh-dss,x509v3-sign-rsa,x509v3-sign-rsa-sha1"
              },
              "allowedMacs": {
                "type": "string",
                "description": "Comma-separated list of supported MAC algorithms for current SSH server. The first one will be set as preferred MAC algorithm. This option is not honored when FIPS mode is enabled.\n",
                "default": "hmac-sha1, hmac-md5, hmac-sha1-96, hmac-md5-96, hmac-sha256@ssh.com"
              }
            }
          }
        ]
      },
      "As2ServerConfiguration": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerConfiguration"
          },
          {
            "type": "object",
            "properties": {
              "protocol": {
                "type": "string",
                "default": "as2"
              },
              "clientCertificateResolution": {
                "type": "string",
                "description": "Controls the status of users client certificate AS2 authentication.",
                "enum": [
                  "none",
                  "optional",
                  "required"
                ]
              },
              "nonSslListenerEnabled": {
                "type": "boolean",
                "description": "AS2 non-SSL listener status.",
                "default": false
              },
              "nonSslListenerHost": {
                "type": "string",
                "description": "AS2 non-SSL host.",
                "default": "0"
              },
              "nonSslListenerPort": {
                "maximum": 65535,
                "minimum": 1,
                "type": "integer",
                "description": "AS2 non-SSL port."
              },
              "sslListenerEnabled": {
                "type": "boolean",
                "description": "AS2 SSL listener status.",
                "default": true
              },
              "sslListenerHost": {
                "type": "string",
                "description": "AS2 SSL host.",
                "default": "AS2 SSL host."
              },
              "sslListenerPort": {
                "maximum": 65535,
                "minimum": 1,
                "type": "integer",
                "description": "AS2 SSL port."
              },
              "enabledCipherSuites": {
                "type": "string",
                "description": "Comma-separated list of AS2 enabled ciphers."
              },
              "isHstsEnabled": {
                "type": "boolean",
                "description": "Enable or disable HSTS for AS2 Server. On change, the AS2 server must be restarted.",
                "default": true
              },
              "isFipsEnabled": {
                "type": "boolean",
                "description": "AS2 FIPS transfer mode.",
                "default": false
              },
              "keyAlgorithm": {
                "type": "string",
                "description": "AS2 key algorithm."
              },
              "keyAlias": {
                "type": "string",
                "description": "AS2 key alias."
              },
              "enabledSslProtocols": {
                "type": "string",
                "description": "Comma-separated list of enabled AS2 SSL protocols.",
                "default": "TLSv1.2, TLSv1.3"
              },
              "isReceiverEnabled": {
                "type": "boolean",
                "description": "Disable/enable AS2 receiving.",
                "default": true
              }
            }
          }
        ]
      },
      "PesitServerConfiguration": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerConfiguration"
          },
          {
            "type": "object",
            "properties": {
              "protocol": {
                "type": "string",
                "default": "pesit"
              },
              "clientCertificateResolution": {
                "type": "string",
                "description": "Controls the status of users client certificate PeSIT authentication.",
                "enum": [
                  "none",
                  "optional",
                  "required"
                ]
              },
              "isPesitEnabled": {
                "type": "boolean",
                "description": "PeSIT plain port enabled/disabled status.",
                "default": false
              },
              "isPesitSslEnabled": {
                "type": "boolean",
                "description": "PeSIT SSL port enabled/disabled status.",
                "default": false
              },
              "isCftSslEnabled": {
                "type": "boolean",
                "description": "PeSIT CFT SSL port enabled/disabled status.",
                "default": false
              },
              "isPtcpEnabled": {
                "type": "boolean",
                "description": "PeSIT over parallel-TCP plain port enabled/disabled status.",
                "default": false
              },
              "isPtcpSslEnabled": {
                "type": "boolean",
                "description": "PeSIT over parallel-TCP SSL port enabled/disabled status.",
                "default": false
              },
              "host": {
                "type": "string",
                "description": "PeSIT server bind host."
              },
              "pesitPort": {
                "maximum": 65535,
                "minimum": 1,
                "type": "integer",
                "description": "PeSIT plain port."
              },
              "pesitSslPort": {
                "maximum": 65535,
                "minimum": 1,
                "type": "integer",
                "description": "PeSIT SSL port (non CFT compatible)."
              },
              "cftSslPort": {
                "maximum": 65535,
                "minimum": 1,
                "type": "integer",
                "description": "PeSIT CFT SSL port (CFT compatible)."
              },
              "ptcpPort": {
                "maximum": 65535,
                "minimum": 1,
                "type": "integer",
                "description": "PeSIT over parallel-TCP plain port."
              },
              "ptcpSslPort": {
                "maximum": 65535,
                "minimum": 1,
                "type": "integer",
                "description": "PeSIT over parallel-TCP SSL port."
              },
              "cftSslKeyAlgorithm": {
                "type": "string",
                "description": "PeSIT CFT ssl key algorithm."
              },
              "cftSslKeyAlias": {
                "type": "string",
                "description": "PeSIT CFT ssl key alias."
              },
              "cftSslProtocol": {
                "type": "string",
                "description": "PeSIT CFT ssl protocol."
              },
              "cftSslTrustAlgorithm": {
                "type": "string",
                "description": "PeSIT CFT ssl trust algorithm."
              },
              "ptcpKeyAlgorithm": {
                "type": "string",
                "description": "PeSIT pTCP SSL key algorithm."
              },
              "ptcpKeyAlias": {
                "type": "string",
                "description": "PeSIT pTCP SSL key alias."
              },
              "ptcpProtocol": {
                "type": "string",
                "description": "PeSIT pTCP SSL protocol."
              },
              "ptcpTrustAlgorithm": {
                "type": "string",
                "description": "PeSIT pTCP SSL trust algorithm."
              },
              "pesitKeyAlgorithm": {
                "type": "string",
                "description": "PeSIT SSL key algorithm."
              },
              "pesitKeyAlias": {
                "type": "string",
                "description": "PeSIT SSL key alias."
              },
              "pesitSslProtocol": {
                "type": "string",
                "description": "PeSIT SSL protocol."
              },
              "pesitTrustAlgorithm": {
                "type": "string",
                "description": "PeSIT SSL trust algorithm."
              },
              "ciphers": {
                "type": "string",
                "description": "Comma-separated list of enabled SSL ciphers for PeSIT."
              },
              "enabledSslProtocols": {
                "type": "string",
                "description": "Comma-separated list enabled SSL protocols for PeSIT.",
                "default": "TLSv1.2, TLSv1.3"
              },
              "isFipsEnabled": {
                "type": "boolean",
                "description": "PeSIT FIPS support enabled/disabled status.",
                "default": false
              },
              "autodetectTlsModeListenerPort": {
                "maximum": 65535,
                "minimum": 1,
                "type": "integer",
                "description": "The PeSIT autodetect TLS mode listener port."
              },
              "autodetectTlsModeListenerEnabled": {
                "type": "boolean",
                "description": "Whether the PeSIT autodetect TLS mode is enabled.",
                "default": false
              },
              "autodetectTlsModeListenerTrustAlgorithm": {
                "type": "string",
                "description": "The autodetect TLS mode listener trust algorithm."
              },
              "autodetectTlsModeListenerKeyAlgorithm": {
                "type": "string",
                "description": "The autodetect TLS mode listener key algorithm."
              },
              "autodetectTlsModeListenerKeyAlias": {
                "type": "string",
                "description": "The autodetect TLS mode listener key alias."
              },
              "autodetectTlsModeListenerProtocol": {
                "type": "string",
                "description": "The autodetect TLS mode listener protocol."
              }
            }
          }
        ]
      },
      "FtpServerConfiguration_1": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerConfiguration"
          },
          {
            "type": "object",
            "properties": {
              "protocol": {
                "type": "string",
                "default": "ftp"
              },
              "host": {
                "type": "string",
                "description": "FTP server bind host."
              },
              "ciphers": {
                "type": "string",
                "description": "Comma-separated list of FTP enabled ciphers."
              },
              "enabledSslProtocols": {
                "type": "string",
                "description": "The suite of protocols available for the FTP server. The option is ignored if FIPS mode is turned on for the FTP server (SSLv2 and SSLv3 are disabled). Possible values are : TLSv1, TLSv1.1, TLSv1.2, TLSv1.3, SSLv3, SSLv2Hello. Comma-separated list.\n",
                "default": "TLSv1.2, TLSv1.3"
              },
              "sslKeyAlgorithm": {
                "type": "string",
                "description": "FTP server SSL key algorithm."
              },
              "sslProtocol": {
                "type": "string",
                "description": "FTP server SSL protocol."
              },
              "sslTrustAlgorithm": {
                "type": "string",
                "description": "FTP SSL trust algorithm."
              },
              "port": {
                "maximum": 65535,
                "minimum": 1,
                "type": "integer",
                "description": "FTP server bind port."
              },
              "certificateAlias": {
                "type": "string",
                "description": "Server certificate alias for FTP server, used for FTPS connections."
              },
              "clientCertificateResolution": {
                "type": "string",
                "description": "Controls the status of FTPS client certificate authentication.",
                "enum": [
                  "none",
                  "optional",
                  "required"
                ],
                "default": "none"
              },
              "isFipsEnabled": {
                "type": "boolean",
                "description": "FTPS FIPS transfer mode.",
                "default": false
              },
              "isFtpEnabled": {
                "type": "boolean",
                "description": "Controls whether FTP is enabled.",
                "default": false
              },
              "isFtpsEnabled": {
                "type": "boolean",
                "description": "Controls whether FTPS is enabled.",
                "default": false
              },
              "passivePortBase": {
                "type": "integer",
                "description": "Passive mode base port, 0 means 'let system choose port'."
              },
              "passivePortNumber": {
                "type": "integer",
                "description": "Passive mode port range, 0 means 'there are no port range restrictions'."
              }
            }
          }
        ]
      },
      "HttpServerConfiguration_1": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerConfiguration"
          },
          {
            "type": "object",
            "properties": {
              "protocol": {
                "type": "string",
                "default": "http"
              },
              "httpPort": {
                "maximum": 65535,
                "minimum": 1,
                "type": "integer",
                "description": "HTTP server bind port."
              },
              "httpsPort": {
                "maximum": 65535,
                "minimum": 1,
                "type": "integer",
                "description": "HTTP server bind port."
              },
              "isHttpEnabled": {
                "type": "boolean",
                "description": "HTTP status.",
                "default": false
              },
              "isHttpsEnabled": {
                "type": "boolean",
                "description": "HTTPS status.",
                "default": false
              },
              "httpHost": {
                "type": "string",
                "description": "HTTP host"
              },
              "httpsHost": {
                "type": "string",
                "description": "HTTPS host"
              },
              "loginFormat": {
                "type": "string",
                "description": "How will the client get challenged for authentication. HTML - present an HTML login form, no BA; BA - use HTTP BA; ERR - no challenge: must use config/auth agents; PREAUTH - config/auth agents + HTML login page in case of failed login.\n",
                "enum": [
                  "HTML",
                  "BA",
                  "ERR",
                  "PREAUTH"
                ],
                "default": "HTML"
              },
              "clientCertificateResolution": {
                "type": "string",
                "description": "Controls the status of HTTPS client certificate authentication.",
                "enum": [
                  "none",
                  "optional",
                  "required"
                ]
              },
              "certificateAlias": {
                "type": "string",
                "description": "Server certificate alias for HTTP server, used for HTTPS connections."
              },
              "isFipsEnabled": {
                "type": "boolean",
                "description": "HTTPS FIPS transfer mode.",
                "default": false
              },
              "sslProtocol": {
                "type": "string",
                "description": "HTTP SSL protocol."
              },
              "enabledSslProtocols": {
                "type": "string",
                "description": "Comma-separated list of enabled HTTP SSL protocols.",
                "default": "TLSv1.2, TLSv1.3"
              },
              "ciphers": {
                "type": "string",
                "description": "Comma-separated list of HTTP enabled ciphers."
              },
              "allowedAuthenticationParameters": {
                "type": "string",
                "description": "HTTP allowed authentication parameters represented as a semicolon separated list."
              },
              "allowedAuthenticationParametersMaxSize": {
                "minimum": 0,
                "type": "integer",
                "description": "HTTP allowed authentication parameters maximum size in bytes."
              },
              "isHstsEnabled": {
                "type": "boolean",
                "description": "Enable or disable HSTS for HTTP Server. On change, the HTTP server must be restart.",
                "default": true
              },
              "contentSecurityPolicy": {
                "type": "string",
                "description": "Specifies the value of the Content-Security-Policy header for the HTTP server."
              },
              "xssProtection": {
                "type": "string",
                "description": "Specifies the value of the X-XSS-Protection header for the HTTP server. Accepted values are: 0 | 1 | 1; mode=block |1; report=<reporting url>\n",
                "default": "1; mode=block"
              },
              "contentTypeOptions": {
                "type": "string",
                "description": "Specifies the value of the X-Content-Type-Options header for the HTTP server. Accepted value: nosniff\n",
                "default": "nosniff"
              },
              "referrerPolicy": {
                "type": "string",
                "description": "Specifies the value of the Referrer-Policy header for the HTTP server. Accepted values are: no-referrer|no-referrer-when-downgrade|origin|origin-when-cross-origin |same-origin|strict-origin|strict-origin-when-cross-origin|unsafe-url\n",
                "enum": [
                  "no-referrer",
                  "no-referrer-when-downgrade",
                  "origin",
                  "origin-when-cross-origin",
                  "same-origin",
                  "strict-origin",
                  "strict-origin-when-cross-origin",
                  "unsafe-url"
                ]
              },
              "expectCt": {
                "type": "string",
                "description": "Specifies the value of the Expect-CT header for the HTTP server. Accepted value is: max-age=<age>; enforce; report-uri=<uri>. The enforce and report-uri directives are optional.\n"
              },
              "httpSecuritySameSite": {
                "type": "string",
                "description": "Specifies value for the SameSite cookie attribute for http. Valid values: None, Lax, Strict. Default value when not set: Strict.\n",
                "default": "Strict"
              },
              "redirectHostname": {
                "type": "string",
                "description": "When set, all subsequent to first requests to the ST Web client will be bound to that hostname. This should be used in the case where a DNS switch occurs to avoid requests getting split across different nodes.\n"
              }
            }
          }
        ]
      },
      "SshServerConfiguration_1": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerConfiguration"
          },
          {
            "type": "object",
            "properties": {
              "protocol": {
                "type": "string",
                "default": "ssh"
              },
              "clientCertificateResolution": {
                "type": "string",
                "description": "Controls the status of users client certificate SSH authentication.",
                "enum": [
                  "none",
                  "optional",
                  "required"
                ]
              },
              "clientPasswordAuth": {
                "type": "string",
                "description": "Controls if password authentication is enabled as a user authentication method on the SSH server.",
                "enum": [
                  "default",
                  "disabled"
                ]
              },
              "certificateAlias": {
                "type": "string",
                "description": "SSH Key Alias."
              },
              "port": {
                "maximum": 65535,
                "minimum": 1,
                "type": "integer",
                "description": "SSH server bind port."
              },
              "host": {
                "type": "string",
                "description": "SSH server bind host."
              },
              "isScpEnabled": {
                "type": "boolean",
                "description": "Secure Copy (SCP) status.",
                "default": false
              },
              "isSftpEnabled": {
                "type": "boolean",
                "description": "Secure File Transfer Protocol (SFTP) status.",
                "default": false
              },
              "isFipsEnabled": {
                "type": "boolean",
                "description": "SSH FIPS transfer mode."
              },
              "ciphers": {
                "type": "string",
                "description": "Comma-separated list of SSH enabled ciphers. This option is not honored when FIPS mode is enabled. The first one will be set as preferred Cipher algorithm.\n",
                "default": "aes256-cbc,aes192-cbc,aes128-cbc,aes128-ctr,aes192-ctr,aes256-ctr"
              },
              "keyExchangeAlgorithms": {
                "type": "string",
                "description": "Comma-separated list of supported Key Exchange algorithms for the current SSH server. This option is not honored when FIPS mode is enabled.\n",
                "default": "diffie-hellman-group14-sha1,diffie-hellman-group-exchange-sha256"
              },
              "minDiffieHellmanGroupExchangeKeySize": {
                "type": "integer",
                "description": "Define the minimum key size for Diffie-Hellman exchange algorithms group supported by the current SSH server. This value is honored if Diffie-Hellman key exchange algorithm is defined as supported in keyExchangeAlgorithms parameter value.\n",
                "default": 2048
              },
              "publicKeys": {
                "type": "string",
                "description": "Comma-separated list of supported public keys for client certificate authentication to current SSH server. This option is not honored when FIPS mode is enabled. The first entry will be set as preferred public key for authentication to SSH daemon.\n",
                "readOnly": true,
                "default": "ssh-rsa,ssh-dss,x509v3-sign-rsa,x509v3-sign-rsa-sha1"
              },
              "allowedMacs": {
                "type": "string",
                "description": "Comma-separated list of supported MAC algorithms for current SSH server. The first one will be set as preferred MAC algorithm. This option is not honored when FIPS mode is enabled.\n",
                "default": "hmac-sha1, hmac-md5, hmac-sha1-96, hmac-md5-96, hmac-sha256@ssh.com"
              }
            }
          }
        ]
      },
      "As2ServerConfiguration_1": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerConfiguration"
          },
          {
            "type": "object",
            "properties": {
              "protocol": {
                "type": "string",
                "default": "as2"
              },
              "clientCertificateResolution": {
                "type": "string",
                "description": "Controls the status of users client certificate AS2 authentication.",
                "enum": [
                  "none",
                  "optional",
                  "required"
                ]
              },
              "nonSslListenerEnabled": {
                "type": "boolean",
                "description": "AS2 non-SSL listener status.",
                "default": false
              },
              "nonSslListenerHost": {
                "type": "string",
                "description": "AS2 non-SSL host.",
                "default": "0"
              },
              "nonSslListenerPort": {
                "maximum": 65535,
                "minimum": 1,
                "type": "integer",
                "description": "AS2 non-SSL port."
              },
              "sslListenerEnabled": {
                "type": "boolean",
                "description": "AS2 SSL listener status.",
                "default": true
              },
              "sslListenerHost": {
                "type": "string",
                "description": "AS2 SSL host.",
                "default": "AS2 SSL host."
              },
              "sslListenerPort": {
                "maximum": 65535,
                "minimum": 1,
                "type": "integer",
                "description": "AS2 SSL port."
              },
              "enabledCipherSuites": {
                "type": "string",
                "description": "Comma-separated list of AS2 enabled ciphers."
              },
              "isHstsEnabled": {
                "type": "boolean",
                "description": "Enable or disable HSTS for AS2 Server. On change, the AS2 server must be restarted.",
                "default": true
              },
              "isFipsEnabled": {
                "type": "boolean",
                "description": "AS2 FIPS transfer mode.",
                "default": false
              },
              "keyAlgorithm": {
                "type": "string",
                "description": "AS2 key algorithm."
              },
              "keyAlias": {
                "type": "string",
                "description": "AS2 key alias."
              },
              "enabledSslProtocols": {
                "type": "string",
                "description": "Comma-separated list of enabled AS2 SSL protocols.",
                "default": "TLSv1.2, TLSv1.3"
              },
              "isReceiverEnabled": {
                "type": "boolean",
                "description": "Disable/enable AS2 receiving.",
                "default": true
              }
            }
          }
        ]
      },
      "PesitServerConfiguration_1": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerConfiguration"
          },
          {
            "type": "object",
            "properties": {
              "protocol": {
                "type": "string",
                "default": "pesit"
              },
              "clientCertificateResolution": {
                "type": "string",
                "description": "Controls the status of users client certificate PeSIT authentication.",
                "enum": [
                  "none",
                  "optional",
                  "required"
                ]
              },
              "isPesitEnabled": {
                "type": "boolean",
                "description": "PeSIT plain port enabled/disabled status.",
                "default": false
              },
              "isPesitSslEnabled": {
                "type": "boolean",
                "description": "PeSIT SSL port enabled/disabled status.",
                "default": false
              },
              "isCftSslEnabled": {
                "type": "boolean",
                "description": "PeSIT CFT SSL port enabled/disabled status.",
                "default": false
              },
              "isPtcpEnabled": {
                "type": "boolean",
                "description": "PeSIT over parallel-TCP plain port enabled/disabled status.",
                "default": false
              },
              "isPtcpSslEnabled": {
                "type": "boolean",
                "description": "PeSIT over parallel-TCP SSL port enabled/disabled status.",
                "default": false
              },
              "host": {
                "type": "string",
                "description": "PeSIT server bind host."
              },
              "pesitPort": {
                "maximum": 65535,
                "minimum": 1,
                "type": "integer",
                "description": "PeSIT plain port."
              },
              "pesitSslPort": {
                "maximum": 65535,
                "minimum": 1,
                "type": "integer",
                "description": "PeSIT SSL port (non CFT compatible)."
              },
              "cftSslPort": {
                "maximum": 65535,
                "minimum": 1,
                "type": "integer",
                "description": "PeSIT CFT SSL port (CFT compatible)."
              },
              "ptcpPort": {
                "maximum": 65535,
                "minimum": 1,
                "type": "integer",
                "description": "PeSIT over parallel-TCP plain port."
              },
              "ptcpSslPort": {
                "maximum": 65535,
                "minimum": 1,
                "type": "integer",
                "description": "PeSIT over parallel-TCP SSL port."
              },
              "cftSslKeyAlgorithm": {
                "type": "string",
                "description": "PeSIT CFT ssl key algorithm."
              },
              "cftSslKeyAlias": {
                "type": "string",
                "description": "PeSIT CFT ssl key alias."
              },
              "cftSslProtocol": {
                "type": "string",
                "description": "PeSIT CFT ssl protocol."
              },
              "cftSslTrustAlgorithm": {
                "type": "string",
                "description": "PeSIT CFT ssl trust algorithm."
              },
              "ptcpKeyAlgorithm": {
                "type": "string",
                "description": "PeSIT pTCP SSL key algorithm."
              },
              "ptcpKeyAlias": {
                "type": "string",
                "description": "PeSIT pTCP SSL key alias."
              },
              "ptcpProtocol": {
                "type": "string",
                "description": "PeSIT pTCP SSL protocol."
              },
              "ptcpTrustAlgorithm": {
                "type": "string",
                "description": "PeSIT pTCP SSL trust algorithm."
              },
              "pesitKeyAlgorithm": {
                "type": "string",
                "description": "PeSIT SSL key algorithm."
              },
              "pesitKeyAlias": {
                "type": "string",
                "description": "PeSIT SSL key alias."
              },
              "pesitSslProtocol": {
                "type": "string",
                "description": "PeSIT SSL protocol."
              },
              "pesitTrustAlgorithm": {
                "type": "string",
                "description": "PeSIT SSL trust algorithm."
              },
              "ciphers": {
                "type": "string",
                "description": "Comma-separated list of enabled SSL ciphers for PeSIT."
              },
              "enabledSslProtocols": {
                "type": "string",
                "description": "Comma-separated list enabled SSL protocols for PeSIT.",
                "default": "TLSv1.2, TLSv1.3"
              },
              "isFipsEnabled": {
                "type": "boolean",
                "description": "PeSIT FIPS support enabled/disabled status.",
                "default": false
              },
              "autodetectTlsModeListenerPort": {
                "maximum": 65535,
                "minimum": 1,
                "type": "integer",
                "description": "The PeSIT autodetect TLS mode listener port."
              },
              "autodetectTlsModeListenerEnabled": {
                "type": "boolean",
                "description": "Whether the PeSIT autodetect TLS mode is enabled.",
                "default": false
              },
              "autodetectTlsModeListenerTrustAlgorithm": {
                "type": "string",
                "description": "The autodetect TLS mode listener trust algorithm."
              },
              "autodetectTlsModeListenerKeyAlgorithm": {
                "type": "string",
                "description": "The autodetect TLS mode listener key algorithm."
              },
              "autodetectTlsModeListenerKeyAlias": {
                "type": "string",
                "description": "The autodetect TLS mode listener key alias."
              },
              "autodetectTlsModeListenerProtocol": {
                "type": "string",
                "description": "The autodetect TLS mode listener protocol."
              }
            }
          }
        ]
      },
      "ServerStatuses": {
        "type": "object",
        "properties": {
          "serverStatuses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ServerStatus"
            }
          }
        }
      },
      "ServerStatus": {
        "type": "object",
        "properties": {
          "serverName": {
            "type": "string",
            "description": "Server name."
          },
          "message": {
            "type": "string",
            "description": "Message for the performed server operation."
          },
          "isSuccessful": {
            "type": "boolean",
            "description": "Whether or not the server operation was successful.",
            "default": false
          }
        }
      },
      "DaemonsStatus": {
        "type": "object",
        "properties": {
          "httpStatus": {
            "$ref": "#/components/schemas/Status"
          },
          "ftpStatus": {
            "$ref": "#/components/schemas/Status"
          },
          "sshStatus": {
            "$ref": "#/components/schemas/Status"
          },
          "as2Status": {
            "$ref": "#/components/schemas/Status"
          },
          "pesitStatus": {
            "$ref": "#/components/schemas/Status"
          }
        }
      },
      "Status": {
        "type": "string",
        "enum": [
          "Running",
          "Not running",
          "Shutdown",
          "Pending shutdown"
        ]
      },
      "DaemonOperationResults": {
        "type": "object",
        "properties": {
          "daemonOperationResults": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DaemonOperationResult"
            }
          }
        }
      },
      "DaemonOperationResult": {
        "type": "object",
        "properties": {
          "daemon": {
            "type": "string",
            "description": "Daemon name.",
            "enum": [
              "HTTP",
              "FTP",
              "SSH",
              "AS2",
              "PESIT"
            ]
          },
          "message": {
            "type": "string",
            "description": "Message for the performed daemon operation."
          },
          "isSuccessful": {
            "type": "boolean",
            "description": "Whether or not the daemon operation was successful.",
            "default": false
          }
        }
      },
      "SshDaemonConfiguration": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "maxConnections": {
                "maximum": 100000,
                "minimum": 1,
                "type": "integer",
                "description": "Maximum number of SSH clients that can simultaneously connect to the SSH server."
              },
              "preferBouncyCastleProvider": {
                "type": "boolean",
                "description": "The preferred Crypto Provider to be used. When set to false, system uses Sun library as the preferred crypto provider for SSH daemon, and BouncyCastle as a fallback. Sun provider has better performance in certain cases, but is not FIPS-certified.",
                "default": true
              },
              "banner": {
                "type": "string",
                "description": "Set the SSH welcome login message."
              }
            }
          }
        ]
      },
      "ActiveUsersResult": {
        "type": "object",
        "properties": {
          "resultSet": {
            "$ref": "#/components/schemas/ResultSet"
          },
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ActiveUser"
            }
          }
        }
      },
      "ActiveUser": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The user's login name."
          },
          "lastAccessTime": {
            "type": "string",
            "description": "The last time the user has logged in.",
            "default": "false"
          },
          "lastAdhocAccessTime": {
            "type": "string",
            "description": "The last time the user has accessed adhoc."
          }
        }
      },
      "ClusterServiceStatus": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The service name.",
            "enum": [
              "FolderMonitor",
              "Scheduler"
            ]
          },
          "status": {
            "type": "string",
            "description": "Is service currently running or not."
          }
        },
        "discriminator": {
          "propertyName": "name"
        }
      },
      "ClusterServiceOperationResult": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The service name.",
            "enum": [
              "FolderMonitor",
              "Scheduler"
            ]
          },
          "message": {
            "type": "string",
            "description": "Message for the performed service operation."
          },
          "isSuccessful": {
            "type": "boolean",
            "description": "Whether or not the service operation was successful.",
            "default": false
          }
        },
        "discriminator": {
          "propertyName": "name"
        }
      },
      "TransactionManagerStatus": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Whether Transaction Manager is running, stopped or shutdown is in progress."
          }
        }
      },
      "TransactionManagerOperationResult": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Message for the performed operation."
          },
          "isSuccessful": {
            "type": "boolean",
            "description": "Whether or not transaction manager operation was successful.",
            "default": false
          }
        }
      },
      "ConfigurationOption": {
        "required": [
          "composite",
          "disabled",
          "encrypted",
          "name",
          "readOnly",
          "specified"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the configuration option entity."
          },
          "values": {
            "type": "array",
            "description": "The configuration option values.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "type": "string",
            "description": "The description of the configuration option entity."
          },
          "isLocal": {
            "type": "boolean",
            "description": "Define if the configuration option value is local.",
            "default": false
          },
          "encrypted": {
            "type": "boolean",
            "description": "Define if the configuration option value is encrypted.",
            "default": false
          },
          "readOnly": {
            "type": "boolean",
            "description": "Define if the configuration option value can be modified.",
            "default": false
          },
          "composite": {
            "type": "boolean",
            "description": "Define if the configuration option is composite.",
            "default": false
          },
          "specified": {
            "type": "boolean",
            "description": "Define if the configuration option value is specified.",
            "default": false
          },
          "disabled": {
            "type": "boolean",
            "description": "Define if the configuration option is disabled.",
            "default": false
          }
        }
      },
      "DatabaseSettings": {
        "type": "object",
        "properties": {
          "componentType": {
            "type": "string",
            "description": "Component type."
          },
          "databaseType": {
            "type": "string",
            "description": "Database type."
          },
          "username": {
            "type": "string",
            "description": "Database Username."
          },
          "host": {
            "type": "string",
            "description": "Database Host."
          },
          "port": {
            "type": "string",
            "description": "Database Port."
          },
          "databaseName": {
            "type": "string",
            "description": "Database Name."
          },
          "useCustomJdbcUrl": {
            "type": "boolean",
            "description": "Use Custom JDBC Url flag."
          },
          "jdbcUrlTemplate": {
            "type": "string",
            "description": "Custom JDBC Url Template."
          },
          "secureConnectionEnabled": {
            "type": "boolean",
            "description": "Enctypt Connection flag."
          },
          "serverCertificateDn": {
            "type": "string",
            "description": "Server Certificate Dn to be used for connection ecnryption."
          },
          "enabledProtocols": {
            "type": "string",
            "description": "Comma-separated list of enabled Protocols. E.g. TLSv1.2."
          },
          "enabledCipherSuites": {
            "type": "string",
            "description": "Comma-separated list of Enabled Cipher Suites."
          },
          "databaseRunning": {
            "type": "boolean",
            "description": "Is Database Running status."
          },
          "kerberosMode": {
            "type": "boolean",
            "description": "Using Oracle Kerberos Authentication."
          },
          "useKerberosFile": {
            "type": "boolean",
            "description": "Using Kerberos configuration file when in Kerberos mode."
          },
          "krbConfigurationFile": {
            "type": "string",
            "description": "The absolute path to the Kerberos configuration file."
          },
          "krbCacheFilePath": {
            "type": "string",
            "description": "The path to the Kerberos credential cache."
          },
          "useProxy": {
            "type": "boolean",
            "description": "Using Oracle Proxy Authentication."
          },
          "proxyUser": {
            "type": "string",
            "description": "The username of the proxied user."
          }
        }
      },
      "DatabaseConfigurationFailure": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Database Configuration failure message."
          }
        }
      },
      "Sentinel": {
        "required": [
          "eventStates",
          "host",
          "overflowFilePath",
          "overflowFileSize",
          "overflowFileThreshold",
          "port"
        ],
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "Whether the reporting to Axway Sentinel is enabled.",
            "default": false
          },
          "host": {
            "type": "string",
            "description": "The IP address of the remote Axway Sentinel host."
          },
          "port": {
            "maximum": 65535,
            "minimum": 1,
            "type": "integer",
            "description": "Port of the remote Axway Sentinel host.",
            "format": "int32"
          },
          "useSecureConnection": {
            "type": "boolean",
            "description": "Whether SecureTransport server should send messages to the Sentinel server over a secure channel.",
            "default": false
          },
          "shouldVerifyCert": {
            "type": "boolean",
            "description": "Whether the SecureTransport server to check the validity, trust status and hostname of the certificate presented by Axway Sentinel server upon establishing connection. If it is â€œfalseâ€, connections could be established even if the certificate is expired or the certificate attributes are not correct.",
            "default": false
          },
          "fipsEnabled": {
            "type": "boolean",
            "description": "Enables the communication between SecureTransport and Axway Sentinel in a mode that is fully compliant with FIPS 140-2. This setting overrides the AxwaySentinel.SecureConnection.Protocol and AxwaySentinel.SecureConnection.EnabledCipherSuites.",
            "default": false
          },
          "heartbeatEnabled": {
            "type": "boolean",
            "description": "If true the SecureTransport server sends a message to the Axway Sentinel server to tell it that SecureTransport is alive and connected.",
            "default": false
          },
          "heartbeatDelay": {
            "minimum": 1,
            "type": "integer",
            "description": "Time between the heartbeat messages.",
            "format": "int32",
            "default": 10
          },
          "heartbeatTimeUnit": {
            "type": "string",
            "description": "Time unit for the time between the heartbeat messages.",
            "enum": [
              "seconds",
              "minutes",
              "hours"
            ],
            "default": "seconds"
          },
          "eventStates": {
            "type": "object",
            "properties": {},
            "description": "Whether SecureTransport should enable the reporting of the specified events. The events are specified as properties of the eventStates object, whereas the value of the properties is one of the following strings - <true|false|required>. Available states - ACKED, AVAILABLE(ST_VAS), AVAILABLE(XFBTransfer), CANCELED, DECRYPTED, DECRYPTING, DELETED, ENCRYPTED, ENCRYPTING, ENDED_TO_ACK, ERROR, FAILED, FORWARDED, FORWARDING, INTERRUPTED, POST_PROC/ARCHIVED, POST_PROC/ICAP_DENIED, POST_PROC/ICAP_SCANNED, POST_PROC/ICAP_SCANNING, POST_PROC/ROUTED, POST_PROC/ROUTING, PRESERVED, RECEIVED, RECEIVING, RENAMED, ROUTED, SENDING, SENT, SUBMITTED, TO_EXECUTE, TO_BE_DELETED, WAITING."
          },
          "mappingRules": {
            "type": "object",
            "properties": {},
            "description": "The Axway Sentinel attributes where SecureTransport reports related values."
          },
          "overflowFilePath": {
            "type": "string",
            "description": "File path to the file where SecureTransport writes events in case it cannot connect to Axway Sentinel."
          },
          "overflowFileSize": {
            "minimum": 1,
            "type": "integer",
            "description": "Maximum size of overflow file in MB.",
            "format": "int64"
          },
          "overflowFilePolicy": {
            "type": "string",
            "description": "Possible values (ignore - Stops Collecting New Events | stop - Pauses All File Transfers Sent From and Received by SecureTransport). The default value is ignore.",
            "enum": [
              "ignore",
              "stop"
            ],
            "default": "ignore"
          },
          "overflowFileThreshold": {
            "maximum": 94,
            "minimum": 1,
            "type": "integer",
            "description": "Represents the percent of file size at which warnings are sent.",
            "format": "int32"
          },
          "shouldPersistLinkData": {
            "type": "boolean",
            "description": "If true SecureTransport server will maintain link data when reporting is disabled.",
            "default": false
          }
        }
      },
      "InternalLoginSettings": {
        "allOf": [
          {
            "$ref": "#/components/schemas/LoginSettings"
          },
          {
            "type": "object",
            "properties": {
              "certificateIssuer": {
                "type": "string",
                "default": "internal"
              }
            }
          }
        ]
      },
      "LoginSettings": {
        "type": "object",
        "properties": {
          "certificateIssuer": {
            "type": "string",
            "description": "Certificate issuer type. Acts as a discriminator.",
            "enum": [
              "internal",
              "trusted",
              "selected",
              "other"
            ]
          },
          "userSSO": {
            "type": "string",
            "description": "Whether sso is required for user.",
            "enum": [
              "disabled",
              "required"
            ],
            "default": "disabled"
          },
          "requirePassword": {
            "type": "string",
            "description": "Whether password is required. If set to \"requiredForUserClasses\" and  requirePasswordUserClasses is not specified, the value will fall back to the default.",
            "enum": [
              "optional",
              "required",
              "requiredForUserClasses"
            ],
            "default": "optional"
          },
          "requireCertificateForUserClasses": {
            "type": "string",
            "description": "Whether certificate is required for user classes.",
            "enum": [
              "disabled",
              "enabled"
            ],
            "default": "disabled"
          },
          "requirePasswordUserClasses": {
            "type": "string",
            "description": "User classes for which password is required.",
            "default": "empty"
          },
          "ldapOption": {
            "type": "string",
            "description": "Ldap option value.",
            "enum": [
              "disabled",
              "optional",
              "required"
            ],
            "default": "disabled"
          },
          "siteMinderOption": {
            "type": "string",
            "description": "SiteMinder option value.",
            "enum": [
              "disabled",
              "optional"
            ],
            "default": "disabled"
          },
          "adminSSO": {
            "type": "string",
            "description": "Whether sso is required for admin.",
            "enum": [
              "disabled",
              "required"
            ],
            "default": "disabled"
          },
          "adminCertificateOption": {
            "type": "string",
            "description": "Administrator certificate option.",
            "enum": [
              "optional",
              "required",
              "none"
            ]
          },
          "adminSelectedCertificates": {
            "type": "array",
            "description": "List with IDs of the selected issuers.",
            "items": {
              "type": "string"
            }
          },
          "userAuthStatus": {
            "type": "array",
            "description": "Pluggable authentication status. This is a read only property.",
            "items": {
              "type": "string"
            }
          },
          "adminAuthStatus": {
            "type": "array",
            "description": "Pluggable authentication status. This is a read only property.",
            "items": {
              "type": "string"
            }
          }
        },
        "discriminator": {
          "propertyName": "certificateIssuer"
        }
      },
      "TrustedLoginSettings": {
        "allOf": [
          {
            "$ref": "#/components/schemas/LoginSettings"
          },
          {
            "type": "object",
            "properties": {
              "certificateIssuer": {
                "type": "string",
                "default": "trusted"
              }
            }
          }
        ]
      },
      "SelectedLoginSettings": {
        "allOf": [
          {
            "$ref": "#/components/schemas/LoginSettings"
          },
          {
            "type": "object",
            "properties": {
              "certificateIssuer": {
                "type": "string",
                "default": "selected"
              }
            }
          }
        ]
      },
      "OtherLoginSettings": {
        "allOf": [
          {
            "$ref": "#/components/schemas/LoginSettings"
          },
          {
            "type": "object",
            "properties": {
              "certificateIssuer": {
                "type": "string",
                "default": "other"
              },
              "adminCertificateFileOrPath": {
                "type": "string",
                "description": "Administrator certificate file or path."
              },
              "adminCertificateDepthLimit": {
                "minimum": 0,
                "type": "integer",
                "description": "Administrator certificate depth limit.",
                "format": "int32"
              }
            }
          }
        ]
      },
      "InternalLoginSettings_1": {
        "allOf": [
          {
            "$ref": "#/components/schemas/LoginSettings"
          },
          {
            "type": "object",
            "properties": {
              "certificateIssuer": {
                "type": "string",
                "default": "internal"
              }
            }
          }
        ]
      },
      "TrustedLoginSettings_1": {
        "allOf": [
          {
            "$ref": "#/components/schemas/LoginSettings"
          },
          {
            "type": "object",
            "properties": {
              "certificateIssuer": {
                "type": "string",
                "default": "trusted"
              }
            }
          }
        ]
      },
      "SelectedLoginSettings_1": {
        "allOf": [
          {
            "$ref": "#/components/schemas/LoginSettings"
          },
          {
            "type": "object",
            "properties": {
              "certificateIssuer": {
                "type": "string",
                "default": "selected"
              }
            }
          }
        ]
      },
      "OtherLoginSettings_1": {
        "allOf": [
          {
            "$ref": "#/components/schemas/LoginSettings"
          },
          {
            "type": "object",
            "properties": {
              "certificateIssuer": {
                "type": "string",
                "default": "other"
              },
              "adminCertificateFileOrPath": {
                "type": "string",
                "description": "Administrator certificate file or path."
              },
              "adminCertificateDepthLimit": {
                "minimum": 0,
                "type": "integer",
                "description": "Administrator certificate depth limit.",
                "format": "int32"
              }
            }
          }
        ]
      },
      "AllowedSTServersResult": {
        "type": "object",
        "properties": {
          "resultSet": {
            "$ref": "#/components/schemas/ResultSet"
          },
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AllowedSTServers"
            }
          }
        }
      },
      "AllowedSTServers": {
        "type": "array",
        "items": {
          "type": "string",
          "description": "Allowed st servers."
        }
      },
      "KeystorePassword": {
        "required": [
          "confirmPassword",
          "newPassword",
          "oldPassword"
        ],
        "type": "object",
        "properties": {
          "oldPassword": {
            "type": "string"
          },
          "newPassword": {
            "type": "string"
          },
          "confirmPassword": {
            "type": "string"
          }
        }
      },
      "FileArchiving": {
        "required": [
          "archiveFolder",
          "deleteFilesOlderThan",
          "deleteFilesOlderThanUnit"
        ],
        "type": "object",
        "properties": {
          "isEnabled": {
            "type": "boolean",
            "description": "Whether file archiving is enabled.",
            "default": false
          },
          "globalArchivingPolicy": {
            "type": "string",
            "description": "Global archiving policy.",
            "enum": [
              "disabled",
              "enabled"
            ],
            "default": "disabled"
          },
          "archiveFolder": {
            "type": "string",
            "description": "Archive folder."
          },
          "encryptionCertificate": {
            "type": "string",
            "description": "Encryption certificate.",
            "default": "empty"
          },
          "deleteFilesOlderThan": {
            "minimum": 1,
            "type": "integer",
            "description": "Delete files older than x days.",
            "format": "int32"
          },
          "deleteFilesOlderThanUnit": {
            "type": "string",
            "description": "Retention period unit.",
            "enum": [
              "days",
              "hours"
            ]
          },
          "maximumFileSizeAllowedToArchive": {
            "type": "integer",
            "description": "Maximum allowed file size to archive.",
            "format": "int64",
            "default": 0
          }
        }
      },
      "ClusterInformation": {
        "type": "object",
        "properties": {
          "isCluster": {
            "type": "boolean",
            "description": "Define whether this a cluster environment i.e. at least one inserted node (true if in cluster environment, otherwise false).\n",
            "default": false
          },
          "clusterMode": {
            "type": "string",
            "description": "The cluster mode."
          },
          "clusterNodes": {
            "type": "array",
            "description": "List of current cluster nodes.",
            "items": {
              "$ref": "#/components/schemas/ClusterNode"
            }
          }
        }
      },
      "ClusterNode": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string"
          },
          "serverAddress": {
            "type": "string"
          },
          "lastSynchronized": {
            "type": "string"
          },
          "lastReportedAlive": {
            "type": "string"
          },
          "configurationId": {
            "type": "string"
          },
          "descriptor": {
            "type": "string"
          },
          "localNode": {
            "type": "string"
          },
          "mode": {
            "type": "string"
          },
          "stVersion": {
            "$ref": "#/components/schemas/VersionInformation"
          }
        }
      },
      "NodeThreshold": {
        "type": "object",
        "properties": {
          "numberOfNodes": {
            "minimum": 1,
            "type": "integer",
            "format": "int32"
          },
          "sendNotification": {
            "type": "boolean"
          },
          "subject": {
            "type": "string"
          },
          "notification": {
            "type": "string"
          }
        }
      },
      "Flow": {
        "type": "object",
        "properties": {
          "accountSetup": {
            "$ref": "#/components/schemas/AccountSetup"
          }
        }
      },
      "AccountSetup": {
        "type": "object",
        "properties": {
          "account": {
            "type": "object",
            "example": {
              "$ref": "accountSetup.yaml#/UserExample"
            },
            "discriminator": {
              "propertyName": "type",
              "mapping": {
                "user": "account.yaml#/UserAccount",
                "template": "account.yaml#/TemplateAccount",
                "service": "account.yaml#/ServiceAccount"
              }
            },
            "oneOf": [
              {
                "$ref": "#/components/schemas/UserAccount"
              },
              {
                "$ref": "#/components/schemas/TemplateAccount"
              },
              {
                "$ref": "#/components/schemas/ServiceAccount"
              }
            ]
          },
          "certificates": {
            "$ref": "#/components/schemas/AccountCertificates"
          },
          "sites": {
            "type": "array",
            "items": {
              "discriminator": {
                "propertyName": "type",
                "mapping": {
                  "http": "site.yaml#/HTTPSite",
                  "ftp": "site.yaml#/FTPSite",
                  "ssh": "site.yaml#/SSHSite",
                  "pesit": "site.yaml#/PeSITSite",
                  "AS2": "site.yaml#/AS2Site",
                  "folder": "site.yaml#/FolderMonitorSite",
                  "adhoc": "site.yaml#/AdhocSite",
                  "cd": "site.yaml#/ConnectDirectSite",
                  "synchrony transfer": "site.yaml#/SynchronySite",
                  "custom": "site.yaml#/CustomSite"
                }
              },
              "anyOf": [
                {
                  "$ref": "#/components/schemas/HTTPSite"
                },
                {
                  "$ref": "#/components/schemas/AdhocSite"
                },
                {
                  "$ref": "#/components/schemas/AS2Site"
                },
                {
                  "$ref": "#/components/schemas/ConnectDirectSite"
                },
                {
                  "$ref": "#/components/schemas/FTPSite"
                },
                {
                  "$ref": "#/components/schemas/SSHSite"
                },
                {
                  "$ref": "#/components/schemas/PeSITSite"
                },
                {
                  "$ref": "#/components/schemas/FolderMonitorSite"
                },
                {
                  "$ref": "#/components/schemas/SynchronySite"
                },
                {
                  "$ref": "#/components/schemas/CustomSite"
                }
              ]
            }
          },
          "transferProfiles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransferProfile"
            }
          },
          "routes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Route"
            }
          },
          "subscriptions": {
            "type": "array",
            "items": {
              "discriminator": {
                "propertyName": "type",
                "mapping": {
                  "AdvancedRouting": "subscription.yaml#/AdvancedRoutingSubscription",
                  "Basic": "subscription.yaml#/BasicSubscription",
                  "HumanSystem": "subscription.yaml#/HumanSystemSubscription",
                  "MBFT": "subscription.yaml#/MBFTSubscription",
                  "SharedFolder": "subscription.yaml#/SharedFolderSubscription",
                  "SiteMailbox": "subscription.yaml#/SiteMailboxSubscription",
                  "StandardRouter": "subscription.yaml#/StandardRouterSubscription",
                  "SynchronyTransfer": "subscription.yaml#/SynchronyTransferSubscription"
                }
              },
              "anyOf": [
                {
                  "$ref": "#/components/schemas/AdvancedRoutingSubscription"
                },
                {
                  "$ref": "#/components/schemas/BasicSubscription"
                },
                {
                  "$ref": "#/components/schemas/HumanSystemSubscription"
                },
                {
                  "$ref": "#/components/schemas/MBFTSubscription"
                },
                {
                  "$ref": "#/components/schemas/SharedFolderSubscription"
                },
                {
                  "$ref": "#/components/schemas/SiteMailboxSubscription"
                },
                {
                  "$ref": "#/components/schemas/StandardRouterSubscription"
                },
                {
                  "$ref": "#/components/schemas/SynchronyTransferSubscription"
                }
              ]
            }
          }
        }
      },
      "AccountCertificates": {
        "type": "object",
        "properties": {
          "login": {
            "type": "array",
            "items": {
              "discriminator": {
                "propertyName": "type",
                "mapping": {
                  "x509": "#/AccountX509Certificate",
                  "pgp": "#/AccountPGPCertificate",
                  "ssh": "#/AccountSSHCertificate"
                }
              },
              "anyOf": [
                {
                  "$ref": "#/components/schemas/AccountX509Certificate"
                },
                {
                  "$ref": "#/components/schemas/AccountPGPCertificate"
                },
                {
                  "$ref": "#/components/schemas/AccountSSHCertificate"
                }
              ]
            }
          },
          "partner": {
            "type": "array",
            "items": {
              "discriminator": {
                "propertyName": "type",
                "mapping": {
                  "x509": "#/AccountX509Certificate",
                  "pgp": "#/AccountPGPCertificate",
                  "ssh": "#/AccountSSHCertificate"
                }
              },
              "anyOf": [
                {
                  "$ref": "#/components/schemas/AccountX509Certificate"
                },
                {
                  "$ref": "#/components/schemas/AccountPGPCertificate"
                },
                {
                  "$ref": "#/components/schemas/AccountSSHCertificate"
                }
              ]
            }
          },
          "private": {
            "type": "array",
            "items": {
              "discriminator": {
                "propertyName": "type",
                "mapping": {
                  "x509": "#/AccountX509Certificate",
                  "pgp": "#/AccountPGPCertificate",
                  "ssh": "#/AccountSSHCertificate"
                }
              },
              "anyOf": [
                {
                  "$ref": "#/components/schemas/AccountX509Certificate"
                },
                {
                  "$ref": "#/components/schemas/AccountPGPCertificate"
                },
                {
                  "$ref": "#/components/schemas/AccountSSHCertificate"
                }
              ]
            }
          }
        }
      },
      "AccountX509Certificate": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AccountCertificate"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "x509"
              },
              "caPassword": {
                "type": "string",
                "description": "CA password"
              },
              "signatureAlgorithm": {
                "type": "string",
                "description": "Signature algorithm"
              },
              "subject": {
                "type": "string",
                "description": "Certificate subject"
              }
            }
          }
        ]
      },
      "AccountCertificate": {
        "required": [
          "account",
          "keyName",
          "keySize",
          "type",
          "validity"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Type of the certificate",
            "enum": [
              "pgp",
              "ssh",
              "x509"
            ]
          },
          "alias": {
            "type": "string",
            "description": "Certificate alias"
          },
          "keySize": {
            "type": "integer",
            "description": "Certificate key size"
          },
          "validity": {
            "type": "integer",
            "description": "Certificate validity"
          },
          "keyName": {
            "type": "string",
            "description": "Certificate key name"
          },
          "accessLevel": {
            "type": "string",
            "description": "Certificate access level"
          },
          "account": {
            "type": "string",
            "description": "Name of the account the certificate belongs to"
          },
          "certificatePassword": {
            "type": "string",
            "description": "Certificate password",
            "format": "password"
          },
          "generate": {
            "type": "boolean",
            "description": "When true, certificate would be generated.\nWhen false, certificate must be provided as part of the body in order to be imported.\n",
            "default": false
          },
          "additionalAttributes": {
            "type": "object",
            "additionalProperties": {
              "maxLength": 4000,
              "minLength": 1,
              "type": "string"
            },
            "description": "Additional attributes which are defined with \"key\": \"value\" pairs. Keys must start with \"userVars.\" prefix, follow the pattern: [a-zA-Z0-9_.]+\nand have length between 10 and 255 characters (including the prefix). Non prefixed part of key should not start with \"userVars.\", since it is\na reserved word. Both key and value cannot be blank.\n"
          }
        },
        "discriminator": {
          "propertyName": "type"
        }
      },
      "AccountPGPCertificate": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AccountCertificate"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "pgp"
              },
              "fullName": {
                "type": "string",
                "description": "Full name"
              },
              "keyType": {
                "type": "string",
                "description": "Key Type"
              },
              "email": {
                "type": "string",
                "description": "Email"
              }
            }
          }
        ]
      },
      "AccountSSHCertificate": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AccountCertificate"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "ssh"
              },
              "caPassword": {
                "type": "string",
                "description": "CA password"
              },
              "signatureAlgorithm": {
                "type": "string",
                "description": "Signature algorithm"
              },
              "subject": {
                "type": "string",
                "description": "Certificate subject"
              }
            }
          }
        ]
      },
      "MultiPartFlow": {
        "type": "object",
        "properties": {
          "AccountSetupBody": {
            "$ref": "#/components/schemas/Flow"
          },
          "Certificates": {
            "type": "string",
            "format": "binary"
          }
        }
      },
      "FlowResponseArray": {
        "type": "object",
        "properties": {
          "messages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FlowResponse"
            }
          },
          "certificates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Certificate"
            }
          }
        }
      },
      "FlowResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        }
      },
      "EventResult": {
        "type": "object",
        "properties": {
          "resultSet": {
            "$ref": "#/components/schemas/ResultSet"
          },
          "result": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Event"
                }
              ]
            }
          }
        }
      },
      "Event": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the event."
          },
          "agentTrigger": {
            "type": "string",
            "description": "Event's trigger."
          },
          "agentType": {
            "type": "string",
            "description": "Event type."
          },
          "arrivalTime": {
            "type": "integer",
            "description": "Event arrival time.",
            "format": "int64"
          },
          "clusterNode": {
            "type": "string",
            "description": "The cluster node on which the event is processing."
          },
          "eventGroup": {
            "type": "string",
            "description": "Event group."
          },
          "limited": {
            "type": "boolean",
            "description": "Client initiated transfers."
          },
          "nextProcessingTime": {
            "type": "integer",
            "description": "Next processing time.",
            "format": "int64"
          },
          "processorType": {
            "type": "string",
            "description": "Defines which task processor should take care of a task.",
            "enum": [
              "DEFAULT",
              "ADVANCED_ROUTING",
              "PESIT"
            ]
          },
          "recovered": {
            "type": "boolean",
            "description": "Whether the event is recovered or not."
          },
          "retryCount": {
            "type": "integer",
            "description": "Event retry number."
          },
          "status": {
            "type": "string",
            "description": "Event status."
          },
          "subscriptionId": {
            "type": "string",
            "description": "Subscription id which event is associated with."
          },
          "accountId": {
            "type": "string",
            "description": "Account id which event is associated with."
          },
          "fullTarget": {
            "type": "string",
            "description": "File location."
          },
          "lastHeartbeat": {
            "type": "integer",
            "description": "The last updated heartbeat timestamp in UTC for the persisted event.",
            "format": "int64"
          }
        }
      },
      "EventDetails": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Event"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "object",
                "description": "Data defined with \"key\": \"value\" pairs.\n"
              },
              "sessionData": {
                "type": "object",
                "description": "Session data defined with \"key\": \"value\" pairs.\n"
              }
            }
          }
        ]
      },
      "EventDelete": {
        "required": [
          "ids"
        ],
        "type": "object",
        "properties": {
          "ids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "EventDeleteResult": {
        "type": "object",
        "properties": {
          "events": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/EventDeleteObject"
                }
              ]
            }
          }
        }
      },
      "EventDeleteObject": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Identifier of the event."
          },
          "status": {
            "type": "string",
            "description": "Status of the delete operation for the event. Possible values \"deleted\", \"not found\"."
          }
        }
      },
      "ResultSet": {
        "type": "object",
        "properties": {
          "returnCount": {
            "type": "integer",
            "description": "Number of found entities."
          },
          "totalCount": {
            "type": "integer",
            "description": "Total number of entities available on the ST server."
          }
        }
      },
      "BandwidthLimits": {
        "required": [
          "inboundLimit",
          "outboundLimit",
          "policy"
        ],
        "type": "object",
        "properties": {
          "policy": {
            "type": "string",
            "description": "Bandwidth policy.",
            "enum": [
              "default",
              "custom",
              "disabled"
            ]
          },
          "inboundLimit": {
            "minimum": 0,
            "type": "integer",
            "description": "Bandwidth's inbound limit.",
            "format": "int32"
          },
          "outboundLimit": {
            "minimum": 0,
            "type": "integer",
            "description": "Bandwidth's outbound limit.",
            "format": "int32"
          }
        }
      },
      "FileMaintenanceSettings": {
        "required": [
          "policy"
        ],
        "type": "object",
        "properties": {
          "policy": {
            "type": "string",
            "description": "This property defines which File Maintenance settings will be applied for current account or business unit.",
            "enum": [
              "default",
              "custom",
              "disabled"
            ]
          },
          "deleteFilesDays": {
            "type": "integer",
            "description": "This property represents file retention period for account or business unit. All files older than the property value will be deleted.",
            "format": "int32"
          },
          "pattern": {
            "type": "string",
            "description": "This property represents file name pattern for account or business unit. All file names match of the property value will be regarded by the application."
          },
          "expirationPeriod": {
            "type": "boolean",
            "description": "If this property is set to true, the deletion of files based on file expiration period will be enabled. The file expiration period will be set as flow file attribute EXPIRE.ON.\n",
            "default": false
          },
          "removeFolders": {
            "type": "boolean",
            "description": "If this property is set to true, the deletion of folders remain empty after File Maintence will be enabled.",
            "default": false
          },
          "warningNotifications": {
            "type": "boolean",
            "description": "If this property is set to true, the warning notifications feature will be enabled.",
            "default": false
          },
          "sendSentinelAlert": {
            "type": "boolean",
            "description": "If this property is set to true, the warning TO_BE_DELETED state will be reported to Sentinel server.",
            "default": false
          },
          "warnNotifyAccount": {
            "type": "boolean",
            "description": "If this property is set to true, the warning notifications will be sent to account email.",
            "default": false
          },
          "warningNotificationsTemplate": {
            "type": "string",
            "description": "The email template name which will be used in File Maintenance warning email notifications for account.",
            "enum": [
              "FileMaintenanceNotification.xhtml",
              "AccountMaintenanceNotification.xhtml",
              "LoginThresholdReport.xhtml",
              "AdhocDefault.xhtml",
              "LoginThresholdNotification.xhtml",
              "RoutingFailedNotification.xhtml",
              "RoutingSucceededNotification.xhtml",
              "RoutingTriggeredNotification.xhtml"
            ],
            "default": "FileMaintenanceNotification.xhtml"
          },
          "notifyDays": {
            "type": "string",
            "description": "This property represents warning notifications period when emails will be sent to the recipients."
          },
          "deletionNotifications": {
            "type": "boolean",
            "description": "If this property is set to true, the deletion notifications feature will be enabled for the account.",
            "default": false
          },
          "deletionNotifyAccount": {
            "type": "boolean",
            "description": "If this property is set to true, the deletion notifications will be sent to account email.",
            "default": false
          },
          "deletionNotificationsTemplate": {
            "type": "string",
            "description": "The email template name which will be used in File Maintenance report email notifications for account or business unit.",
            "enum": [
              "FileMaintenanceNotification.xhtml",
              "AccountMaintenanceNotification.xhtml",
              "LoginThresholdReport.xhtml",
              "AdhocDefault.xhtml",
              "LoginThresholdNotification.xhtml",
              "RoutingFailedNotification.xhtml",
              "RoutingSucceededNotification.xhtml",
              "RoutingTriggeredNotification.xhtml"
            ],
            "default": "FileMaintenanceNotification.xhtml"
          }
        }
      },
      "AccountMaintenanceSettings": {
        "required": [
          "policy"
        ],
        "type": "object",
        "properties": {
          "criteria": {
            "$ref": "#/components/schemas/Criteria"
          },
          "action": {
            "$ref": "#/components/schemas/Action"
          },
          "emailNotificationBeforeAction": {
            "$ref": "#/components/schemas/EmailNotificationBeforeAction"
          },
          "emailNotificationForUserPassword": {
            "$ref": "#/components/schemas/EmailNotificationForUserPassword"
          },
          "emailNotificationForUserCertificate": {
            "$ref": "#/components/schemas/EmailNotificationForUserCertificate"
          },
          "policy": {
            "type": "string",
            "description": "This property defines which Account Maintenance settings will be applied for current account.",
            "enum": [
              "default",
              "custom",
              "disabled"
            ],
            "default": "default"
          }
        }
      },
      "Criteria": {
        "type": "object",
        "properties": {
          "daysAfterCreation": {
            "minimum": 1,
            "type": "integer",
            "description": "The criteria representing the amount of days after account creation or first maintenance job run.",
            "format": "int32"
          },
          "daysOfInactivity": {
            "minimum": 1,
            "type": "integer",
            "description": "The criteria representing the amount of days of account inactivity.",
            "format": "int32"
          }
        }
      },
      "Action": {
        "type": "object",
        "properties": {
          "action": {
            "type": "string",
            "description": "Applicable for account. The action which should be performed when Account Maintenance criteria is met.",
            "enum": [
              "DELETE",
              "DISABLE",
              "PURGE"
            ]
          },
          "daysDeleteDisabled": {
            "minimum": 1,
            "type": "integer",
            "description": "Applicable for account. The sub-action criteria representing the amount of days for deletion of accounts disabled by Account Maintenance application only. It is valid if action is set to \"DISABLE\".",
            "format": "int32"
          }
        }
      },
      "EmailNotificationBeforeAction": {
        "type": "object",
        "properties": {
          "emailTemplate": {
            "type": "string",
            "description": "Applicable for account. The email template name which will be used in Account Maintenance report email notifications.",
            "enum": [
              "AccountMaintenanceNotification.xhtml",
              "FileMaintenanceNotification.xhtml",
              "LoginThresholdReport.xhtml",
              "AdhocDefault.xhtml",
              "LoginThresholdNotification.xhtml",
              "RoutingFailedNotification.xhtml",
              "RoutingSucceededNotification.xhtml",
              "RoutingTriggeredNotification.xhtml"
            ],
            "default": "AccountMaintenanceNotification.xhtml"
          },
          "notifyDays": {
            "type": "string",
            "description": "The comma-separated periods for notifications."
          },
          "notifyAccount": {
            "type": "boolean",
            "description": "If the account matches a criteria and an action to be performed in X days or sooner, a notification mail should be sent to the email address configured for that user.",
            "default": false
          }
        }
      },
      "EmailNotificationForUserPassword": {
        "type": "object",
        "properties": {
          "emailTemplate": {
            "type": "string",
            "description": "Applicable for account. The email template name which will be used in Account Maintenance password email notifications.",
            "enum": [
              "AccountMaintenanceNotification.xhtml",
              "FileMaintenanceNotification.xhtml",
              "LoginThresholdReport.xhtml",
              "AdhocDefault.xhtml",
              "LoginThresholdNotification.xhtml",
              "RoutingFailedNotification.xhtml",
              "RoutingSucceededNotification.xhtml",
              "RoutingTriggeredNotification.xhtml"
            ],
            "default": "AccountMaintenanceNotification.xhtml"
          },
          "notifyDays": {
            "type": "string",
            "description": "The comma-separated periods for account password expiration notifications."
          },
          "notifyAccount": {
            "type": "boolean",
            "description": "If the account matches a criteria and an action to be performed in X days or sooner, a notification mail should be sent to the email address configured for that user.",
            "default": false
          }
        }
      },
      "EmailNotificationForUserCertificate": {
        "type": "object",
        "properties": {
          "emailTemplate": {
            "type": "string",
            "description": "Applicable for account. The email template name which will be used in Account Maintenance certificate email notifications.",
            "enum": [
              "AccountMaintenanceNotification.xhtml",
              "FileMaintenanceNotification.xhtml",
              "LoginThresholdReport.xhtml",
              "AdhocDefault.xhtml",
              "LoginThresholdNotification.xhtml",
              "RoutingFailedNotification.xhtml",
              "RoutingSucceededNotification.xhtml",
              "RoutingTriggeredNotification.xhtml"
            ],
            "default": "AccountMaintenanceNotification.xhtml"
          },
          "notifyDays": {
            "type": "string",
            "description": "The comma-separated periods for account certificates expiration notifications."
          },
          "notifyAccount": {
            "type": "boolean",
            "description": "If the account matches a criteria and an action to be performed in X days or sooner, a notification mail should be sent to the email address configured for that user.",
            "default": false
          }
        }
      },
      "AddressBookSettings": {
        "required": [
          "policy"
        ],
        "type": "object",
        "properties": {
          "policy": {
            "type": "string",
            "description": "AddressBook policy.",
            "enum": [
              "default",
              "custom",
              "disabled"
            ]
          },
          "nonAddressBookCollaborationAllowed": {
            "type": "boolean",
            "description": "Allow address book collaboration.",
            "default": false
          },
          "sources": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AddressBookSource"
            }
          }
        }
      },
      "FileMaintenanceSettingsForAccount_1": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FileMaintenanceSettings"
          },
          {
            "type": "object",
            "properties": {
              "reportNotified": {
                "type": "string",
                "description": "Report email notifications for future action."
              },
              "warnNotified": {
                "type": "string",
                "description": "Warning email notifications for future action."
              }
            }
          }
        ]
      },
      "AccountMaintenanceSettingsForAccount_1": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AccountMaintenanceSettings_1"
          },
          {
            "type": "object",
            "properties": {
              "accountDisabledDate": {
                "type": "integer",
                "description": "Date when account has been disabled by account retention maintenance.",
                "format": "int64"
              },
              "accountNotified": {
                "type": "boolean",
                "description": "Denotes whether an email has already been sent as a notification to the current account.",
                "readOnly": true,
                "default": false
              },
              "accountPasswordNotified": {
                "type": "boolean",
                "description": "If the account password will expire in one of configured notification days, a notification mail will be sent to the email addresses configured for that user.",
                "default": false
              },
              "accountCertificateNotified": {
                "type": "boolean",
                "description": "If the account certificates will expire in one of configured notification days, a notification mail will be sent to the email addresses configured for that user.",
                "default": false
              }
            }
          }
        ]
      },
      "AddressBookSettingsForAccount_1": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AddressBookSettings_1"
          },
          {
            "type": "object",
            "properties": {
              "contacts": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AddressBookContact"
                }
              }
            }
          }
        ]
      },
      "User_1": {
        "required": [
          "name",
          "passwordCredentials"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 80,
            "minLength": 0,
            "pattern": "^(([^\\+\\:\\[]*))$",
            "type": "string",
            "description": "The name of the user (the login name)",
            "default": "string"
          },
          "authExternal": {
            "type": "boolean",
            "description": "Tells if external authentication is enabled. It has value 'true' if the user authentication is done by an external authentication and 'false' if the user authentication is done by the ST system\n",
            "default": false
          },
          "lastLogin": {
            "type": "string",
            "description": "The time the user last successfully logged in. It has value null if the user never successfully logged in. The time is in RFC 2822 format - EEE, d MMM yyyy HH:mm:ss Z. Note: This property is read only property. Secure Transport server sets that property on user login.\n",
            "readOnly": true
          },
          "locked": {
            "type": "boolean",
            "description": "Test if authentication via the user login is disabled. This may be because the user has been locked or the maximum authentication attempts has been exceeded\n",
            "default": false
          },
          "failedAuthAttempts": {
            "minimum": 0,
            "type": "integer",
            "description": "The number of sequential failed authentication attempts",
            "format": "int32",
            "readOnly": true
          },
          "failedAuthMaximum": {
            "minimum": 1,
            "type": "integer",
            "description": "The number of failed authentication attempts allowed before authentication via the user is disabled. If not set, the value from configuration option Users.DefaultLockoutLimit will be taken. A value of 0 allows the user an unlimited number of attempts\n",
            "format": "int32"
          },
          "failedSshKeyAuthAttempts": {
            "minimum": 0,
            "type": "integer",
            "description": "The number of sequential failed ssh key authentication attempts",
            "format": "int32",
            "readOnly": true
          },
          "failedSshKeyAuthMaximum": {
            "minimum": 1,
            "type": "integer",
            "description": "The number of failed ssh key authentication attempts allowed before authentication via the user is disabled. If not set, the value from configuration option Users.DefaultSshKeyLockoutLimit will be taken. A value of 0 allows the user an unlimited number of attempts\n",
            "format": "int32"
          },
          "successfulAuthMaximum": {
            "minimum": 1,
            "type": "integer",
            "description": "The number of successful authentication attempts allowed within a predefined period before authentication is disabled. That period is defined globally. A value of null allows the user an unlimited number of attempts\n",
            "format": "int32"
          },
          "lastFailedAuth": {
            "type": "string",
            "description": "The time of the last unsuccessful authentication attempt. The time is in RFC 2822 format - EEE, d MMM yyyy HH:mm:ss Z. Note: This property is read only property. Secure Transport server sets that property on failed user login.\n",
            "readOnly": true
          },
          "lastFailedSshKeyAuth": {
            "type": "string",
            "description": "The time of the last unsuccessful ssh key authentication attempt. The time is in RFC 2822 format - EEE, d MMM yyyy HH:mm:ss Z. Note: This property is read only property. Secure Transport server sets that property on failed user login.\n",
            "readOnly": true
          },
          "successfulLogins": {
            "type": "integer",
            "description": "The number of successful login attempts",
            "readOnly": true
          },
          "passwordCredentials": {
            "$ref": "#/components/schemas/PasswordCredentials"
          },
          "secretQuestion": {
            "$ref": "#/components/schemas/SecretQuestion"
          }
        }
      },
      "BusinessUnitAccountMaintenanceSettings": {
        "required": [
          "policy"
        ],
        "type": "object",
        "properties": {
          "criteria": {
            "$ref": "#/components/schemas/BusinessCriteria"
          },
          "action": {
            "$ref": "#/components/schemas/Action"
          },
          "emailNotificationBeforeAction": {
            "$ref": "#/components/schemas/EmailNotificationBeforeAction"
          },
          "emailNotificationForUserPassword": {
            "$ref": "#/components/schemas/EmailNotificationForUserPassword"
          },
          "emailNotificationForUserCertificate": {
            "$ref": "#/components/schemas/EmailNotificationForUserCertificate"
          },
          "policy": {
            "type": "string",
            "description": "This property defines which Account Maintenance settings will be applied for current account.",
            "enum": [
              "default",
              "custom",
              "disabled"
            ],
            "default": "default"
          },
          "policyModifyingAllowed": {
            "type": "boolean",
            "description": "Whether the account under BU can have custom configuration of account time to live maintenance.",
            "default": false
          }
        }
      },
      "BusinessCriteria": {
        "type": "object",
        "properties": {
          "daysAfterCreation": {
            "minimum": 1,
            "type": "integer",
            "description": "The criteria representing the amount of days after account creation or first maintenance job run.",
            "format": "int32"
          },
          "daysOfInactivity": {
            "minimum": 1,
            "type": "integer",
            "description": "The criteria representing the amount of days of account inactivity.",
            "format": "int32"
          },
          "specificDate": {
            "pattern": "(0[1-9]|1[012])[- /.](0[1-9]|[12][0-9]|3[01])[- /.](19|20)\\d\\d",
            "type": "string",
            "description": "Specific date."
          }
        }
      },
      "AccountMaintenanceSettings_1": {
        "required": [
          "policy"
        ],
        "type": "object",
        "properties": {
          "criteria": {
            "$ref": "#/components/schemas/Criteria"
          },
          "action": {
            "$ref": "#/components/schemas/Action"
          },
          "emailNotificationBeforeAction": {
            "$ref": "#/components/schemas/EmailNotificationBeforeAction"
          },
          "emailNotificationForUserPassword": {
            "$ref": "#/components/schemas/EmailNotificationForUserPassword"
          },
          "emailNotificationForUserCertificate": {
            "$ref": "#/components/schemas/EmailNotificationForUserCertificate"
          },
          "policy": {
            "type": "string",
            "description": "This property defines which Account Maintenance settings will be applied for current account.",
            "enum": [
              "default",
              "custom",
              "disabled"
            ],
            "default": "default"
          }
        }
      },
      "AddressBookSettings_1": {
        "required": [
          "policy"
        ],
        "type": "object",
        "properties": {
          "policy": {
            "type": "string",
            "description": "AddressBook policy.",
            "enum": [
              "default",
              "custom",
              "disabled"
            ]
          },
          "nonAddressBookCollaborationAllowed": {
            "type": "boolean",
            "description": "Allow address book collaboration.",
            "default": false
          },
          "sources": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AddressBookSource"
            }
          }
        }
      },
      "accounts_body": {
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "user": "account.yaml#/UserAccount",
            "template": "account.yaml#/TemplateAccount",
            "service": "account.yaml#/ServiceAccount"
          }
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/UserAccount"
          },
          {
            "$ref": "#/components/schemas/TemplateAccount"
          },
          {
            "$ref": "#/components/schemas/ServiceAccount"
          }
        ]
      },
      "inline_response_200": {
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "user": "account.yaml#/UserAccount",
            "template": "account.yaml#/TemplateAccount",
            "service": "account.yaml#/ServiceAccount"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/UserAccount"
          },
          {
            "$ref": "#/components/schemas/TemplateAccount"
          },
          {
            "$ref": "#/components/schemas/ServiceAccount"
          }
        ]
      },
      "accounts_name_body": {
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "user": "account.yaml#/UserAccount",
            "template": "account.yaml#/TemplateAccount",
            "service": "account.yaml#/ServiceAccount"
          }
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/UserAccount"
          },
          {
            "$ref": "#/components/schemas/TemplateAccount"
          },
          {
            "$ref": "#/components/schemas/ServiceAccount"
          }
        ]
      },
      "name_operations_body": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          }
        }
      },
      "applications_body": {
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "AccountFilePurge": "application.yaml#/AccountFilePurgeApplication",
            "AccountTTL": "application.yaml#/AccountMaintenanceApplication",
            "AdvancedRouting": "application.yaml#/AdvancedRoutingApplication",
            "ArchiveMaint": "application.yaml#/ArchiveMaintApplication",
            "AuditLogMaint": "application.yaml#/AuditLogMaintApplication",
            "Basic": "application.yaml#/BasicApplication",
            "HumanSystem": "application.yaml#/HumanSystemApplication",
            "LogEntryMaint": "application.yaml#/LogEntryMaintApplication",
            "LoginThresholdMaintenance": "application.yaml#/LoginThresholdMaintenanceApplication",
            "MBFT": "application.yaml#/MBFTApplication",
            "PackageRetentionMaint": "application.yaml#/PackageRetentionMaintApplication",
            "SentinelLinkDataMaint": "application.yaml#/SentinelLinkDataMaintApplication",
            "SharedFolder": "application.yaml#/SharedFolderApplication",
            "SiteMailbox": "application.yaml#/SiteMailboxApplication",
            "StandardRouter": "application.yaml#/StandardRouterApplication",
            "SynchronyTransfer": "application.yaml#/SynchronyTransferApplication",
            "TransferLogMaint": "application.yaml#/TransferLogMaintApplication",
            "UnlicensedAccountMaint": "application.yaml#/UnlicensedAccountMaintApplication"
          }
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/AccountFilePurgeApplication"
          },
          {
            "$ref": "#/components/schemas/AccountMaintenanceApplication"
          },
          {
            "$ref": "#/components/schemas/AdvancedRoutingApplication"
          },
          {
            "$ref": "#/components/schemas/ArchiveMaintApplication"
          },
          {
            "$ref": "#/components/schemas/AuditLogMaintApplication"
          },
          {
            "$ref": "#/components/schemas/BasicApplication"
          },
          {
            "$ref": "#/components/schemas/HumanSystemApplication"
          },
          {
            "$ref": "#/components/schemas/LogEntryMaintApplication"
          },
          {
            "$ref": "#/components/schemas/LoginThresholdMaintenanceApplication"
          },
          {
            "$ref": "#/components/schemas/MBFTApplication"
          },
          {
            "$ref": "#/components/schemas/PackageRetentionMaintApplication"
          },
          {
            "$ref": "#/components/schemas/SentinelLinkDataMaintApplication"
          },
          {
            "$ref": "#/components/schemas/SharedFolderApplication"
          },
          {
            "$ref": "#/components/schemas/SiteMailboxApplication"
          },
          {
            "$ref": "#/components/schemas/StandardRouterApplication"
          },
          {
            "$ref": "#/components/schemas/SynchronyTransferApplication"
          },
          {
            "$ref": "#/components/schemas/TransferLogMaintApplication"
          },
          {
            "$ref": "#/components/schemas/UnlicensedAccountMaintApplication"
          }
        ]
      },
      "applications_name_body": {
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "AccountFilePurge": "application.yaml#/AccountFilePurgeApplication",
            "AccountTTL": "application.yaml#/AccountMaintenanceApplication",
            "AdvancedRouting": "application.yaml#/AdvancedRoutingApplication",
            "ArchiveMaint": "application.yaml#/ArchiveMaintApplication",
            "AuditLogMaint": "application.yaml#/AuditLogMaintApplication",
            "Basic": "application.yaml#/BasicApplication",
            "HumanSystem": "application.yaml#/HumanSystemApplication",
            "LogEntryMaint": "application.yaml#/LogEntryMaintApplication",
            "LoginThresholdMaintenance": "application.yaml#/LoginThresholdMaintenanceApplication",
            "MBFT": "application.yaml#/MBFTApplication",
            "PackageRetentionMaint": "application.yaml#/PackageRetentionMaintApplication",
            "SentinelLinkDataMaint": "application.yaml#/SentinelLinkDataMaintApplication",
            "SharedFolder": "application.yaml#/SharedFolderApplication",
            "SiteMailbox": "application.yaml#/SiteMailboxApplication",
            "StandardRouter": "application.yaml#/StandardRouterApplication",
            "SynchronyTransfer": "application.yaml#/SynchronyTransferApplication",
            "TransferLogMaint": "application.yaml#/TransferLogMaintApplication",
            "UnlicensedAccountMaint": "application.yaml#/UnlicensedAccountMaintApplication"
          }
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/AccountFilePurgeApplication"
          },
          {
            "$ref": "#/components/schemas/AccountMaintenanceApplication"
          },
          {
            "$ref": "#/components/schemas/AdvancedRoutingApplication"
          },
          {
            "$ref": "#/components/schemas/ArchiveMaintApplication"
          },
          {
            "$ref": "#/components/schemas/AuditLogMaintApplication"
          },
          {
            "$ref": "#/components/schemas/BasicApplication"
          },
          {
            "$ref": "#/components/schemas/HumanSystemApplication"
          },
          {
            "$ref": "#/components/schemas/LogEntryMaintApplication"
          },
          {
            "$ref": "#/components/schemas/LoginThresholdMaintenanceApplication"
          },
          {
            "$ref": "#/components/schemas/MBFTApplication"
          },
          {
            "$ref": "#/components/schemas/PackageRetentionMaintApplication"
          },
          {
            "$ref": "#/components/schemas/SentinelLinkDataMaintApplication"
          },
          {
            "$ref": "#/components/schemas/SharedFolderApplication"
          },
          {
            "$ref": "#/components/schemas/SiteMailboxApplication"
          },
          {
            "$ref": "#/components/schemas/StandardRouterApplication"
          },
          {
            "$ref": "#/components/schemas/SynchronyTransferApplication"
          },
          {
            "$ref": "#/components/schemas/TransferLogMaintApplication"
          },
          {
            "$ref": "#/components/schemas/UnlicensedAccountMaintApplication"
          }
        ]
      },
      "inline_response_200_1": {
        "type": "object",
        "properties": {
          "certificateProperties": {
            "$ref": "#/components/schemas/Certificate"
          },
          "certificate": {
            "type": "string",
            "format": "binary"
          }
        }
      },
      "id_operations_body": {
        "type": "object",
        "properties": {
          "exportPassword": {
            "type": "string",
            "description": "Export password to use when generating the pkcs12 container.",
            "format": "password"
          }
        }
      },
      "requests_id_body": {
        "type": "object",
        "properties": {
          "alias": {
            "type": "string",
            "description": "The name of the certificate to be imported."
          },
          "certificateFile": {
            "type": "string",
            "description": "The Certificate File to be uplaoded.",
            "format": "binary"
          }
        }
      },
      "inline_response_200_2": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/ResubmissionStatus"
          },
          {
            "$ref": "#/components/schemas/ReceiptVerificationResult"
          }
        ]
      },
      "mailTemplates_body": {
        "required": [
          "file",
          "name"
        ],
        "type": "object",
        "properties": {
          "file": {
            "type": "string",
            "description": "The mail template file to be uploaded.",
            "format": "binary"
          },
          "name": {
            "type": "string",
            "description": "File name of the uploaded file is ignored and file is saved on the ST server with the name specified in this parameter. The file extention should be xhtml."
          },
          "description": {
            "type": "string",
            "description": "The description of the mail template."
          }
        }
      },
      "mailTemplates_name_body": {
        "required": [
          "file"
        ],
        "type": "object",
        "properties": {
          "file": {
            "type": "string",
            "description": "The mail template file to be updated.",
            "format": "binary"
          },
          "description": {
            "type": "string",
            "description": "The description of the mail template."
          }
        }
      },
      "sites_body": {
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "http": "site.yaml#/HTTPSite",
            "ftp": "site.yaml#/FTPSite",
            "ssh": "site.yaml#/SSHSite",
            "pesit": "site.yaml#/PeSITSite",
            "AS2": "site.yaml#/AS2Site",
            "folder": "site.yaml#/FolderMonitorSite",
            "adhoc": "site.yaml#/AdhocSite",
            "cd": "site.yaml#/ConnectDirectSite",
            "synchrony transfer": "site.yaml#/SynchronySite",
            "custom": "site.yaml#/CustomSite"
          }
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/HTTPSite"
          },
          {
            "$ref": "#/components/schemas/AdhocSite"
          },
          {
            "$ref": "#/components/schemas/AS2Site"
          },
          {
            "$ref": "#/components/schemas/ConnectDirectSite"
          },
          {
            "$ref": "#/components/schemas/FTPSite"
          },
          {
            "$ref": "#/components/schemas/SSHSite"
          },
          {
            "$ref": "#/components/schemas/PeSITSite"
          },
          {
            "$ref": "#/components/schemas/FolderMonitorSite"
          },
          {
            "$ref": "#/components/schemas/SynchronySite"
          },
          {
            "$ref": "#/components/schemas/CustomSite"
          }
        ]
      },
      "inline_response_200_3": {
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "http": "site.yaml#/HTTPSite",
            "ftp": "site.yaml#/FTPSite",
            "ssh": "site.yaml#/SSHSite",
            "pesit": "site.yaml#/PeSITSite",
            "AS2": "site.yaml#/AS2Site",
            "folder": "site.yaml#/FolderMonitorSite",
            "adhoc": "site.yaml#/AdhocSite",
            "cd": "site.yaml#/ConnectDirectSite",
            "synchrony transfer": "site.yaml#/SynchronySite",
            "custom": "site.yaml#/CustomSite"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/HTTPSite"
          },
          {
            "$ref": "#/components/schemas/AdhocSite"
          },
          {
            "$ref": "#/components/schemas/AS2Site"
          },
          {
            "$ref": "#/components/schemas/ConnectDirectSite"
          },
          {
            "$ref": "#/components/schemas/FTPSite"
          },
          {
            "$ref": "#/components/schemas/SSHSite"
          },
          {
            "$ref": "#/components/schemas/PeSITSite"
          },
          {
            "$ref": "#/components/schemas/FolderMonitorSite"
          },
          {
            "$ref": "#/components/schemas/SynchronySite"
          },
          {
            "$ref": "#/components/schemas/CustomSite"
          }
        ]
      },
      "sites_id_body": {
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "http": "site.yaml#/HTTPSite",
            "ftp": "site.yaml#/FTPSite",
            "ssh": "site.yaml#/SSHSite",
            "pesit": "site.yaml#/PeSITSite",
            "AS2": "site.yaml#/AS2Site",
            "folder": "site.yaml#/FolderMonitorSite",
            "adhoc": "site.yaml#/AdhocSite",
            "cd": "site.yaml#/ConnectDirectSite",
            "synchrony transfer": "site.yaml#/SynchronySite",
            "custom": "site.yaml#/CustomSite"
          }
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/HTTPSite"
          },
          {
            "$ref": "#/components/schemas/AdhocSite"
          },
          {
            "$ref": "#/components/schemas/AS2Site"
          },
          {
            "$ref": "#/components/schemas/ConnectDirectSite"
          },
          {
            "$ref": "#/components/schemas/FTPSite"
          },
          {
            "$ref": "#/components/schemas/SSHSite"
          },
          {
            "$ref": "#/components/schemas/PeSITSite"
          },
          {
            "$ref": "#/components/schemas/FolderMonitorSite"
          },
          {
            "$ref": "#/components/schemas/SynchronySite"
          },
          {
            "$ref": "#/components/schemas/CustomSite"
          }
        ]
      },
      "inline_response_200_4": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/ConnectionDetailsResult"
          },
          {
            "$ref": "#/components/schemas/ListRemoteFolderResult"
          }
        ]
      },
      "siteTemplates_body": {
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "cd": "siteTemplate.yaml#/ConnectDirectSiteTemplate",
            "synchrony transfer": "siteTemplate.yaml#/SynchronySiteTemplate"
          }
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/ConnectDirectSiteTemplate"
          },
          {
            "$ref": "#/components/schemas/SynchronySiteTemplate"
          },
          {
            "$ref": "#/components/schemas/CustomSiteTemplate"
          }
        ]
      },
      "inline_response_200_5": {
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "cd": "siteTemplate.yaml#/ConnectDirectSiteTemplate",
            "synchrony transfer": "siteTemplate.yaml#/SynchronySiteTemplate",
            "custom": "siteTemplate.yaml#/CustomSiteTemplate"
          }
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/ConnectDirectSiteTemplate"
          },
          {
            "$ref": "#/components/schemas/SynchronySiteTemplate"
          },
          {
            "$ref": "#/components/schemas/CustomSiteTemplate"
          }
        ]
      },
      "siteTemplates_id_body": {
        "discriminator": {
          "propertyName": "protocol",
          "mapping": {
            "cd": "siteTemplate.yaml#/ConnectDirectSiteTemplate",
            "synchrony transfer": "siteTemplate.yaml#/SynchronySiteTemplate"
          }
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/ConnectDirectSiteTemplate"
          },
          {
            "$ref": "#/components/schemas/SynchronySiteTemplate"
          }
        ]
      },
      "inline_response_200_6": {
        "type": "object",
        "properties": {
          "transferProfileBody": {
            "$ref": "#/components/schemas/TransferProfile"
          },
          "callerTranscodingTable": {
            "type": "string",
            "format": "binary"
          },
          "receiverTranscodingTable": {
            "type": "string",
            "format": "binary"
          }
        }
      },
      "subscriptions_body": {
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "AdvancedRouting": "subscription.yaml#/AdvancedRoutingSubscription",
            "Basic": "subscription.yaml#/BasicSubscription",
            "HumanSystem": "subscription.yaml#/HumanSystemSubscription",
            "MBFT": "subscription.yaml#/MBFTSubscription",
            "SharedFolder": "subscription.yaml#/SharedFolderSubscription",
            "SiteMailbox": "subscription.yaml#/SiteMailboxSubscription",
            "StandardRouter": "subscription.yaml#/StandardRouterSubscription",
            "SynchronyTransfer": "subscription.yaml#/SynchronyTransferSubscription"
          }
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/AdvancedRoutingSubscription"
          },
          {
            "$ref": "#/components/schemas/BasicSubscription"
          },
          {
            "$ref": "#/components/schemas/HumanSystemSubscription"
          },
          {
            "$ref": "#/components/schemas/MBFTSubscription"
          },
          {
            "$ref": "#/components/schemas/SharedFolderSubscription"
          },
          {
            "$ref": "#/components/schemas/SiteMailboxSubscription"
          },
          {
            "$ref": "#/components/schemas/StandardRouterSubscription"
          },
          {
            "$ref": "#/components/schemas/SynchronyTransferSubscription"
          }
        ]
      },
      "subscriptions_id_body": {
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "AdvancedRouting": "subscription.yaml#/AdvancedRoutingSubscription",
            "Basic": "subscription.yaml#/BasicSubscription",
            "HumanSystem": "subscription.yaml#/HumanSystemSubscription",
            "MBFT": "subscription.yaml#/MBFTSubscription",
            "SharedFolder": "subscription.yaml#/SharedFolderSubscription",
            "SiteMailbox": "subscription.yaml#/SiteMailboxSubscription",
            "StandardRouter": "subscription.yaml#/StandardRouterSubscription",
            "SynchronyTransfer": "subscription.yaml#/SynchronyTransferSubscription"
          }
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/AdvancedRoutingSubscription"
          },
          {
            "$ref": "#/components/schemas/BasicSubscription"
          },
          {
            "$ref": "#/components/schemas/HumanSystemSubscription"
          },
          {
            "$ref": "#/components/schemas/MBFTSubscription"
          },
          {
            "$ref": "#/components/schemas/SharedFolderSubscription"
          },
          {
            "$ref": "#/components/schemas/SiteMailboxSubscription"
          },
          {
            "$ref": "#/components/schemas/StandardRouterSubscription"
          },
          {
            "$ref": "#/components/schemas/SynchronyTransferSubscription"
          }
        ]
      },
      "servers_body": {
        "discriminator": {
          "propertyName": "protocol",
          "mapping": {
            "ftp": "server.yaml#/FtpServerConfiguration",
            "http": "server.yaml#/HttpServerConfiguration",
            "ssh": "server.yaml#/SshServerConfiguration",
            "as2": "server.yaml#/As2ServerConfiguration",
            "pesit": "server.yaml#/PesitServerConfiguration"
          }
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/FtpServerConfiguration"
          },
          {
            "$ref": "#/components/schemas/HttpServerConfiguration"
          },
          {
            "$ref": "#/components/schemas/SshServerConfiguration"
          },
          {
            "$ref": "#/components/schemas/As2ServerConfiguration"
          },
          {
            "$ref": "#/components/schemas/PesitServerConfiguration"
          }
        ]
      },
      "servers_name_body": {
        "discriminator": {
          "propertyName": "protocol",
          "mapping": {
            "ftp": "server.yaml#/FtpServerConfiguration",
            "http": "server.yaml#/HttpServerConfiguration",
            "ssh": "server.yaml#/SshServerConfiguration",
            "as2": "server.yaml#/As2ServerConfiguration",
            "pesit": "server.yaml#/PesitServerConfiguration"
          }
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/FtpServerConfiguration"
          },
          {
            "$ref": "#/components/schemas/HttpServerConfiguration"
          },
          {
            "$ref": "#/components/schemas/SshServerConfiguration"
          },
          {
            "$ref": "#/components/schemas/As2ServerConfiguration"
          },
          {
            "$ref": "#/components/schemas/PesitServerConfiguration"
          }
        ]
      },
      "configurations_database_body": {
        "required": [
          "host",
          "port"
        ],
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "description": "Database Username.\n\n`Note` Required for MySQL, MariaDB, Oracle, MSSQL and PostgreSQL.\n"
          },
          "password": {
            "type": "string",
            "description": "Database Password.\n\n`Note` Required for MySQL, MariaDB, Oracle, MSSQL and PostgreSQL.\n",
            "format": "password"
          },
          "host": {
            "type": "string",
            "description": "Database Host.\n\n`Note` Required for Oracle, MSSQL and PostgreSQL.\n"
          },
          "port": {
            "type": "string",
            "description": "Database Port.\n\n`Note` Required for MySQL, MariaDB, Oracle, MSSQL and PostgreSQL.\n"
          },
          "databaseName": {
            "type": "string",
            "description": "Database Name.\n\n`Note` Required for Oracle, MSSQL and PostgreSQL.\n"
          },
          "useCustomJdbcUrl": {
            "type": "boolean",
            "description": "Use Custom JDBC Url flag.\n\n`Note` Required for Oracle and MSSQL.\n",
            "default": false
          },
          "jdbcUrlTemplate": {
            "type": "string",
            "description": "Custom JDBC Url.\n\n`Note` Required for Oracle and MSSQL.\n"
          },
          "secureConnectionEnabled": {
            "type": "boolean",
            "description": "Encrypt Connection flag.\n\n`Note` Required for MariaDB, Oracle, MSSQL and PostgreSQL.\n",
            "default": false
          },
          "serverCertificateDn": {
            "type": "string",
            "description": "Server Certificate Dn to be used for connection encryption.\n\n`Note` Required for Oracle and MSSQL.\n"
          },
          "enabledProtocols": {
            "type": "string",
            "description": "Comma-separated list of enabled Protocols. E.g. TLSv1.2.\n\n`Note` Required for Oracle.\n"
          },
          "enabledCipherSuites": {
            "type": "string",
            "description": "Comma-separated list of Enabled Cipher Suites.\n\n`Note` Required for Oracle.\n"
          },
          "certificateFile": {
            "type": "string",
            "description": "The Certificate File to be uploaded.\n\n`Note` Required for Oracle, MSSQL and PostgreSQL.\n",
            "format": "binary"
          },
          "internalDBRootCa": {
            "type": "string",
            "description": "The internal db Root Ca File to be uploaded.\n\n`Note` Required for MariaDB.\n",
            "format": "binary"
          },
          "internalDBServerKey": {
            "type": "string",
            "description": "The internal db Server Key Certificate File to be uploaded.\n\n`Note` Required for MariaDB.\n",
            "format": "binary"
          },
          "internalDBServerCert": {
            "type": "string",
            "description": "The internal db Server Certificate File to be uploaded.\n\n`Note` Required for MariaDB.\n",
            "format": "binary"
          },
          "kerberosMode": {
            "type": "boolean",
            "description": "Use Kerberos mode flag.\n\n`Note` Required for Oracle.\n",
            "default": false
          },
          "useKerberosFile": {
            "type": "boolean",
            "description": "Using Kerberos configuration file flag.\n\n`Note` Required for Oracle.\n",
            "default": false
          },
          "krbConfigurationFile": {
            "type": "string",
            "description": "The absolute path to the Kerberos configuration file.\n\n`Note` Required for Oracle.\n"
          },
          "krbCacheFilePath": {
            "type": "string",
            "description": "Path to Kerberos cache file.\n\n`Note` Required for Oracle.\n"
          },
          "useProxy": {
            "type": "boolean",
            "description": "Flag to use a proxied user for Oracle Proxy Authentication.\n\n`Note` Required for Oracle.\n"
          },
          "proxyUser": {
            "type": "string",
            "description": "The username of the proxied user.\n\n`Note` Required for Oracle.\n"
          }
        }
      },
      "database_componentType_body": {
        "required": [
          "databaseName",
          "host",
          "port"
        ],
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "description": "Database Username."
          },
          "password": {
            "type": "string",
            "description": "Database Password.",
            "format": "password"
          },
          "host": {
            "type": "string",
            "description": "Database Host."
          },
          "port": {
            "type": "string",
            "description": "Database Port."
          },
          "databaseName": {
            "type": "string",
            "description": "Database Name."
          },
          "useCustomJdbcUrl": {
            "type": "boolean",
            "description": "Use Custom JDBC Url flag.",
            "default": false
          },
          "jdbcUrlTemplate": {
            "type": "string",
            "description": "Custom JDBC Url."
          },
          "secureConnectionEnabled": {
            "type": "boolean",
            "description": "Enctypt Connection flag.",
            "default": false
          },
          "serverCertificateDn": {
            "type": "string",
            "description": "Server Certificate Dn to be used for connection ecnryption."
          },
          "enabledProtocols": {
            "type": "string",
            "description": "Comma-separated list of enabled Protocols. E.g. TLSv1.2."
          },
          "enabledCipherSuites": {
            "type": "string",
            "description": "Comma-separated list of Enabled Cipher Suites."
          },
          "certificateFile": {
            "type": "string",
            "description": "The Certificate File to be uplaoded.",
            "format": "binary"
          },
          "kerberosMode": {
            "type": "boolean",
            "description": "Use Kerberos mode flag.\n\n`Note` Required for Oracle.\n",
            "default": false
          },
          "useKerberosFile": {
            "type": "boolean",
            "description": "Using Kerberos configuration file flag.\n\n`Note` Required for Oracle.\n",
            "default": false
          },
          "krbConfigurationFile": {
            "type": "string",
            "description": "The absolute path to the Kerberos configuration file.\n\n`Note` Required for Oracle.\n"
          },
          "krbCacheFilePath": {
            "type": "string",
            "description": "Path to Kerberos cache file.\n\n`Note` Required for Oracle.\n"
          },
          "useProxy": {
            "type": "boolean",
            "description": "Flag to use a proxied user for Oracle Proxy Authentication.\n\n`Note` Required for Oracle.\n"
          },
          "proxyUser": {
            "type": "string",
            "description": "The username of the proxied user.\n\n`Note` Required for Oracle.\n"
          }
        }
      },
      "database_operations_body": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "description": "Database Username.\n\n`Note` Obligatory when performing `test` operation. Required for MySQL, MariaDB, Oracle, MSSQL and PostgreSQL.\n"
          },
          "password": {
            "type": "string",
            "description": "Database Password.\n\n`Note` Obligatory when performing `test` operation. Required for MySQL, MariaDB, Oracle, MSSQL and PostgreSQL.\n",
            "format": "password"
          },
          "host": {
            "type": "string",
            "description": "Database Host.\n\n`Note` Ðžbligatory when performing `test` operation. Required for MySQL, MariaDB, Oracle, MSSQL and PostgreSQL.\n"
          },
          "port": {
            "type": "string",
            "description": "Database Port.\n\n`Note` Obligatory when performing `test` operation. Required for MySQL, MariaDB, Oracle, MSSQL and PostgreSQL.\n"
          },
          "databaseName": {
            "type": "string",
            "description": "Database Name.\n\n`Note` Used for `test` operation. Required for Oracle, MSSQL and PostgreSQL.\n"
          },
          "useCustomJdbcUrl": {
            "type": "boolean",
            "description": "Use Custom JDBC Url flag.\n\n`Note` Used for `test` operation. Required for Oracle and MSSQL.\n",
            "default": false
          },
          "jdbcUrlTemplate": {
            "type": "string",
            "description": "Custom JDBC Url.\n\n`Note` Used for `test` operation. Required for Oracle and MSSQL.\n"
          },
          "secureConnectionEnabled": {
            "type": "boolean",
            "description": "Encrypt Connection flag.\n\n`Note` Used for `test` operation. Required for Oracle, MSSQL and PostgreSQL.\n\nThis property is not supported for the embedded database as it will be taken and used from the current configuration.\n",
            "default": false
          },
          "serverCertificateDn": {
            "type": "string",
            "description": "Server Certificate Dn to be used for connection encryption.\n\n`Note` Used for `test` operation. Required for Oracle and MSSQL.\n"
          },
          "enabledProtocols": {
            "type": "string",
            "description": "Comma-separated list of enabled Protocols. E.g. TLSv1.2.\n\n`Note` Used for `test` operation. Required for Oracle.\n"
          },
          "enabledCipherSuites": {
            "type": "string",
            "description": "Comma-separated list of Enabled Cipher Suites.\n\n`Note` Used for `test` operation. Required for Oracle.\n"
          },
          "certificateFile": {
            "type": "string",
            "description": "The Certificate File to be uploaded.\n\n`Note` Used for `test` operation. Required for Oracle, MSSQL and PostgreSQL.\n",
            "format": "binary"
          },
          "kerberosMode": {
            "type": "boolean",
            "description": "Use Kerberos mode flag.\n\n`Note` Required for Oracle.\n",
            "default": false
          },
          "useKerberosFile": {
            "type": "boolean",
            "description": "Using Kerberos configuration file flag.\n\n`Note` Required for Oracle.\n",
            "default": false
          },
          "krbConfigurationFile": {
            "type": "string",
            "description": "The absolute path to the Kerberos configuration file.\n\n`Note` Required for Oracle.\n"
          },
          "krbCacheFilePath": {
            "type": "string",
            "description": "Path to Kerberos cache file.\n\n`Note` Required for Oracle.\n"
          },
          "useProxy": {
            "type": "boolean",
            "description": "Flag to use a proxied user for Oracle Proxy Authentication.\n\n`Note` Required for Oracle.\n"
          },
          "proxyUser": {
            "type": "string",
            "description": "The username of the proxied user.\n\n`Note` Required for Oracle.\n"
          }
        }
      },
      "inline_response_200_7": {
        "discriminator": {
          "propertyName": "certificateIssuer",
          "mapping": {
            "internal": "configuration.yaml#/InternalLoginSettings",
            "trusted": "configuration.yaml#/TrustedLoginSettings",
            "selected": "configuration.yaml#/SelectedLoginSettings",
            "other": "configuration.yaml#/OtherLoginSettings"
          }
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/InternalLoginSettings"
          },
          {
            "$ref": "#/components/schemas/TrustedLoginSettings"
          },
          {
            "$ref": "#/components/schemas/SelectedLoginSettings"
          },
          {
            "$ref": "#/components/schemas/OtherLoginSettings"
          }
        ]
      },
      "configurations_loginSettings_body": {
        "discriminator": {
          "propertyName": "certificateIssuer",
          "mapping": {
            "internal": "configuration.yaml#/InternalLoginSettings",
            "trusted": "configuration.yaml#/TrustedLoginSettings",
            "selected": "configuration.yaml#/SelectedLoginSettings",
            "other": "configuration.yaml#/OtherLoginSettings"
          }
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/InternalLoginSettings"
          },
          {
            "$ref": "#/components/schemas/TrustedLoginSettings"
          },
          {
            "$ref": "#/components/schemas/SelectedLoginSettings"
          },
          {
            "$ref": "#/components/schemas/OtherLoginSettings"
          }
        ]
      },
      "configurations_clusterManagement_body": {
        "properties": {
          "serverAddress": {
            "type": "string",
            "description": "Server's address."
          }
        }
      },
      "inline_response_200_8": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FlowResponseArray"
          },
          {
            "type": "object",
            "properties": {
              "certificates": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        ]
      },
      "inline_response_200_9": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Flow"
          },
          {
            "type": "object",
            "properties": {
              "certificates": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        ]
      },
      "PluggableRouteStep_customProperties": {
        "type": "object",
        "properties": {
          "property_1": {
            "type": "string"
          },
          "property_2": {
            "type": "string"
          }
        },
        "example": null
      },
      "VersionInformation_spiVersions": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Plugin categorization"
          },
          "versions": {
            "type": "array",
            "description": "The supported versions for current plugin category",
            "items": {
              "type": "string"
            }
          }
        },
        "example": null
      }
    },
    "responses": {
      "BadRequest": {
        "description": "Bad request - server could not understand the request due to invalid syntax."
      },
      "Unauthorized": {
        "description": "Unauthorized - incorrect login credentials."
      },
      "Forbidden": {
        "description": "Forbidden - insufficient permissions to perform the operation."
      },
      "NotFound": {
        "description": "Not Found - entity with specified parameter can not be found on the ST server."
      },
      "NotAcceptable": {
        "description": "Not Acceptable - the server cannot produce a response matching the list of acceptable values defined in the request's headers."
      },
      "UnsupportedMediaType": {
        "description": "Unsupported Media Type - the server refuses to accept the request because the payload format is in an unsupported format."
      },
      "InternalServerError": {
        "description": "Internal Server Error"
      },
      "Created": {
        "description": "Created - the request has succeeded and a new resource has been created as a result of it."
      },
      "Conflict": {
        "description": "Conflict - duplicate entity."
      },
      "NoContent": {
        "description": "No Content - successful operation."
      },
      "OK": {
        "description": "OK - successful operation."
      },
      "ServiceUnavailable": {
        "description": "Service Unavailable."
      },
      "UnprocessableEntity": {
        "description": "Unprocessable Entity - the server understands the content type of the request entity, and the syntax of the request entity is correct, but it was unable to process the contained instructions."
      },
      "MethodNotAllowed": {
        "description": "Method Not Allowed - request method is not supported by the target resource."
      }
    },
    "examples": {
      "UserAccountExample": {
        "value": {
          "name": "string",
          "uid": "string",
          "gid": "string",
          "type": "user",
          "homeFolder": "string",
          "homeFolderAccessLevel": "PRIVATE",
          "notes": "string",
          "skin": "Default HTML Template",
          "lastModified": "string",
          "loginRestrictionPolicy": "string",
          "mappedUser": "string",
          "authByEmail": false,
          "disabled": false,
          "businessUnit": "string",
          "transfersWebServiceAllowed": false,
          "pesitId": "string",
          "accountCreationDate": 0,
          "rejectReason": "string",
          "accountVerificationStatus": "string",
          "managedByCG": false,
          "transferType": "string",
          "accountSubmitForApprove": false,
          "accountEncryptMode": "UNSPECIFIED",
          "subscriptionFolderDiscovery": "ITERATIVE",
          "fileArchivingPolicy": "DEFAULT",
          "additionalAttributes": {
            "additionalProp1": "string",
            "additionalProp2": "string",
            "additionalProp3": "string"
          },
          "contact": {
            "email": "string",
            "phone": "string"
          },
          "adhocSettings": {
            "deliveryMethod": "string",
            "enrollmentTypes": [
              "string"
            ],
            "implicitEnrollmentType": "string"
          },
          "unlicensed": false,
          "isUnlicensedUserAllowedToReply": false,
          "routingMode": "string",
          "user": {
            "name": "string",
            "authExternal": false,
            "locked": false,
            "failedAuthAttempts": 0,
            "failedAuthMaximum": 1,
            "lastFailedAuth": "string",
            "failedSshKeyAuthAttempts": 0,
            "failedSshKeyAuthMaximum": 1,
            "lastFailedSshKeyAuth": "string",
            "lastLogin": "string",
            "successfulAuthMaximum": 1,
            "successfulLogins": 1,
            "secretQuestion": {
              "secretQuestion": "string",
              "secretAnswerGuessFailures": 0,
              "forceSecretQuestionChange": false
            },
            "passwordCredentials": {
              "password": "string",
              "forcePasswordChange": false,
              "passwordExpiryInterval": 1
            }
          },
          "addressBookSettings": {
            "policy": "string",
            "nonAddressBookCollaborationAllowed": false,
            "sources": [
              {
                "id": "string",
                "name": "string",
                "type": "string",
                "parentGroup": "string",
                "enabled": false,
                "customProperties": {
                  "value1": "string",
                  "value2": "string"
                }
              }
            ],
            "contacts": [
              {
                "id": "string",
                "fullName": "string",
                "primaryEmail": "string"
              }
            ]
          },
          "accountMaintenanceSettings": {
            "criteria": {
              "daysAfterCreation": 1,
              "daysOfInactivity": 1
            },
            "action": {
              "action": "string",
              "daysDeleteDisabled": 1
            },
            "emailNotificationBeforeAction": {
              "emailTemplate": "string",
              "notifyDays": "string",
              "notifyAccount": false
            },
            "emailNotificationForUserPassword": {
              "emailTemplate": "string",
              "notifyDays": "string",
              "notifyAccount": false
            },
            "emailNotificationForUserCertificate": {
              "emailTemplate": "string",
              "notifyDays": "string",
              "notifyAccount": false
            },
            "policy": "string",
            "accountDisabledDate": 0,
            "accountNotified": false,
            "accountPasswordNotified": false,
            "accountCertificateNotified": false
          },
          "bandwidthLimits": {
            "policy": "string",
            "inboundLimit": 0,
            "outboundLimit": 0
          },
          "fileMaintenanceSettings": {
            "policy": "string",
            "deleteFilesDays": 0,
            "pattern": "string",
            "expirationPeriod": false,
            "removeFolders": false,
            "warningNotifications": false,
            "warnNotifyAccount": false,
            "warningNotificationsTemplate": "string",
            "notifyDays": "string",
            "sendSentinelAlert": false,
            "deletionNotifications": false,
            "deletionNotifyAccount": false,
            "deletionNotificationsTemplate": "string",
            "reportNotified": false,
            "warnNotified": false
          }
        }
      },
      "TemplateAccountExample": {
        "value": {
          "name": "string",
          "homeFolder": "string",
          "type": "template",
          "uid": "string",
          "gid": "string",
          "templateClass": "string",
          "homeFolderAccessLevel": "PRIVATE",
          "skin": "Default HTML Template",
          "notes": "string",
          "lastModified": "string",
          "authByEmail": false,
          "disabled": false,
          "transfersWebServiceAllowed": false,
          "pesitId": "string",
          "accountCreationDate": 0,
          "loginRestrictionPolicy": "string",
          "transferType": "N",
          "accountSubmitForApprove": false,
          "accountVerificationStatus": "string",
          "managedByCG": false,
          "businessUnit": "string",
          "rejectReason": "string",
          "isUnlicensedUserAllowedToReply": false,
          "accountEncryptMode": "UNSPECIFIED",
          "subscriptionFolderDiscovery": "ITERATIVE",
          "fileArchivingPolicy": "DEFAULT",
          "enrolledWithExternalPass": false,
          "mappedUser": "string",
          "additionalAttributes": {
            "additionalProp1": "string",
            "additionalProp2": "string",
            "additionalProp3": "string"
          },
          "contact": {
            "email": "string",
            "phone": "string"
          },
          "adhocSettings": {
            "deliveryMethod": "DEFAULT",
            "enrollmentTypes": [
              "string"
            ],
            "implicitEnrollmentType": "ANONYMOUS_LINK"
          },
          "fileMaintenanceSettings": {
            "policy": "default",
            "deleteFilesDays": 0,
            "pattern": "string",
            "expirationPeriod": false,
            "removeFolders": false,
            "warningNotifications": false,
            "sendSentinelAlert": false,
            "warnNotifyAccount": false,
            "warningNotificationsTemplate": "FileMaintenanceNotification.xhtml",
            "notifyDays": "string",
            "deletionNotifications": false,
            "deletionNotifyAccount": false,
            "deletionNotificationsTemplate": "FileMaintenanceNotification.xhtml",
            "reportNotified": false,
            "warnNotified": false
          },
          "bandwidthLimits": {
            "policy": "default",
            "inboundLimit": 0,
            "outboundLimit": 0
          },
          "addressBookSettings": {
            "policy": "default",
            "nonAddressBookCollaborationAllowed": false,
            "sources": [
              {
                "id": "string",
                "name": "string",
                "type": "LOCAL",
                "parentGroup": "string",
                "enabled": false,
                "customProperties": {
                  "additionalProp1": "string",
                  "additionalProp2": "string",
                  "additionalProp3": "string"
                }
              }
            ],
            "contacts": [
              {
                "id": "string",
                "fullName": "string",
                "primaryEmail": "string"
              }
            ]
          }
        }
      },
      "ServiceAccountExample": {
        "value": {
          "name": "string",
          "homeFolder": "string",
          "type": "service",
          "uid": "string",
          "gid": "string",
          "homeFolderAccessLevel": "PRIVATE",
          "skin": "Default HTML Template",
          "notes": "string",
          "lastModified": "string",
          "authByEmail": false,
          "routingMode": "string",
          "disabled": false,
          "transfersWebServiceAllowed": false,
          "pesitId": "string",
          "accountCreationDate": 0,
          "loginRestrictionPolicy": "string",
          "transferType": "N",
          "accountSubmitForApprove": false,
          "accountVerificationStatus": "string",
          "managedByCG": false,
          "businessUnit": "string",
          "rejectReason": "string",
          "accountEncryptMode": "UNSPECIFIED",
          "subscriptionFolderDiscovery": "ITERATIVE",
          "fileArchivingPolicy": "DEFAULT",
          "mappedUser": "string",
          "additionalAttributes": {
            "additionalProp1": "string",
            "additionalProp2": "string",
            "additionalProp3": "string"
          },
          "contact": {
            "email": "string",
            "phone": "string"
          },
          "adhocSettings": {
            "deliveryMethod": "DEFAULT",
            "enrollmentTypes": [
              "string"
            ],
            "implicitEnrollmentType": "ANONYMOUS_LINK"
          },
          "user": {
            "name": "string",
            "authExternal": false,
            "lastLogin": "string",
            "locked": false,
            "failedAuthAttempts": 0,
            "failedAuthMaximum": 0,
            "successfulAuthMaximum": 0,
            "lastFailedAuth": "string",
            "failedSshKeyAuthAttempts": 0,
            "failedSshKeyAuthMaximum": 1,
            "lastFailedSshKeyAuth": "string",
            "successfulLogins": 0,
            "passwordCredentials": {
              "password": "string",
              "passwordDigest": "string",
              "forcePasswordChange": false,
              "lastPasswordChange": "string",
              "lastOwnPasswordChange": "string",
              "passwordExpiryInterval": 0
            },
            "secretQuestion": {
              "secretQuestion": "string",
              "secretAnswerGuessFailures": 0,
              "forceSecretQuestionChange": false
            }
          }
        }
      },
      "FileMaintenanceApplication": {
        "value": {
          "name": "string",
          "type": "AccountFilePurge",
          "notes": "string",
          "managedByCG": false,
          "additionalAttributes": {
            "additionalProp1": "string",
            "additionalProp2": "string",
            "additionalProp3": "string"
          },
          "businessUnits": [
            "string"
          ],
          "deleteFilesDays": 0,
          "pattern": "string",
          "expirationPeriod": false,
          "removeFolders": false,
          "warningNotifications": false,
          "notifyDays": "string",
          "sendSentinelAlert": false,
          "warnNotifyAccount": false,
          "warningNotificationsTemplate": "FileMaintenanceNotification.xhtml",
          "warnNotifyEmails": "string",
          "deletionNotifications": false,
          "deletionNotificationsTemplate": "FileMaintenanceNotification.xhtml",
          "deletionNotifyAccount": false,
          "deletionNotifyEmails": "string",
          "schedules": [
            {
              "tag": "string",
              "type": "ONCE",
              "executionTimes": [
                "string"
              ],
              "startDate": "2020-02-18T09:39:01.077+00:00",
              "skipHolidays": false
            }
          ]
        }
      },
      "AccountMaintenanceApplication": {
        "value": {
          "name": "string",
          "type": "AccountTTL",
          "notes": "string",
          "managedByCG": false,
          "additionalAttributes": {
            "additionalProp1": "string",
            "additionalProp2": "string",
            "additionalProp3": "string"
          },
          "businessUnits": [
            "string"
          ],
          "accountCreationDaysCriteria": 0,
          "accountInactivityDaysCriteria": 0,
          "accountAction": "DELETE",
          "deleteDisabledAccountAfterXDaysCriteria": 0,
          "notificationDays": "string",
          "reportNotificationEmailTemplate": "AccountMaintenanceNotification.xhtml",
          "enableAccountNotifications": true,
          "actionNotificationEmails": "string",
          "passwordNotificationDays": "string",
          "passwordNotificationEmailTemplate": "AccountMaintenanceNotification.xhtml",
          "enablePasswordExpirationNotifications": true,
          "passwordExpirationNotificationEmails": "string",
          "certificateNotificationDays": "string",
          "certificateNotificationEmailTemplate": "AccountMaintenanceNotification.xhtml",
          "enableCertificateExpirationNotifications": true,
          "notificationCertificateEmails": "string",
          "firstMaintenanceRun": 0,
          "schedules": [
            {
              "tag": "string",
              "type": "HOURLY",
              "executionTimes": [
                "string"
              ],
              "startDate": "2020-02-18T09:39:01.077+00:00",
              "endDate": "2020-02-18T09:39:01.077+00:00",
              "hourlyStep": 0,
              "skipHolidays": false,
              "hourlyType": "PERHOURS"
            }
          ]
        }
      },
      "AdvancedRoutingApplication": {
        "value": {
          "name": "string",
          "type": "AdvancedRouting",
          "notes": "string",
          "additionalAttributes": {
            "additionalProp1": "string",
            "additionalProp2": "string",
            "additionalProp3": "string"
          },
          "businessUnits": [
            "string"
          ]
        }
      },
      "ArchiveMaintApplication": {
        "value": {
          "name": "string",
          "type": "ArchiveMaint",
          "notes": "string",
          "managedByCG": false,
          "additionalAttributes": {
            "additionalProp1": "string",
            "additionalProp2": "string",
            "additionalProp3": "string"
          },
          "businessUnits": [
            "string"
          ],
          "schedules": [
            {
              "tag": "string",
              "type": "DAILY",
              "executionTimes": [
                "string"
              ],
              "startDate": "2020-02-18T09:39:01.077+00:00",
              "endDate": "2020-02-18T09:39:01.077+00:00",
              "skipHolidays": false,
              "dailyType": "EVERYDAY"
            }
          ]
        }
      },
      "AuditLogMaintApplication": {
        "value": {
          "name": "string",
          "type": "AuditLogMaint",
          "notes": "string",
          "managedByCG": false,
          "additionalAttributes": {
            "additionalProp1": "string",
            "additionalProp2": "string",
            "additionalProp3": "string"
          },
          "businessUnits": [
            "string"
          ],
          "timeKeepingDataInDb": 0,
          "dayMode": 0,
          "exportEnabled": false,
          "exportDir": "string",
          "schedules": [
            {
              "tag": "string",
              "type": "WEEKLY",
              "executionTimes": [
                "string"
              ],
              "daysOfWeek": [
                "SUNDAY"
              ],
              "startDate": "2020-02-18T09:39:01.077+00:00",
              "endDate": "2020-02-18T09:39:01.077+00:00",
              "skipHolidays": false
            }
          ]
        }
      },
      "BasicApplication": {
        "value": {
          "name": "string",
          "type": "Basic",
          "notes": "string",
          "managedByCG": false,
          "additionalAttributes": {
            "additionalProp1": "string",
            "additionalProp2": "string",
            "additionalProp3": "string"
          },
          "businessUnits": [
            "string"
          ]
        }
      },
      "HumanSystemApplication": {
        "value": {
          "name": "string",
          "type": "HumanSystem",
          "notes": "string",
          "managedByCG": false,
          "additionalAttributes": {
            "additionalProp1": "string",
            "additionalProp2": "string",
            "additionalProp3": "string"
          },
          "businessUnits": [
            "string"
          ]
        }
      },
      "LogEntryMaintApplication": {
        "value": {
          "name": "string",
          "type": "LogEntryMaint",
          "notes": "string",
          "managedByCG": false,
          "additionalAttributes": {
            "additionalProp1": "string",
            "additionalProp2": "string",
            "additionalProp3": "string"
          },
          "businessUnits": [
            "string"
          ],
          "timeKeepingDataInDb": 0,
          "exportDir": "string",
          "daysKeepingDataInFiles": 0,
          "recordsPerFile": 0,
          "dayMode": 0,
          "exportEnabled": true,
          "parallelismDegree": 0,
          "schedules": [
            {
              "tag": "string",
              "type": "MONTHLY",
              "executionTimes": [
                "string"
              ],
              "daysOfMonth": [
                0
              ],
              "daysOfWeek": [
                "SUNDAY"
              ],
              "startDate": "2020-02-18T09:39:01.077+00:00",
              "endDate": "2020-02-18T09:39:01.077+00:00",
              "weekOfMonth": "FIRST",
              "skipHolidays": false,
              "monthlyType": "EXACT"
            }
          ]
        }
      },
      "LoginTresholdMaintenanceApplication": {
        "value": {
          "name": "string",
          "type": "LoginThresholdMaintenance",
          "notes": "string",
          "managedByCG": false,
          "additionalAttributes": {
            "additionalProp1": "string",
            "additionalProp2": "string",
            "additionalProp3": "string"
          },
          "businessUnits": [
            "string"
          ],
          "isUnlock": true,
          "isReport": true,
          "emails": "string",
          "reportEmailTemplate": "LoginThresholdReport.xhtml",
          "schedules": [
            {
              "tag": "string",
              "type": "YEARLY",
              "executionTimes": [
                "string"
              ],
              "daysOfMonth": [
                0
              ],
              "months": [
                "JANUARY"
              ],
              "startDate": "2020-02-18T09:39:01.077+00:00",
              "endDate": "2020-02-18T09:39:01.077+00:00",
              "skipHolidays": false
            }
          ]
        }
      },
      "MBFTApplication": {
        "value": {
          "name": "string",
          "type": "MBFT",
          "notes": "string",
          "managedByCG": false,
          "additionalAttributes": {
            "additionalProp1": "string",
            "additionalProp2": "string",
            "additionalProp3": "string"
          },
          "businessUnits": [
            "string"
          ]
        }
      },
      "PackageRetentionMaintApplication": {
        "value": {
          "name": "string",
          "type": "PackageRetentionMaint",
          "notes": "string",
          "managedByCG": false,
          "additionalAttributes": {
            "additionalProp1": "string",
            "additionalProp2": "string",
            "additionalProp3": "string"
          },
          "businessUnits": [
            "string"
          ],
          "maxRunningMinutes": 0,
          "schedules": [
            {
              "tag": "string",
              "type": "EXPRESSION",
              "startDate": "2020-02-18T09:39:01.077+00:00",
              "endDate": "2020-02-18T09:39:01.077+00:00",
              "cronExpression": "string"
            }
          ]
        }
      },
      "SentinelLinkDataMaintApplication": {
        "value": {
          "name": "string",
          "type": "SentinelLinkDataMaint",
          "notes": "string",
          "managedByCG": false,
          "additionalAttributes": {
            "additionalProp1": "string",
            "additionalProp2": "string",
            "additionalProp3": "string"
          },
          "businessUnits": [
            "string"
          ],
          "schedules": [
            {
              "tag": "string",
              "type": "ONCE",
              "executionTimes": [
                "string"
              ],
              "startDate": "2020-02-18T09:39:01.077+00:00",
              "skipHolidays": false
            }
          ]
        }
      },
      "SharedFolderApplication": {
        "value": {
          "name": "string",
          "type": "SharedFolder",
          "notes": "string",
          "managedByCG": false,
          "additionalAttributes": {
            "additionalProp1": "string",
            "additionalProp2": "string",
            "additionalProp3": "string"
          },
          "businessUnits": [
            "string"
          ],
          "sharedFolder": "string"
        }
      },
      "SiteMailboxApplication": {
        "value": {
          "name": "string",
          "type": "SiteMailbox",
          "notes": "string",
          "additionalAttributes": {
            "additionalProp1": "string",
            "additionalProp2": "string",
            "additionalProp3": "string"
          },
          "businessUnits": [
            "string"
          ],
          "outboxFolder": "string",
          "inboxFolder": "string",
          "dropFolder": "string"
        }
      },
      "StandardRouterApplication": {
        "value": {
          "name": "string",
          "type": "StandardRouter",
          "notes": "string",
          "managedByCG": false,
          "additionalAttributes": {
            "additionalProp1": "string",
            "additionalProp2": "string",
            "additionalProp3": "string"
          },
          "businessUnits": [
            "string"
          ],
          "outboxEnabled": false,
          "outboxFolder": "string",
          "secureConnectionRequired": false,
          "renameFilesEnabled": false,
          "outboxFileFormat": "string",
          "inboxEnabled": false,
          "inboxFolder": false,
          "inboxIdPattern": "string",
          "dropFolder": "string"
        }
      },
      "SynchronyTransferApplication": {
        "value": {
          "name": "string",
          "type": "SynchronyTransfer",
          "notes": "string",
          "managedByCG": false,
          "additionalAttributes": {
            "additionalProp1": "string",
            "additionalProp2": "string",
            "additionalProp3": "string"
          },
          "businessUnits": [
            "string"
          ]
        }
      },
      "TransferLogMaintApplication": {
        "value": {
          "name": "string",
          "type": "TransferLogMaint",
          "notes": "string",
          "managedByCG": false,
          "additionalAttributes": {
            "additionalProp1": "string",
            "additionalProp2": "string",
            "additionalProp3": "string"
          },
          "businessUnits": [
            "string"
          ],
          "daysKeepingDataInDb": 0,
          "daysKeepingInProgressInDb": 0,
          "exportEnabled": false,
          "exportDir": "string",
          "daysKeepingDataInFiles": 0,
          "recordsPerFile": 0,
          "parallelismDegree": 0,
          "schedules": [
            {
              "tag": "string",
              "type": "HOURLY",
              "executionTimes": [
                "string"
              ],
              "startDate": "2020-02-18T09:39:01.077+00:00",
              "endDate": "2020-02-18T09:39:01.077+00:00",
              "hourlyStep": 0,
              "skipHolidays": false,
              "hourlyType": "PERHOURS"
            }
          ]
        }
      },
      "UnlicensedAccountMaint": {
        "value": {
          "name": "string",
          "type": "UnlicensedAccountMaint",
          "notes": "string",
          "managedByCG": false,
          "additionalAttributes": {
            "additionalProp1": "string",
            "additionalProp2": "string",
            "additionalProp3": "string"
          },
          "businessUnits": [
            "string"
          ],
          "inactivePeriod": 0,
          "schedules": [
            {
              "tag": "string",
              "type": "DAILY",
              "executionTimes": [
                "string"
              ],
              "startDate": "2020-02-18T09:39:01.077+00:00",
              "endDate": "2020-02-18T09:39:01.077+00:00",
              "skipHolidays": false,
              "dailyType": "EVERYDAY"
            }
          ]
        }
      },
      "AckMessageExample": {
        "value": {
          "userMessage": ""
        }
      },
      "ResubmissionStatusExample": {
        "value": {
          "message": "string",
          "status": "OK"
        }
      },
      "ReceiptVerificationResultExample": {
        "value": {
          "fileIntegrityResult": "string",
          "signatureResult": "string"
        }
      },
      "HTTPSiteExample": {
        "value": {
          "name": "string",
          "type": "http",
          "protocol": "http",
          "transferType": "internal",
          "maxConcurrentConnection": 0,
          "default": false,
          "accessLevel": "PRIVATE",
          "account": "string",
          "additionalAttributes": {
            "additionalProp1": "string",
            "additionalProp2": "string",
            "additionalProp3": "string"
          },
          "host": "string",
          "port": "string",
          "useUri": false,
          "uri": "string",
          "dmz": "none",
          "downloadFolderAdvancedExpressionEnabled": false,
          "downloadFolder": "string",
          "downloadPatternAdvancedExpressionEnabled": false,
          "downloadPattern": "string",
          "uploadFolderOverridable": false,
          "uploadFolder": "string",
          "transferMode": "AUTO_DETECT",
          "isSecure": false,
          "verifyCert": false,
          "fipsMode": false,
          "userName": "string",
          "usePassword": false,
          "usePasswordExpr": false,
          "password": "string",
          "clientCertificate": "string",
          "requestMode": "GET",
          "cipherSuites": "string",
          "protocols": "string",
          "postTransmissionActions": {
            "deleteOnTempFailOut": false,
            "deleteOnSuccessIn": false,
            "deleteOnPermFailOut": false,
            "deleteOnPermFailIn": false,
            "doAsOut": "string",
            "doAsIn": "string"
          },
          "alternativeAddresses": [
            {
              "host": "host",
              "port": "string",
              "position": 1
            }
          ]
        }
      },
      "FTPSiteExample": {
        "value": {
          "name": "string",
          "type": "ftp",
          "protocol": "ftp",
          "transferType": "internal",
          "maxConcurrentConnection": 0,
          "default": false,
          "accessLevel": "PRIVATE",
          "account": "string",
          "additionalAttributes": {
            "additionalProp1": "string",
            "additionalProp2": "string",
            "additionalProp3": "string"
          },
          "host": "string",
          "port": "string",
          "dmz": "none",
          "activeMode": false,
          "downloadFolderAdvancedExpressionEnabled": false,
          "downloadFolder": "string",
          "downloadPatternAdvancedExpressionEnabled": false,
          "downloadPattern": "string",
          "uploadFolderOverridable": false,
          "uploadFolder": "string",
          "uploadCommand": "STOR",
          "preferredMethod": "default",
          "transferMode": "AUTO_DETECT",
          "matchAnyLineTerminators": false,
          "hostnameVerification": "default",
          "isSecure": false,
          "verifyCert": false,
          "ccc": false,
          "tlsShutdownCcc": false,
          "fipsMode": false,
          "siteCommand": "string",
          "userName": "string",
          "usePassword": false,
          "password": "string",
          "usePasswordExpr": false,
          "clientCertificate": "string",
          "cipherSuites": "string",
          "protocols": "string",
          "postTransmissionActions": {
            "deleteOnTempFailOut": false,
            "deleteOnSuccessIn": false,
            "deleteOnPermFailOut": false,
            "deleteOnPermFailIn": false,
            "doAsOut": "string",
            "doAsIn": "string",
            "moveOnTempFailOut": "string",
            "moveOnPermFailOut": "string",
            "moveOnSuccessOut": "string",
            "moveOnPermFailIn": "string",
            "moveOnSuccessIn": "string"
          },
          "alternativeAddresses": [
            {
              "host": "host",
              "port": "string",
              "position": 1
            }
          ]
        }
      },
      "SSHSiteExample": {
        "value": {
          "name": "string",
          "type": "ssh",
          "protocol": "ssh",
          "transferType": "internal",
          "maxConcurrentConnection": 0,
          "default": false,
          "accessLevel": "PRIVATE",
          "account": "string",
          "additionalAttributes": {
            "additionalProp1": "string",
            "additionalProp2": "string",
            "additionalProp3": "string"
          },
          "host": "string",
          "port": "string",
          "dmz": "none",
          "downloadFolderAdvancedExpressionEnabled": false,
          "downloadFolder": "string",
          "downloadPatternAdvancedExpressionEnabled": false,
          "downloadPatternType": "string",
          "downloadPattern": "string",
          "uploadFolderOverridable": false,
          "uploadFolder": "string",
          "uploadPermissions": 420,
          "updatePermissionsWithChmodCommand": "",
          "transferMode": "AUTO_DETECT",
          "verifyFinger": false,
          "fingerPrint": "string",
          "fipsMode": false,
          "userName": "string",
          "usePassword": false,
          "usePasswordExpr": false,
          "password": "string",
          "socketTimeout": 300,
          "socketBufferSize": 65536,
          "socketSendBufferSize": 65536,
          "bufferSize": 32768,
          "blockSize": 32768,
          "tcpNoDelay": true,
          "clientCertificate": "string",
          "cipherSuites": "string",
          "protocols": "string",
          "allowedMacs": "string",
          "keyExchangeAlgorithms": "string",
          "publicKeys": "string",
          "postTransmissionActions": {
            "deleteOnTempFailOut": false,
            "deleteOnSuccessIn": false,
            "deleteOnPermFailOut": false,
            "deleteOnPermFailIn": false,
            "doAsOut": "string",
            "doAsIn": "string",
            "moveOnTempFailOut": "string",
            "moveOnPermFailOut": "string",
            "moveOnSuccessOut": "string",
            "moveOnPermFailIn": "string",
            "moveOnSuccessIn": "string",
            "doMoveOverwriteIn": false,
            "doMoveOverwriteOut": false
          },
          "alternativeAddresses": [
            {
              "host": "host",
              "port": "string",
              "position": 1
            }
          ]
        }
      },
      "PeSITSiteExample": {
        "value": {
          "name": "string",
          "type": "pesit",
          "protocol": "pesit",
          "transferType": "internal",
          "maxConcurrentConnection": 0,
          "default": false,
          "accessLevel": "PRIVATE",
          "account": "string",
          "additionalAttributes": {
            "additionalProp1": "string",
            "additionalProp2": "string",
            "additionalProp3": "string"
          },
          "pesitId": "string",
          "host": "string",
          "port": "string",
          "dmz": "none",
          "configurePreconnection": false,
          "preconnectionPartnerId": "none",
          "usePreconnectionPartnerPassword": false,
          "usePreconnectionPartnerPasswordExpr": false,
          "preconnectionPartnerPassword": "none",
          "preconnectionServerId": "none",
          "usePreconnectionServerPassword": false,
          "usePreconnectionServerPasswordExpr": false,
          "preconnectionServerPassword": "none",
          "useServerPassword": false,
          "useServerPasswordExpr": false,
          "serverPassword": "string",
          "usePartnerPassword": false,
          "usePartnerPasswordExpr": false,
          "partnerPassword": "string",
          "compression": "none",
          "resyncAllowed": false,
          "checkpointInterval": 1024,
          "checkpointWindow": 4,
          "connectionTimeout": 60,
          "bufferSize": 8192,
          "sendMessage": "string",
          "receiveMessage": "string",
          "storeAndForwardMode": "START_NEW",
          "originator": "string",
          "finalDestination": "string",
          "ptcpConnections": 1,
          "ptcpPacketSize": 3000,
          "socketSendReceiveBuffersize": 65536,
          "ptcpConnectRetryCount": 10,
          "isSecure": true,
          "verifyCert": false,
          "fipsMode": false,
          "cftCompatibleSslMode": false,
          "loginCertificate": "string",
          "partnerCertificate": "string",
          "cipherSuites": "string",
          "protocols": "string",
          "alternativeAddresses": [
            {
              "host": "host",
              "port": "string",
              "position": 1
            }
          ]
        }
      },
      "AS2SiteExample": {
        "value": {
          "name": "string",
          "type": "as2",
          "protocol": "as2",
          "transferType": "internal",
          "maxConcurrentConnection": 0,
          "default": false,
          "accessLevel": "PRIVATE",
          "account": "string",
          "additionalAttributes": {
            "additionalProp1": "string",
            "additionalProp2": "string",
            "additionalProp3": "string"
          },
          "senderAs2Id": "string",
          "senderEmail": "string",
          "receiverAs2Id": "string",
          "as2Url": "string",
          "receiverEmail": "string",
          "dmz": "none",
          "fipsMode": false,
          "cipherSuites": "string",
          "protocols": "string",
          "subject": "string",
          "remoteEncryptionCertificate": "string",
          "remoteSigningCertificate": "string",
          "serverEncryptionCertificate": "string",
          "serverSigningCertificate": "string",
          "transferSettings": {
            "doAsOut": "string",
            "doAsIn": "string",
            "clientCertificate": "string",
            "senderUserName": "string",
            "senderPassword": "string",
            "mimeType": "string",
            "subject": "string",
            "requireSign": false,
            "requireEncrypt": false,
            "requireSsl": false,
            "requireBA": false,
            "receiverUserName": "string",
            "receiverPassword": "string",
            "enableChunked": false,
            "as2MdnReturnUrl": "string",
            "as2MdnUrl": false,
            "as2MdnOptions": "string",
            "encrypt": "string",
            "type": "string",
            "sign": "string",
            "compress": false,
            "transferTimeout": 600
          },
          "alternativeAddresses": [
            {
              "host": "host",
              "port": "string",
              "position": 1
            }
          ]
        }
      },
      "FolderMonitorSiteExample": {
        "value": {
          "name": "string",
          "type": "folder",
          "protocol": "folder",
          "transferType": "internal",
          "maxConcurrentConnection": 0,
          "default": false,
          "accessLevel": "PRIVATE",
          "account": "string",
          "additionalAttributes": {
            "additionalProp1": "string",
            "additionalProp2": "string",
            "additionalProp3": "string"
          },
          "downloadFolderAdvancedExpressionEnabled": false,
          "downloadFolder": "string",
          "downloadPatternAdvancedExpressionEnabled": false,
          "downloadPatternType": "string",
          "downloadPattern": "string",
          "downloadPatternCaseSensitive": true,
          "downloadSubfolderMaxDepth": 1,
          "downloadSubfolderPatternType": "string",
          "downloadSubfolderPattern": "string",
          "downloadSubfolderPatternCaseSensitive": true,
          "uploadFolder": "string",
          "uploadFolderExpressionSupport": false,
          "uploadFolderAutocreate": false,
          "uploadFolderOverridable": false,
          "postTransmissionActions": {
            "deleteOnTempFailOut": false,
            "deleteOnSuccessIn": false,
            "deleteOnPermFailOut": false,
            "deleteOnPermFailIn": false,
            "doAsOut": "string",
            "doAsIn": "string",
            "moveOnTempFailOut": "string",
            "moveOnPermFailOut": "string",
            "moveOnSuccessOut": "string",
            "moveOnPermFailIn": "string",
            "moveOnSuccessIn": "string"
          }
        }
      },
      "AdhocSiteExample": {
        "value": {
          "name": "string",
          "type": "adhoc",
          "protocol": "adhoc",
          "transferType": "internal",
          "maxConcurrentConnection": 0,
          "default": false,
          "accessLevel": "PRIVATE",
          "account": "string",
          "additionalAttributes": {
            "additionalProp1": "string",
            "additionalProp2": "string",
            "additionalProp3": "string"
          },
          "securityLevel": "ANONYMOUS_LINK",
          "challenge": "string",
          "response": "string",
          "confirmResponse": "string",
          "notificationTemplate": "string",
          "expiration": "1440 (1 day)",
          "fromEmailAddress": "string",
          "toEmailAddresses": "string",
          "ccEmailAddresses": "string",
          "bccEmailAddresses": "string",
          "body": "string",
          "sendAs": "string",
          "sendFileAsAttachment": "boolean",
          "subject": "string",
          "alternativeAddresses": [
            {
              "host": "host",
              "port": "string",
              "position": 1
            }
          ]
        }
      },
      "ConnectDirectSiteExample": {
        "value": {
          "name": "string",
          "type": "cd",
          "protocol": "cd",
          "transferType": "internal",
          "maxConcurrentConnection": 0,
          "default": false,
          "accessLevel": "PRIVATE",
          "account": "string",
          "additionalAttributes": {
            "additionalProp1": "string",
            "additionalProp2": "string",
            "additionalProp3": "string"
          },
          "siteTemplate": "string",
          "transferMode": "AUTO_DETECT",
          "localServerName": "string",
          "localServerPort": "string",
          "userName": "string",
          "usePassword": false,
          "usePasswordExpr": false,
          "useCertificate": false,
          "certificateId": "string",
          "password": "string",
          "submitScriptWithinFile": false,
          "sendScript": "string",
          "recScript": "string"
        }
      },
      "SynchronySiteExample": {
        "value": {
          "name": "string",
          "type": "synchrony transfer",
          "protocol": "synchrony transfer",
          "transferType": "internal",
          "maxConcurrentConnection": 0,
          "default": false,
          "accessLevel": "PRIVATE",
          "account": "string",
          "additionalAttributes": {
            "additionalProp1": "string",
            "additionalProp2": "string",
            "additionalProp3": "string"
          },
          "siteTemplate": "string",
          "host": "string",
          "port": "string",
          "username": "string",
          "usePasswordExpr": false,
          "partner": "string",
          "transferProfile": "string",
          "password": "string",
          "additionalProperties": {}
        }
      },
      "CustomSiteExample": {
        "value": {
          "name": "string",
          "type": "custom",
          "protocol": "string",
          "transferType": "internal",
          "maxConcurrentConnection": 0,
          "default": false,
          "accessLevel": "PRIVATE",
          "account": "string",
          "additionalAttributes": {
            "additionalProp1": "string",
            "additionalProp2": "string",
            "additionalProp3": "string"
          },
          "clientCertificate": "string",
          "customProperties": {
            "property_1": "string",
            "property_2": "string"
          }
        }
      },
      "connectDirectSiteTemplate": {
        "value": {
          "name": "string",
          "protocol": "cd",
          "additionalAttributes": {
            "additionalProp1": "string",
            "additionalProp2": "string",
            "additionalProp3": "string"
          },
          "type": "cd",
          "localServerName": "string",
          "localServerPort": "string",
          "submitScriptWithinFile": false,
          "recScript": "string",
          "sendScript": "string",
          "userName": "string",
          "usePassword": false,
          "usePasswordExpr": false,
          "password": "string",
          "useCertificate": false,
          "certificatePlaceholder": "string",
          "transferMode": "string"
        }
      },
      "synchronySiteTemplate": {
        "value": {
          "name": "string",
          "protocol": "synchrony transfer",
          "additionalAttributes": {
            "additionalProp1": "string",
            "additionalProp2": "string",
            "additionalProp3": "string"
          },
          "type": "synchrony transfer",
          "host": "string",
          "port": "string",
          "userName": "string",
          "usePasswordExpr": false,
          "partner": "string",
          "password": "string",
          "transferProfile": "string",
          "additionalProperties": {}
        }
      },
      "CustomSiteTemplateExample": {
        "value": {
          "name": "string",
          "type": "custom",
          "protocol": "custom",
          "additionalAttributes": {
            "additionalProp1": "string",
            "additionalProp2": "string",
            "additionalProp3": "string"
          },
          "customProperties": {
            "property_1": "string",
            "property_2": "string"
          }
        }
      },
      "TransferProfileOldExample": {
        "value": {
          "id": "string",
          "name": "string",
          "default": false,
          "account": "string",
          "sendMapping": "/*",
          "receiveMapping": "/${pesit.fileLabel}",
          "sendingAcknowledgmentEnabled": false,
          "fileLabelOption": "DONT_SEND",
          "multiSelect": false,
          "transferMode": "BINARY",
          "recordFormat": "Variable",
          "recordLength": 2048,
          "paddingStripEnabled": false,
          "additionalAttributes": {
            "additionalProp1": "string",
            "additionalProp2": "string",
            "additionalProp3": "string"
          }
        }
      },
      "TransferProfileDefaultExample": {
        "value": {
          "id": "string",
          "name": "string",
          "default": false,
          "account": "string",
          "sendMapping": "/*",
          "receiveMapping": "/${pesit.fileLabel}",
          "sendingAcknowledgmentEnabled": false,
          "fileLabelOption": "DONT_SEND",
          "multiSelect": false,
          "transferMode": "BINARY",
          "recordFormat": "Variable",
          "recordLength": 2048,
          "paddingStripEnabled": false,
          "additionalAttributes": {
            "additionalProp1": "string",
            "additionalProp2": "string",
            "additionalProp3": "string"
          },
          "advancedSettings": {
            "enabled": false,
            "callerTranscoding": {
              "type": "binary"
            },
            "receiverTranscoding": {
              "type": "binary",
              "localDataCode": "BINARY"
            }
          }
        }
      },
      "TransferProfileAsciiAndEbcdicExample": {
        "value": {
          "id": "string",
          "name": "string",
          "default": false,
          "account": "string",
          "sendMapping": "/*",
          "receiveMapping": "/${pesit.fileLabel}",
          "sendingAcknowledgmentEnabled": false,
          "fileLabelOption": "DONT_SEND",
          "multiSelect": false,
          "transferMode": "BINARY",
          "recordFormat": "Variable",
          "recordLength": 2048,
          "paddingStripEnabled": false,
          "additionalAttributes": {
            "additionalProp1": "string",
            "additionalProp2": "string",
            "additionalProp3": "string"
          },
          "advancedSettings": {
            "enabled": true,
            "callerTranscoding": {
              "type": "ascii",
              "localDataCode": "ASCII",
              "networkDataCode": "ASCII",
              "outputRecordLength": 2048,
              "outputRecordFormat": "VARIABLE",
              "paddingCharacter": "\\u0020"
            },
            "receiverTranscoding": {
              "type": "ebcdic",
              "localDataCode": "EBCDIC",
              "outputRecordLength": 2048,
              "outputRecordFormat": "VARIABLE",
              "paddingCharacter": "\\u0040",
              "lineEndingFormat": "DEFAULT"
            }
          }
        }
      },
      "TransferProfileEbcdicPredefinedAndPredefinedExample": {
        "value": {
          "id": "string",
          "name": "string",
          "default": false,
          "account": "string",
          "sendMapping": "/*",
          "receiveMapping": "/${pesit.fileLabel}",
          "sendingAcknowledgmentEnabled": false,
          "fileLabelOption": "DONT_SEND",
          "multiSelect": false,
          "transferMode": "BINARY",
          "recordFormat": "Variable",
          "recordLength": 2048,
          "paddingStripEnabled": false,
          "additionalAttributes": {
            "additionalProp1": "string",
            "additionalProp2": "string",
            "additionalProp3": "string"
          },
          "advancedSettings": {
            "enabled": true,
            "callerTranscoding": {
              "type": "ebcdic_predefined",
              "localDataCode": "EBCDIC",
              "networkDataCode": "EBCDIC",
              "transcoding": "predefined",
              "outputRecordLength": 2048,
              "outputRecordFormat": "VARIABLE",
              "paddingCharacter": "\\u0040",
              "sourceEncodingScheme": "IBM1047",
              "outputEncodingScheme": "IBM1047"
            },
            "receiverTranscoding": {
              "type": "predefined",
              "transcoding": "predefined",
              "outputRecordLength": 2048,
              "outputRecordFormat": "VARIABLE",
              "paddingCharacter": "\\u0020",
              "lineEndingFormat": "DEFAULT",
              "sourceEncodingScheme": "UTF-8",
              "outputEncodingScheme": "UTF-8"
            }
          }
        }
      },
      "AdvancedRoutingSubscriptionExample": {
        "value": {
          "type": "AdvancedRouting",
          "folder": "string",
          "account": "string",
          "application": "string",
          "maxParallelSitPulls": 0,
          "flowAttrsMergeMode": "preserve",
          "folderMonitorScheduleCheck": "string",
          "flowName": "string",
          "scheduledFolderMonitor": "string",
          "subscriptionEncryptMode": "string",
          "fileRetentionPeriod": 0,
          "flowAttributes": {
            "additionalProp1": "string",
            "additionalProp2": "string",
            "additionalProp3": "string"
          },
          "schedules": [
            {
              "tag": "string",
              "type": "ONCE",
              "executionTimes": [
                "string"
              ],
              "startDate": "2020-02-18T09:39:01.077+00:00",
              "skipHolidays": false
            }
          ],
          "transferConfigurations": [
            {
              "tag": "PARTNER-IN",
              "outbound": false,
              "site": "string",
              "transferProfile": "string",
              "dataTransformations": [
                {
                  "type": "string",
                  "asciiArmor": false,
                  "compressionAlgorithm": 0,
                  "compressionLevel": 0,
                  "encryptEnabled": false,
                  "localSignCertificate": "string",
                  "originalNameExpression": "string",
                  "originalNameExpressionEnabled": false,
                  "partnerEncryptCertificate": "string",
                  "requireEncryption": false,
                  "requireSignature": false,
                  "signingEnabled": false,
                  "transformedNameExpression": "string",
                  "transformedNameExpressionEnabled": false
                }
              ]
            }
          ],
          "postClientDownloads": {
            "postClientDownloadActionType": "string",
            "postClientDownloadActionTypeFailure": "string",
            "postClientDownloadTypeOnPermfailDoDelete": false,
            "postClientDownloadTypeOnSuccessDoAdvancedRouting": false,
            "postClientDownloadTypeOnSuccessDoAdvancedRoutingProcessFile": false,
            "postClientDownloadTypeOnFailDoAdvancedRouting": false,
            "postClientDownloadTypeOnFailDoAdvancedRoutingProcessFailedFile": false
          },
          "postProcessingActions": {
            "ppaOnFailInDoDelete": false,
            "ppaOnFailInDoMove": "string",
            "ppaOnSuccessInDoDelete": false,
            "ppaOnSuccessInDoMove": "string"
          },
          "postTransmissionActions": {
            "moveOverwrite": false,
            "ptaOnTempfailInDoDelete": false,
            "ptaOnTempfailInDoMove": "string",
            "ptaOnPermfailInDoDelete": false,
            "ptaOnPermfailInDoMove": "string",
            "ptaOnPermfailDoAdvancedRouting": false,
            "ptaOnPermfailInDoAdvancedRoutingFailedFile": false,
            "ptaOnPermfailInDoAdvancedRoutingWildcardPull": false,
            "ptaOnTempfailInDoAdvancedRouting": false,
            "ptaOnTempfailInDoAdvancedRoutingProcessFailedFile": false,
            "ptaOnTempfailInDoAdvancedRoutingWildcardPull": false,
            "ptaOnSuccessDoInAdvancedRoutingWildcardPull": false,
            "ptaOnSuccessInDoDelete": false,
            "ptaOnSuccessInDoMove": "string",
            "ptaOnSuccessInDoMoveOverwrite": false,
            "ptaOnPermfailOutDoDelete": false,
            "ptaOnPermfailOutDoMove": "string",
            "ptaOnSuccessOutDoDelete": false,
            "ptaOnSuccessOutDoMove": "string",
            "ptaOnSuccessOutDoMoveOverwrite": false,
            "ptaOnTempfailOutDoDelete": false,
            "ptaOnTempfailOutDoMove": "string",
            "triggerOnConditionEnabled": false,
            "triggerOnConditionExpression": "string",
            "triggerOnSuccessfulWildcardPull": false,
            "submitFilterType": "string",
            "submitFilenamePatternExpression": "string",
            "triggerFileOption": "string",
            "triggerFileRetriesNumber": 0,
            "triggerFileRetryDelay": 0
          }
        }
      },
      "BasicSubscriptionExample": {
        "value": {
          "type": "Basic",
          "folder": "string",
          "account": "string",
          "application": "string",
          "maxParallelSitPulls": 0,
          "flowAttrsMergeMode": "preserve",
          "folderMonitorScheduleCheck": "string",
          "flowName": "string",
          "scheduledFolderMonitor": "string",
          "subscriptionEncryptMode": "string",
          "fileRetentionPeriod": 0,
          "flowAttributes": {
            "additionalProp1": "string",
            "additionalProp2": "string",
            "additionalProp3": "string"
          },
          "schedules": [
            {
              "tag": "string",
              "type": "HOURLY",
              "executionTimes": [
                "string"
              ],
              "startDate": "2020-02-18T09:39:01.077+00:00",
              "endDate": "2020-02-18T09:39:01.077+00:00",
              "hourlyStep": 0,
              "skipHolidays": false,
              "hourlyType": "PERHOURS"
            }
          ],
          "transferConfigurations": [
            {
              "tag": "PARTNER-IN",
              "outbound": false,
              "site": "string",
              "transferProfile": "string",
              "dataTransformations": [
                {
                  "type": "string",
                  "asciiArmor": false,
                  "compressionAlgorithm": 0,
                  "compressionLevel": 0,
                  "encryptEnabled": false,
                  "localSignCertificate": "string",
                  "originalNameExpression": "string",
                  "originalNameExpressionEnabled": false,
                  "partnerEncryptCertificate": "string",
                  "requireEncryption": false,
                  "requireSignature": false,
                  "signingEnabled": false,
                  "transformedNameExpression": "string",
                  "transformedNameExpressionEnabled": false
                }
              ]
            }
          ],
          "templateAdvancedExpression": false,
          "postTransmissionActions": {
            "ptaOnTempfailInDoDelete": false,
            "ptaOnTempfailInDoMove": "string",
            "ptaOnPermfailInDoDelete": false,
            "ptaOnPermfailInDoMove": "string",
            "ptaOnSuccessInDoMove": "string",
            "ptaOnSuccessInDoDelete": false,
            "ptaOnPermfailOutDoDelete": false,
            "ptaOnPermfailOutDoMove": "string",
            "ptaOnSuccessOutDoDelete": false,
            "ptaOnSuccessOutDoMove": "string"
          }
        }
      },
      "HumanSystemSubscriptionExample": {
        "value": {
          "type": "HumanSystem",
          "folder": "string",
          "account": "string",
          "application": "string",
          "maxParallelSitPulls": 0,
          "flowAttrsMergeMode": "preserve",
          "folderMonitorScheduleCheck": "string",
          "flowName": "string",
          "scheduledFolderMonitor": "string",
          "subscriptionEncryptMode": "string",
          "fileRetentionPeriod": 0,
          "flowAttributes": {
            "additionalProp1": "string",
            "additionalProp2": "string",
            "additionalProp3": "string"
          },
          "schedules": [
            {
              "tag": "string",
              "type": "WEEKLY",
              "executionTimes": [
                "string"
              ],
              "daysOfWeek": [
                "SUNDAY"
              ],
              "startDate": "2020-02-18T09:39:01.077+00:00",
              "endDate": "2020-02-18T09:39:01.077+00:00",
              "skipHolidays": false
            }
          ],
          "transferConfigurations": [
            {
              "tag": "PARTNER-IN",
              "outbound": false,
              "site": "string",
              "transferProfile": "string",
              "dataTransformations": [
                {
                  "type": "string",
                  "asciiArmor": false,
                  "compressionAlgorithm": 0,
                  "compressionLevel": 0,
                  "encryptEnabled": false,
                  "localSignCertificate": "string",
                  "originalNameExpression": "string",
                  "originalNameExpressionEnabled": false,
                  "partnerEncryptCertificate": "string",
                  "requireEncryption": false,
                  "requireSignature": false,
                  "signingEnabled": false,
                  "transformedNameExpression": "string",
                  "transformedNameExpressionEnabled": false
                }
              ]
            }
          ],
          "rules": [
            {
              "enabled": false,
              "recipientPattern": "string",
              "fileFilterPattern": "string",
              "targetFolder": "string"
            }
          ]
        }
      },
      "MBFTSubscriptionExample": {
        "value": {
          "type": "MBFT",
          "folder": "string",
          "account": "string",
          "application": "string",
          "maxParallelSitPulls": 0,
          "flowAttrsMergeMode": "preserve",
          "folderMonitorScheduleCheck": "string",
          "flowName": "string",
          "scheduledFolderMonitor": "string",
          "subscriptionEncryptMode": "string",
          "fileRetentionPeriod": 0,
          "flowAttributes": {
            "additionalProp1": "string",
            "additionalProp2": "string",
            "additionalProp3": "string"
          },
          "schedules": [
            {
              "tag": "string",
              "type": "YEARLY",
              "executionTimes": [
                "string"
              ],
              "daysOfMonth": [
                0
              ],
              "months": [
                "JANUARY"
              ],
              "startDate": "2020-02-18T09:39:01.077+00:00",
              "endDate": "2020-02-18T09:39:01.077+00:00",
              "skipHolidays": false
            }
          ],
          "transferConfigurations": [
            {
              "tag": "PARTNER-IN",
              "outbound": false,
              "site": "string",
              "transferProfile": "string",
              "dataTransformations": [
                {
                  "type": "string",
                  "asciiArmor": false,
                  "compressionAlgorithm": 0,
                  "compressionLevel": 0,
                  "encryptEnabled": false,
                  "localSignCertificate": "string",
                  "originalNameExpression": "string",
                  "originalNameExpressionEnabled": false,
                  "partnerEncryptCertificate": "string",
                  "requireEncryption": false,
                  "requireSignature": false,
                  "signingEnabled": false,
                  "transformedNameExpression": "string",
                  "transformedNameExpressionEnabled": false
                }
              ]
            }
          ]
        }
      },
      "SharedFolderSubscriptionExample": {
        "value": {
          "type": "SharedFolder",
          "folder": "string",
          "account": "string",
          "application": "string",
          "maxParallelSitPulls": 0,
          "flowAttrsMergeMode": "preserve",
          "folderMonitorScheduleCheck": "string",
          "flowName": "string",
          "scheduledFolderMonitor": "string",
          "subscriptionEncryptMode": "string",
          "fileRetentionPeriod": 0,
          "flowAttributes": {
            "additionalProp1": "string",
            "additionalProp2": "string",
            "additionalProp3": "string"
          },
          "schedules": [
            {
              "tag": "string",
              "type": "EXPRESSION",
              "startDate": "2020-02-18T09:39:01.077+00:00",
              "endDate": "2020-02-18T09:39:01.077+00:00",
              "cronExpression": "string"
            }
          ],
          "transferConfigurations": [
            {
              "tag": "PARTNER-IN",
              "outbound": false,
              "site": "string",
              "transferProfile": "string",
              "dataTransformations": [
                {
                  "type": "string",
                  "asciiArmor": false,
                  "compressionAlgorithm": 0,
                  "compressionLevel": 0,
                  "encryptEnabled": false,
                  "localSignCertificate": "string",
                  "originalNameExpression": "string",
                  "originalNameExpressionEnabled": false,
                  "partnerEncryptCertificate": "string",
                  "requireEncryption": false,
                  "requireSignature": false,
                  "signingEnabled": false,
                  "transformedNameExpression": "string",
                  "transformedNameExpressionEnabled": false
                }
              ]
            }
          ],
          "templateAdvancedExpression": false,
          "postTransmissionActions": {
            "ptaOnTempfailInDoDelete": false,
            "ptaOnTempfailInDoMove": "string",
            "ptaOnPermfailInDoDelete": false,
            "ptaOnPermfailInDoMove": "string",
            "ptaOnSuccessInDoMove": "string",
            "ptaOnSuccessInDoDelete": false
          }
        }
      },
      "SiteMailboxSubscriptionExample": {
        "value": {
          "type": "SiteMailbox",
          "folder": "string",
          "account": "string",
          "application": "string",
          "maxParallelSitPulls": 0,
          "flowAttrsMergeMode": "preserve",
          "folderMonitorScheduleCheck": "string",
          "flowName": "string",
          "scheduledFolderMonitor": "string",
          "subscriptionEncryptMode": "string",
          "fileRetentionPeriod": 0,
          "flowAttributes": {
            "additionalProp1": "string",
            "additionalProp2": "string",
            "additionalProp3": "string"
          },
          "schedules": [
            {
              "tag": "string",
              "type": "ONCE",
              "executionTimes": [
                "string"
              ],
              "startDate": "2020-02-18T09:39:01.077+00:00",
              "skipHolidays": false
            }
          ],
          "transferConfigurations": [
            {
              "tag": "PARTNER-IN",
              "outbound": false,
              "site": "string",
              "transferProfile": "string",
              "dataTransformations": [
                {
                  "type": "string",
                  "asciiArmor": false,
                  "compressionAlgorithm": 0,
                  "compressionLevel": 0,
                  "encryptEnabled": false,
                  "localSignCertificate": "string",
                  "originalNameExpression": "string",
                  "originalNameExpressionEnabled": false,
                  "partnerEncryptCertificate": "string",
                  "requireEncryption": false,
                  "requireSignature": false,
                  "signingEnabled": false,
                  "transformedNameExpression": "string",
                  "transformedNameExpressionEnabled": false
                }
              ]
            }
          ],
          "templateAdvancedExpression": false,
          "postTransmissionActions": {
            "ptaOnTempfailInDoDelete": false,
            "ptaOnTempfailInDoMove": "string",
            "ptaOnPermfailInDoDelete": false,
            "ptaOnPermfailInDoMove": "string",
            "ptaOnSuccessInDoMove": "string",
            "ptaOnSuccessInDoDelete": false,
            "ptaOnPermfailOutDoDelete": false,
            "ptaOnPermfailOutDoMove": "string",
            "ptaOnSuccessOutDoDelete": false,
            "ptaOnSuccessOutDoMove": "string"
          }
        }
      },
      "StandardRouterSubscriptionExample": {
        "value": {
          "type": "StandardRouter",
          "folder": "string",
          "account": "string",
          "application": "string",
          "maxParallelSitPulls": 0,
          "flowAttrsMergeMode": "preserve",
          "folderMonitorScheduleCheck": "string",
          "flowName": "string",
          "scheduledFolderMonitor": "string",
          "subscriptionEncryptMode": "string",
          "fileRetentionPeriod": 0,
          "flowAttributes": {
            "additionalProp1": "string",
            "additionalProp2": "string",
            "additionalProp3": "string"
          },
          "schedules": [
            {
              "tag": "string",
              "type": "MONTHLY",
              "executionTimes": [
                "string"
              ],
              "daysOfMonth": [
                0
              ],
              "daysOfWeek": [
                "SUNDAY"
              ],
              "startDate": "2020-02-18T09:39:01.077+00:00",
              "endDate": "2020-02-18T09:39:01.077+00:00",
              "weekOfMonth": "FIRST",
              "skipHolidays": false,
              "monthlyType": "EXACT"
            }
          ],
          "transferConfigurations": [
            {
              "tag": "PARTNER-IN",
              "outbound": false,
              "site": "string",
              "transferProfile": "string",
              "dataTransformations": [
                {
                  "type": "string",
                  "asciiArmor": false,
                  "compressionAlgorithm": 0,
                  "compressionLevel": 0,
                  "encryptEnabled": false,
                  "localSignCertificate": "string",
                  "originalNameExpression": "string",
                  "originalNameExpressionEnabled": false,
                  "partnerEncryptCertificate": "string",
                  "requireEncryption": false,
                  "requireSignature": false,
                  "signingEnabled": false,
                  "transformedNameExpression": "string",
                  "transformedNameExpressionEnabled": false
                }
              ]
            }
          ],
          "subscriberID": "string",
          "postTransmissionActions": {
            "ptaOnTempfailInDoDelete": false,
            "ptaOnTempfailInDoMove": "string",
            "ptaOnPermfailInDoDelete": false,
            "ptaOnPermfailInDoMove": "string",
            "ptaOnSuccessInDoMove": "string",
            "ptaOnSuccessInDoDelete": false,
            "ptaOnPermfailOutDoDelete": false,
            "ptaOnPermfailOutDoMove": "string",
            "ptaOnSuccessOutDoDelete": false,
            "ptaOnSuccessOutDoMove": "string"
          }
        }
      },
      "SynchronyTransferSubscriptionExample": {
        "value": {
          "type": "SynchronyTransfer",
          "folder": "string",
          "account": "string",
          "application": "string",
          "maxParallelSitPulls": 0,
          "flowAttrsMergeMode": "preserve",
          "folderMonitorScheduleCheck": "string",
          "flowName": "string",
          "scheduledFolderMonitor": "string",
          "subscriptionEncryptMode": "string",
          "fileRetentionPeriod": 0,
          "flowAttributes": {
            "additionalProp1": "string",
            "additionalProp2": "string",
            "additionalProp3": "string"
          },
          "schedules": [
            {
              "tag": "string",
              "type": "DAILY",
              "executionTimes": [
                "string"
              ],
              "startDate": "2020-02-18T09:39:01.077+00:00",
              "endDate": "2020-02-18T09:39:01.077+00:00",
              "skipHolidays": false,
              "dailyType": "EVERYDAY"
            }
          ],
          "transferConfigurations": [
            {
              "tag": "PARTNER-IN",
              "outbound": false,
              "site": "string",
              "transferProfile": "string",
              "dataTransformations": [
                {
                  "type": "string",
                  "asciiArmor": false,
                  "compressionAlgorithm": 0,
                  "compressionLevel": 0,
                  "encryptEnabled": false,
                  "localSignCertificate": "string",
                  "originalNameExpression": "string",
                  "originalNameExpressionEnabled": false,
                  "partnerEncryptCertificate": "string",
                  "requireEncryption": false,
                  "requireSignature": false,
                  "signingEnabled": false,
                  "transformedNameExpression": "string",
                  "transformedNameExpressionEnabled": false
                }
              ]
            }
          ]
        }
      },
      "FtpServerConfigurationExample": {
        "value": {
          "protocol": "ftp",
          "serverName": "string",
          "isActive": false,
          "host": "string",
          "ciphers": "string",
          "enabledSslProtocols": "string",
          "sslKeyAlgorithm": "string",
          "sslProtocol": "string",
          "sslTrustAlgorithm": "string",
          "port": 0,
          "certificateAlias": "string",
          "clientCertificateResolution": "none",
          "isFipsEnabled": false,
          "isFtpEnabled": false,
          "isFtpsEnabled": false,
          "passivePortBase": 0,
          "passivePortNumber": 0
        }
      },
      "HttpServerConfigurationExample": {
        "value": {
          "protocol": "http",
          "serverName": "string",
          "isActive": false,
          "httpPort": 0,
          "httpsPort": 0,
          "isHttpEnabled": false,
          "isHttpsEnabled": true,
          "httpHost": "string",
          "httpsHost": "string",
          "loginFormat": "HTML",
          "clientCertificateResolution": "none",
          "certificateAlias": "string",
          "isFipsEnabled": false,
          "sslProtocol": "string",
          "enabledSslProtocols": "string",
          "ciphers": "string",
          "allowedAuthenticationParameters": "string",
          "allowedAuthenticationParametersMaxSize": 0,
          "isHstsEnabled": true,
          "contentSecurityPolicy": "string",
          "xssProtection": "1; mode=block",
          "contentTypeOptions": "nosniff",
          "referrerPolicy": "no-referrer",
          "expectCt": "string",
          "httpSecuritySameSite": "Strict",
          "redirectHostname": "string"
        }
      },
      "SshServerConfigurationExample": {
        "value": {
          "protocol": "ssh",
          "serverName": "string",
          "isActive": false,
          "clientCertificateResolution": "none",
          "clientPasswordAuth": "default",
          "certificateAlias": "string",
          "port": 0,
          "host": "string",
          "isScpEnabled": false,
          "isSftpEnabled": false,
          "isFipsEnabled": true,
          "ciphers": "string",
          "keyExchangeAlgorithms": "string",
          "minDiffieHellmanGroupExchangeKeySize": 0,
          "allowedMacs": "string"
        }
      },
      "As2ServerConfigurationExample": {
        "value": {
          "protocol": "as2",
          "serverName": "string",
          "isActive": false,
          "clientCertificateResolution": "none",
          "nonSslListenerEnabled": false,
          "nonSslListenerHost": "string",
          "nonSslListenerPort": 0,
          "sslListenerEnabled": true,
          "sslListenerHost": "string",
          "sslListenerPort": 0,
          "enabledCipherSuites": "string",
          "isHstsEnabled": true,
          "isFipsEnabled": false,
          "keyAlgorithm": "string",
          "keyAlias": "string",
          "sslEnabledProtocols": "string",
          "isReceiverEnabled": true
        }
      },
      "PesitServerConfigurationExample": {
        "value": {
          "protocol": "pesit",
          "serverName": "string",
          "isActive": false,
          "clientCertificateResolution": "none",
          "isPesitEnabled": false,
          "isPesitSslEnabled": false,
          "isCftSslEnabled": false,
          "isPtcpEnabled": false,
          "isPtcpSslEnabled": false,
          "host": "string",
          "pesitPort": 0,
          "pesitSslPort": 0,
          "cftSslPort": 0,
          "ptcpPort": 0,
          "ptcpSslPort": 0,
          "cftSslKeyAlgorithm": "string",
          "cftSslKeyAlias": "string",
          "cftSslProtocol": "string",
          "cftSslTrustAlgorithm": "string",
          "ptcpKeyAlgorithm": "string",
          "ptcpKeyAlias": "string",
          "ptcpProtocol": "string",
          "ptcpTrustAlgorithm": "string",
          "pesitKeyAlgorithm": "string",
          "pesitKeyAlias": "string",
          "pesitSslProtocol": "string",
          "pesitTrustAlgorithm": "string",
          "ciphers": "string",
          "enabledSslProtocols": "string",
          "isFipsEnabled": false,
          "autodetectTlsModeListenerPort": 0,
          "autodetectTlsModeListenerEnabled": false,
          "autodetectTlsModeListenerTrustAlgorithm": "string",
          "autodetectTlsModeListenerKeyAlgorithm": "string",
          "autodetectTlsModeListenerKeyAlias": "string",
          "autodetectTlsModeListenerProtocol": "string"
        }
      },
      "SshDaemonConfigurationExample": {
        "value": {
          "maxConnections": 0,
          "preferBouncyCastleProvider": true,
          "banner": "string"
        }
      },
      "InternalLoginSettingsExample": {
        "value": {
          "certificateIssuer": "internal",
          "userAuthStatus": [],
          "userSSO": "disabled",
          "requirePassword": "optional",
          "requireCertificateForUserClasses": "disabled",
          "requirePasswordUserClasses": "empty",
          "ldapOption": "disabled",
          "siteMinderOption": "disabled",
          "adminAuthStatus": [],
          "adminSSO": "disabled",
          "adminCertificateOption": "optional",
          "adminSelectedCertificates": []
        }
      },
      "TrustedLoginSettingsExample": {
        "value": {
          "certificateIssuer": "trusted",
          "userAuthStatus": [],
          "userSSO": "disabled",
          "requirePassword": "optional",
          "requireCertificateForUserClasses": "disabled",
          "requirePasswordUserClasses": "empty",
          "ldapOption": "disabled",
          "siteMinderOption": "disabled",
          "adminAuthStatus": [],
          "adminSSO": "disabled",
          "adminCertificateOption": "optional",
          "adminSelectedCertificates": []
        }
      },
      "OtherLoginSettingsExample": {
        "value": {
          "certificateIssuer": "other",
          "userAuthStatus": [],
          "userSSO": "disabled",
          "requirePassword": "optional",
          "requireCertificateForUserClasses": "disabled",
          "requirePasswordUserClasses": "empty",
          "ldapOption": "disabled",
          "siteMinderOption": "disabled",
          "adminAuthStatus": [],
          "adminSSO": "disabled",
          "adminCertificateOption": "optional",
          "adminCertificateFileOrPath": "string",
          "adminSelectedCertificates": [],
          "adminCertificateDepthLimit": 0
        }
      },
      "SelectedLoginSettingsExample": {
        "value": {
          "certificateIssuer": "selected",
          "userSSO": "disabled",
          "requirePassword": "optional",
          "requireCertificateForUserClasses": "disabled",
          "requirePasswordUserClasses": "empty",
          "ldapOption": "disabled",
          "siteMinderOption": "disabled",
          "adminSSO": "disabled",
          "adminCertificateOption": "optional",
          "adminSelectedCertificates": []
        }
      }
    }
  }
}